{"version":3,"sources":["node_modules/tslib/tslib.es6.js","ng://@datorama/akita/src/internal/utils.ts","ng://@datorama/akita/src/internal/error.ts","ng://@datorama/akita/src/internal/crud.ts","ng://@datorama/akita/src/internal/global-state.ts","ng://@datorama/akita/src/internal/transaction.internal.ts","ng://@datorama/akita/src/api/store-config.ts","ng://@datorama/akita/src/api/config.ts","ng://@datorama/akita/src/api/store.ts","ng://@datorama/akita/src/internal/deep-freeze.ts","ng://@datorama/akita/src/api/entity-store.ts","ng://@datorama/akita/src/internal/sort.ts","ng://@datorama/akita/src/api/memoize.ts","ng://@datorama/akita/src/api/query-config.ts","ng://@datorama/akita/src/api/query.ts","ng://@datorama/akita/src/api/query-entity.ts","ng://@datorama/akita/src/api/transaction.ts","ng://@datorama/akita/src/api/arrays.ts","ng://@datorama/akita/src/api/operators.ts","ng://@datorama/akita/src/internal/action.ts","ng://@datorama/akita/src/api/snapshot-manager.ts","ng://@datorama/akita/src/plugins/plugin.ts","ng://@datorama/akita/src/plugins/paginator/paginator-plugin.ts","ng://@datorama/akita/src/enhancers/devtools.ts","ng://@datorama/akita/src/plugins/persist-form/persist-ng-form-plugin.ts","ng://@datorama/akita/src/enhancers/persist-state.ts","ng://@datorama/akita/src/plugins/entity-collection-plugin.ts","ng://@datorama/akita/src/plugins/state-history/state-history-plugin.ts","ng://@datorama/akita/src/plugins/state-history/entity-state-history-plugin.ts","ng://@datorama/akita/src/plugins/dirty-check/dirty-check-plugin.ts","ng://@datorama/akita/src/plugins/dirty-check/entity-dirty-check-plugin.ts","ng://@datorama/akita/src/api/worker.ts","ng://@datorama/akita/src/api/store-utils.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","apply","__rest","e","indexOf","getOwnPropertySymbols","__metadata","metadataKey","metadataValue","Reflect","metadata","__values","o","m","Symbol","iterator","next","value","done","__read","r","ar","push","error","__spread","concat","coerceArray","isArray","isObject","toString","isPlainObject","toBoolean","name","isFunction","isUndefined","undefined","isNil","v","entityExists","id","entities","isObservable","subscribe","isString","val","isNumber","isDefined","resetActive","state","isActiveState","active","setValue","obj","prop","split","lastIndex","slice","reduce","acc","part","index","getValue","join","AkitaError","_super","message","tslib_1.__extends","Error","AkitaImmutabilityError","storeName","AkitaEntityNotExistsError","AkitaNoActiveError","AkitaInvalidEntityState","AkitaUpdateIdKeyError","assertEntityExists","_crud","CRUD","_set","entityClass","idKey","ids","normalized","keyBy","assertEntityState","map","entity","keys","newState","loading","_replaceEntity","_a","_add","options","addedEntities","addedIds","entityId","prepend","unshift","_update","newStateOrFn","idToUpdate","updatedEntities","isUpdatingIdKey","oldEntity","newEntity","merged","updatedIds","stateEntities","id_1","_b","_c","current","_remove","_removeAll","removed","filter","len","AkitaGlobals","skipAction","skipTransactionMsg","currentT","activeTransactions","setAction","_action","customAction","currentAction","setCustomAction","action","setSkipAction","skip","__globalState","isTransactionInProcess","configKey","CONFIG","resettable","getAkitaConfig","__DEV__","isNotBrowser","window","__stores__","rootDispatcher","ReplaySubject","nextState","initialState","type","payload","isDev","Store","inTransaction","_isPristine","destroy","ngOnDestroy","setState","store","assertDecorator","className","console","isRessetable","_initialState","setLoading","_value","setError","_select","project","store$","pipe","distinctUntilChanged","storeValue","defineProperty","config","newIdKey","newStateFn","_rootDispatcher","prevState","deepFreeze","freeze","oIsFunction","hasOwnProp","getOwnPropertyNames","forEach","isFrozen","BehaviorSubject","handleTransaction","dispatch","reset","_this","setPristine","update","newStateOrId","setDirty","asObservable","watchTransaction","commit","batchTransaction","of","hmrEnabled","EntityStore","getInitialEntitiesState","set","createOrReplace","addWhenNotExists","upsert","entityOrFn","resolve","add","toArray","every","idsOrFn","storeIds","updateAll","updateRoot","remove","idPassed","updateActive","assertActive","activeId","setActive","idOrOptions","wrap","currentIdIndex","prev","isFirst","isLast","ASC","DESC","compareValues","key","order","Order","a","varA","toUpperCase","varB","comparison","memoizeOne","fn","lastArgs","lastResult","changed","firstInit","args","_i","queryConfigKey","Query","__store__","select","selectOnce","take","selectLoading","selectError","getSnapshot","isPristine","QueryEntity","selectAll","asObject","selectState$","selectEntities$","sortByOptions","withLatestFrom","toMap","filterBy","sortBy","memoized","getAll","limitTo","selectMany","filterUndefined","selectEntity","combineLatest","auditTime","hasEntity","getEntity","_byId","selectActiveId","getActiveId","selectActive","switchMap","getActive","selectCount","predicate","getCount","projectOrIds","some","hasActive","isEmpty","sortByOrder","arr","_sortBy_1","sort","Math","min","get","count","length_1","applyTransaction","thisArg","startBatch","Subject","endBatch","complete","array","elementN","filterNil","source","applyAction","func","target","propertyKey","descriptor","originalMethod","SnapshotManager","getStoresSnapshot","stores","setStoresSnapshot","normalizedStores","JSON","parse","snapshotManager","AkitaPlugin","query","resetFn","onReset","getQuery","getStore","isEntityBased","selectSource","getSource","updateStore","original","params","setTimeout","paginatorDefaults","pagesControls","range","startWith","cacheTimeout","PaginatorPlugin","initial","clearCache","currentPage","Map","pages","pagination","perPage","total","lastPage","data","isLoading$","delay","page","clearCacheSubscription","_","withControls","withRange","response","addPage","clearPage","delete","unsubscribe","setPage","isPageActive","hasPage","nextPage","prevPage","setLastPage","setFirstPage","has","getPage","req","selectPage","from","getFrom","getTo","isNaN","to","pageControls","generatePages","ceil","__decorate","decorators","desc","c","getOwnPropertyDescriptor","decorate","tslib_1.__decorate","rootDispatcherSub","devtoolsSub","Paginator","PersistNgFormPlugin","factoryFnOrPath","debounceTime","formKey","emitEvent","arrControlFactory","builder","control","isRootKeys","isKeyBased","setForm","form","activate","initialValue","stateKey","formArray","controls","cleanArray","insert","patchValue","removeAt","resolveInitialValue","formValue","root","factory_1","path","formChanges","valueChanges","notBs","localStorage","defaultActions","beforeRemove","plugin","EntityCollectionPlugin","entityIds","removeEntity","createEntity","getIds","resolvedIds","rebase","actions","beforeAdd","instantiatePlugin","afterAdd","_ids","selectIds","forEachId","cb","StateHistoryPlugin","_entityId","clear","history","past","present","future","skipUpdate","maxAge","subscription","pairwise","undo","previous","newPast","redo","newFuture","jumpToPast","newPresent","jumpToFuture","clearHistory","ignoreNext","EntityStateHistoryPlugin","hasPast","hasFuture","dirtyCheckDefaultParams","comparator","head","stringify","getNestedPath","nestedObj","DirtyCheckPlugin","dirty","_reset","isDirty$","reset$","watchProperty","watchProp","includes","currentValue","updateFn","setHead","_getHead","updateDirtiness","isDirty","hasHead","getHead","isPathDirty","currentPathValue","headPathValue","__akitaKey","currentState","isChange","compareTo","getWatchedValues","watched","EntityDirtyCheckPlugin","isSomeDirty$","checkSomeDirty","someDirty$","someDirty","isSomeDirty","entitiesIds","entitiesIds_1","tslib_1.__values","entitiesIds_1_1","enableAkitaProdMode","transaction","pop","compareFunction","tslib_1.__spread","reverse","swap","firstIndex","secondIndex","results","firstItem","indexOrItem","updated","idx","splice","start","deleteCount","toggle","item","noop","Observable","observer","mapInWorker","factoryFn","worker","createWorker","blob","Blob","url","URL","createObjectURL","Worker","onmessage","terminate","onerror","err","serialized","serialize","object","factory","postMessage","StoreConfig","QueryConfig","akitaConfig","persistState","includeStores","defaults","storage","deserialize","include","exclude","hasInclude","hasExclude","storageState","getItem","currentStoreName","setInitial","clearStore","setItem","save","akitaDevtools","ngZoneOrOptions","__REDUX_DEVTOOLS_EXTENSION__","run","devTools","connect","appState","send","msg","capitalize","string","charAt","logTrace","group","trace","groupEnd","storeName_1","funcCall","replace","Function","warn","init","rootState_1","increment","maxValue","decrement","allowNegative","guid","random","resetStores","stores_1","stores_1_1"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { Observable } from 'rxjs';\nimport { ActiveState, EntityState, HashMap, ID } from '../api/types';\n\n/** Wraps the provided value in an array, unless the provided _value is an array. */\nexport function coerceArray<T>(value: T | T[]): T[] {\n  return Array.isArray(value) ? value : [value];\n}\n\n/** Check if a value is an object */\nexport function isObject(value: any) {\n  return Object.prototype.toString.call(value) === '[object Object]';\n}\n\nexport function isPlainObject(value) {\n  return toBoolean(value) && value.constructor.name === 'Object';\n}\n\nexport function isFunction(value): value is Function {\n  return typeof value === 'function';\n}\n\nexport function toBoolean(value: any): boolean {\n  return value != null && `${value}` !== 'false';\n}\n\nexport function isUndefined(value) {\n  return value === undefined;\n}\n\nexport function isNil(v) {\n  return v === null || v === undefined;\n}\n\n/**\n * Check if entity exists\n */\nexport function entityExists<E>(id: ID, entities: HashMap<E>) {\n  return entities.hasOwnProperty(id);\n}\n\n/**\n * Observable that emits empty value and complete\n */\nexport function noop<T>(): Observable<T> {\n  return new Observable(observer => {\n    observer.next();\n    observer.complete();\n  });\n}\n\nexport function isObservable(value) {\n  return toBoolean(value) && isFunction(value.subscribe);\n}\n\nexport function isString(val: string | any): val is string {\n  return typeof val === 'string';\n}\n\nexport function isNumber(value) {\n  return typeof value === 'number';\n}\n\nexport function isDefined(val) {\n  return val !== null && typeof val !== 'undefined';\n}\n\n/**\n * Check if the active entity exist\n */\nexport function resetActive<E>(state: EntityState<E>) {\n  return isActiveState(state) && entityExists((state as ActiveState).active, state.entities) === false;\n}\n\n/**\n * Check if the store supports active entity\n */\nexport function isActiveState<E>(state: EntityState<E>) {\n  return (state as ActiveState).hasOwnProperty('active');\n}\n\n/**\n * setValue(state, 'todos.ui', { filter: {}})\n */\nexport const setValue = (obj: any, prop: string, val: any) => {\n  const split = prop.split('.');\n\n  if (split.length === 1) return val;\n\n  obj = { ...obj };\n\n  const lastIndex = split.length - 2;\n  const removeStoreName = prop.split('.').slice(1);\n\n  removeStoreName.reduce((acc, part, index) => {\n    if (index === lastIndex) {\n      acc[part] = val;\n    } else {\n      acc[part] = { ...acc[part] };\n    }\n\n    return acc && acc[part];\n  }, obj);\n\n  return obj;\n};\n\n/**\n * getValue(state, 'todos.ui')\n */\nexport const getValue = (obj: any, prop: string) => {\n  /** return the whole state  */\n  if (prop.split('.').length === 1) {\n    return obj;\n  }\n  const removeStoreName = prop\n    .split('.')\n    .slice(1)\n    .join('.');\n  return removeStoreName.split('.').reduce((acc: any, part: string) => acc && acc[part], obj);\n};\n","import { entityExists, isObject, toBoolean } from './utils';\nimport { EntityState, ID } from '../api/types';\n\nexport class AkitaError extends Error {\n  constructor(message: string) {\n    super(message);\n  }\n}\n\nexport class AkitaImmutabilityError extends AkitaError {\n  constructor(storeName) {\n    super(`The new state should be immutable. Make sure to return a new immutable state. \\n store: \\n ${storeName}`);\n  }\n}\n\nexport class AkitaEntityNotExistsError extends AkitaError {\n  constructor(id) {\n    super(`Entity ${id} does not exists`);\n  }\n}\n\nexport class AkitaNoActiveError extends AkitaError {\n  constructor() {\n    super(`Active is null/undefined`);\n  }\n}\n\nexport class AkitaInvalidEntityState extends AkitaError {\n  constructor() {\n    super(`Entity state is invalid`);\n  }\n}\n\nexport class AkitaUpdateIdKeyError extends AkitaError {\n  constructor() {\n    super(`Updating entity id is not permitted when updating many entities`);\n  }\n}\n\nexport function assertEntityExists(id: ID, entities) {\n  if (!entityExists(id, entities)) {\n    throw new AkitaEntityNotExistsError(id);\n  }\n}\n\nexport function assertActive(store) {\n  if (!toBoolean(store.active)) {\n    throw new AkitaNoActiveError();\n  }\n}\n\nexport function assertEntityState(state: EntityState<any>) {\n  const assertEntities = isObject(state);\n\n  if (!assertEntities) {\n    throw new AkitaInvalidEntityState();\n  }\n}\n\nexport function assertDecorator(name: string, className: string) {\n  if (!name) {\n    console.error(`@StoreConfig({ name }) is missing in ${className}`);\n  }\n}\n","import { Entities, EntityState, HashMap, ID, Newable, AddOptions } from '../api/types';\nimport { AkitaUpdateIdKeyError, assertEntityExists, assertEntityState } from './error';\nimport { entityExists, isFunction, isPlainObject, resetActive } from './utils';\n\nexport class CRUD {\n  _set<S, E>(state: S, entities: E[] | HashMap<E> | Entities<E>, entityClass: Newable<E> | undefined, idKey): S {\n    let ids, normalized;\n\n    if ((entities as Entities<E>).ids && (entities as Entities<E>).entities) {\n      ids = (entities as Entities<E>).ids;\n      normalized = (entities as Entities<E>).entities;\n    } else {\n      const isArray = Array.isArray(entities);\n      normalized = entities;\n\n      if (isArray) {\n        normalized = this.keyBy(entities as E[], entityClass, idKey) as E[];\n      } else {\n        assertEntityState(entities);\n      }\n\n      ids = isArray ? (entities as E[]).map(entity => entity[idKey]) : Object.keys(normalized as HashMap<E>).map(id => entities[id][idKey]);\n    }\n\n    const newState = {\n      ...(state as any),\n      entities: normalized,\n      ids,\n      loading: false\n    };\n\n    if (resetActive(newState)) {\n      newState.active = null;\n    }\n\n    return newState;\n  }\n\n  _replaceEntity<T extends EntityState>(state: T, id: ID, entity): T {\n    return {\n      ...(state as any),\n      entities: {\n        ...state.entities,\n        [id]: entity\n      }\n    };\n  }\n\n  _add<S extends EntityState, E>(state: S, entities: E[], idKey, options: AddOptions = {}): S {\n    let addedEntities = {};\n    let addedIds = [];\n\n    for (let i = 0; i < entities.length; i++) {\n      const entity = entities[i];\n      const entityId = entity[idKey];\n\n      if (!entityExists(entityId, state.entities)) {\n        addedEntities[entityId] = entity;\n        if (options.prepend) addedIds.unshift(entityId);\n        else addedIds.push(entityId);\n      }\n    }\n\n    return {\n      ...(state as any),\n      entities: {\n        ...state.entities,\n        ...addedEntities\n      },\n      ids: options.prepend ? [...addedIds, ...state.ids] : [...state.ids, ...addedIds]\n    };\n  }\n\n  _update<T extends EntityState>(state: T, ids: ID[], newStateOrFn: object | ((e: Readonly<any>) => object), idKey: string): T {\n    const updatedEntities = {};\n\n    let isUpdatingIdKey = false;\n    let idToUpdate: ID;\n\n    for (let i = 0; i < ids.length; i++) {\n      const id = ids[i];\n      idToUpdate = id;\n      assertEntityExists(id, state.entities);\n\n      const oldEntity = state.entities[id];\n      const newState = isFunction(newStateOrFn) ? newStateOrFn(oldEntity) : newStateOrFn;\n\n      if (newState.hasOwnProperty(idKey) && newState[idKey] !== oldEntity[idKey]) {\n        if (ids.length > 1) {\n          throw new AkitaUpdateIdKeyError();\n        }\n        isUpdatingIdKey = true;\n        idToUpdate = newState[idKey];\n      }\n\n      let newEntity;\n\n      const merged = {\n        ...oldEntity,\n        ...newState\n      };\n\n      if (isPlainObject(oldEntity)) {\n        newEntity = merged;\n      } else {\n        /**\n         * In case that new state is class of it's own, there's\n         * a possibility that it will be different than the old\n         * class.\n         * For example, Old state is an instance of animal class\n         * and new state is instance of person class.\n         * To avoid run over new person class with the old animal\n         * class we check if the new state is a class of it's own.\n         * If so, use it. Otherwise, use the old state class\n         */\n        if (isPlainObject(newState)) {\n          newEntity = new oldEntity.constructor(merged);\n        } else {\n          newEntity = new (newState as any).constructor(merged);\n        }\n      }\n\n      updatedEntities[idToUpdate] = newEntity;\n    }\n\n    let updatedIds = state.ids;\n    let stateEntities = state.entities;\n    if (isUpdatingIdKey) {\n      const [id] = ids;\n      const { [id]: deletedEntity, ...rest } = state.entities;\n      stateEntities = rest;\n      updatedIds = state.ids.map(current => (current === id ? idToUpdate : current));\n    }\n\n    return {\n      ...(state as any),\n      entities: {\n        ...stateEntities,\n        ...updatedEntities\n      },\n      ids: updatedIds\n    };\n  }\n\n  _remove<T extends EntityState>(state: T, ids: ID[] | null): T {\n    if (!ids) return this._removeAll(state);\n\n    const removed = ids.reduce((acc, id) => {\n      const { [id]: entity, ...rest } = acc;\n      return rest;\n    }, state.entities);\n    const newState = {\n      ...(state as any),\n      entities: removed,\n      ids: state.ids.filter(current => ids.indexOf(current) === -1)\n    };\n\n    if (resetActive(newState)) {\n      newState.active = null;\n    }\n\n    return newState;\n  }\n\n  private _removeAll<T extends EntityState>(state: T): T {\n    const newState = {\n      ...(state as any),\n      entities: {},\n      ids: [],\n      active: null\n    };\n\n    return newState;\n  }\n\n  private keyBy(entities: any[], entityClass?: Newable<any>, id = 'id') {\n    const acc = {};\n\n    for (let i = 0, len = entities.length; i < len; i++) {\n      const entity = entities[i];\n      acc[entity[id]] = entityClass ? new entityClass(entity) : entity;\n    }\n\n    return acc;\n  }\n}\n\nexport const _crud = new CRUD();\n","import { Subject } from 'rxjs';\n\nexport type Action = {\n  type: string;\n  entityId?: any[] | any;\n  payload?: any;\n};\n\nexport class AkitaGlobals {\n  private customAction;\n  currentAction: Action;\n  skipAction = false;\n  skipTransactionMsg = false;\n  currentT = [];\n  activeTransactions = 0;\n  batchTransaction: Subject<boolean>;\n\n  setAction(_action: Action) {\n    if (this.customAction) {\n      this.currentAction = this.customAction;\n      this.customAction = null;\n      this.skipTransactionMsg = false;\n    } else {\n      if (this.activeTransactions === 0) {\n        this.currentAction = _action;\n      }\n    }\n\n    if (this.activeTransactions > 0) {\n      this.currentT.push(_action);\n    }\n  }\n\n  setCustomAction(action: Action, skipTransactionMsg = false) {\n    this.currentAction = this.customAction = action;\n    this.skipTransactionMsg = skipTransactionMsg;\n  }\n\n  setSkipAction(skip = true) {\n    this.skipAction = skip;\n  }\n}\n\nexport const __globalState = new AkitaGlobals();\n","import { __globalState } from './global-state';\nimport { Observable, Subject, of } from 'rxjs';\n\n/**\n * Start a new transaction batch\n */\nexport function startBatch() {\n  if (!isTransactionInProcess()) {\n    __globalState.batchTransaction = new Subject();\n  }\n  __globalState.activeTransactions++;\n}\n\n/**\n * End the transaction\n */\nexport function endBatch() {\n  if (--__globalState.activeTransactions === 0) {\n    __globalState.batchTransaction.next(true);\n    __globalState.batchTransaction.complete();\n  }\n}\n\n/**\n * Whether we're inside batch\n */\nexport function isTransactionInProcess() {\n  return __globalState.activeTransactions > 0;\n}\n\n/**\n */\nexport function commit(): Observable<boolean> {\n  return __globalState.batchTransaction ? __globalState.batchTransaction.asObservable() : of(true);\n}\n","export type StoreConfigOptions = {\n  name: string;\n  resettable?: boolean;\n  idKey?: string;\n};\n\nexport const configKey = 'akitaConfig';\n\nexport function StoreConfig(metadata: StoreConfigOptions) {\n  return function(constructor: Function) {\n    constructor[configKey] = { idKey: 'id' };\n\n    for (let i = 0, keys = Object.keys(metadata); i < keys.length; i++) {\n      const key = keys[i];\n      /* name is preserved read only key */\n      if (key === 'name') {\n        constructor[configKey]['storeName'] = metadata[key];\n      } else {\n        constructor[configKey][key] = metadata[key];\n      }\n    }\n  };\n}\n","export interface AkitaConfig {\n  /**\n   * Whether to allowed the reset() stores functionality\n   */\n  resettable?: boolean;\n}\n\nlet CONFIG: AkitaConfig = {\n  resettable: false\n};\n\nexport function akitaConfig(config: AkitaConfig) {\n  CONFIG = { ...CONFIG, ...config };\n}\n\nexport function getAkitaConfig() {\n  return CONFIG;\n}\n","import { HashMap, ID } from './types';\nimport { BehaviorSubject, Observable, ReplaySubject } from 'rxjs';\nimport { distinctUntilChanged, map } from 'rxjs/operators';\nimport { AkitaError, AkitaImmutabilityError, assertDecorator } from '../internal/error';\nimport { commit, isTransactionInProcess } from '../internal/transaction.internal';\nimport { isFunction, isPlainObject } from '../internal/utils';\nimport { deepFreeze } from '../internal/deep-freeze';\nimport { configKey, StoreConfigOptions } from './store-config';\nimport { __globalState } from '../internal/global-state';\nimport { getAkitaConfig } from './config';\n\nlet __DEV__ = true;\nconst isNotBrowser = typeof window === 'undefined';\n\nexport const __stores__: { [storeName: string]: Store<any> } = {};\n\nexport const enum Actions {\n  NEW_STORE,\n  DELETE_STORE,\n  NEW_STATE\n}\n\nexport type Action = {\n  type: Actions;\n  payload: HashMap<any>;\n};\n\nexport const rootDispatcher = new ReplaySubject<Action>();\n\nfunction nextState(storeName, initialState = false) {\n  return {\n    type: Actions.NEW_STATE,\n    payload: {\n      name: storeName,\n      initialState\n    }\n  };\n}\n\n/**\n * Enable production mode to disable objectFreeze\n */\nexport function enableAkitaProdMode() {\n  __DEV__ = false;\n}\n\nexport function isDev() {\n  return __DEV__;\n}\n\n/**\n * The Root Store that every sub store needs to inherit and\n * invoke `super` with the initial state.\n */\nexport class Store<S> {\n  /** Manage the store with BehaviorSubject */\n  private store: BehaviorSubject<Readonly<S>>;\n\n  /** The current state value */\n  private storeValue: S;\n\n  /** Whether we are inside transaction **/\n  private inTransaction = false;\n\n  private _isPristine = true;\n\n  private readonly _initialState: S;\n\n  /**\n   *\n   * Initial the store with the state\n   */\n  constructor(initialState, private options: { idKey?: string; storeName?: string } = {}) {\n    __globalState.setAction({ type: '@@INIT' });\n    __stores__[this.storeName] = this;\n    this.setState(() => initialState);\n    rootDispatcher.next({\n      type: Actions.NEW_STORE,\n      payload: { store: this }\n    });\n    isDev() && assertDecorator(this.storeName, this.constructor.name);\n    if (this.isRessetable()) {\n      this._initialState = initialState;\n    }\n  }\n\n  setLoading(loading = false) {\n    if (loading !== (this._value() as S & { loading: boolean }).loading) {\n      isDev() && __globalState.setAction({ type: 'Set Loading' });\n      this.setState(s => ({ ...(s as object), loading } as any));\n    }\n  }\n\n  /**\n   * Update the store's error state.\n   */\n  setError<T>(error: T) {\n    if (error !== (this._value() as S & { error: any }).error) {\n      isDev() && __globalState.setAction({ type: 'Set Error' });\n      this.setState(s => ({ ...(s as object), error } as any));\n    }\n  }\n\n  /**\n   * Select a slice from the store\n   *\n   * @example\n   * this.store.select(state => state.entities)\n   *\n   */\n  _select<R>(project: (store: S) => R): Observable<R> {\n    return this.store$.pipe(\n      map(project),\n      distinctUntilChanged()\n    );\n  }\n\n  _value(): S {\n    return this.storeValue;\n  }\n\n  get config(): StoreConfigOptions {\n    return this.constructor[configKey];\n  }\n\n  get storeName() {\n    return this.options.storeName || (this.config && this.config['storeName']);\n  }\n\n  get idKey() {\n    /** backward compatibility */\n    const newIdKey = this.config && this.config.idKey;\n    if (!newIdKey) {\n      return this.options.idKey || 'id';\n    }\n    return newIdKey;\n  }\n\n  get isPristine() {\n    return this._isPristine;\n  }\n\n  /**\n   * `setState()` is the only way to update a store; It receives a callback function,\n   * which gets the current state, and returns a new immutable state,\n   * which will be the new value of the store.\n   */\n  setState(newStateFn: (state: Readonly<S>) => S, _rootDispatcher = true) {\n    const prevState = this._value();\n    this.storeValue = __DEV__ ? deepFreeze(newStateFn(this._value())) : newStateFn(this._value());\n\n    if (prevState === this.storeValue) {\n      throw new AkitaImmutabilityError(this.storeName);\n    }\n\n    if (!this.store) {\n      this.store = new BehaviorSubject(this.storeValue);\n      rootDispatcher.next(nextState(this.storeName, true));\n      return;\n    }\n\n    if (isTransactionInProcess()) {\n      this.handleTransaction();\n      return;\n    }\n\n    this.dispatch(this.storeValue, _rootDispatcher);\n  }\n\n  /**\n   * Resets the store to it's initial state and set the store to a pristine state.\n   */\n  reset() {\n    if (this.isRessetable()) {\n      __globalState.setAction({ type: 'Reset Store' });\n      this.setState(() => Object.assign({}, this._initialState));\n      this.setPristine();\n    } else {\n      throw new AkitaError(`You need to enable the reset functionality`);\n    }\n  }\n\n  /**\n   * This method is a shortcut for `setState()`.\n   * It can be useful when you want to pass the whole state object instead of merging a partial state.\n   *\n   * @example\n   * this.store.update(newState)\n   */\n  update(newState: (state: Readonly<S>) => Partial<S>);\n  update(newState: Partial<S>);\n  update(id: ID | ID[] | null, newState: Partial<S>);\n  update(newStateOrId: Partial<S> | ID | ID[] | null | ((state: Readonly<S>) => Partial<S>), newState?: Partial<S>) {\n    __globalState.setAction({ type: 'Update Store' });\n    this.setState(state => {\n      let value = isFunction(newStateOrId) ? newStateOrId(state) : newStateOrId;\n      let merged = Object.assign({}, state, value);\n      return isPlainObject(state) ? merged : new (state as any).constructor(merged);\n    });\n    this.setDirty();\n  }\n\n  /**\n   * Sets the store to a pristine state.\n   */\n  setPristine() {\n    this._isPristine = true;\n  }\n\n  /**\n   * Sets the store to a dirty state, indicating that it is not pristine.\n   */\n  setDirty() {\n    this._isPristine = false;\n  }\n\n  destroy = this.ngOnDestroy;\n\n  private dispatch(state: S, _rootDispatcher = true) {\n    this.store.next(state);\n    if (_rootDispatcher) {\n      rootDispatcher.next(nextState(this.storeName));\n      isDev() && __globalState.setAction({ type: 'Set State' });\n    }\n  }\n\n  private get store$() {\n    return this.store.asObservable();\n  }\n\n  /**\n   * When the transaction ends dispatch the final value once\n   */\n  private watchTransaction() {\n    commit().subscribe(() => {\n      this.inTransaction = false;\n      if (isDev() && !__globalState.skipTransactionMsg) {\n        __globalState.setAction({ type: '@Transaction' });\n      }\n      this.dispatch(this._value());\n      __globalState.currentT = [];\n      __globalState.skipTransactionMsg = false;\n    });\n  }\n\n  private isRessetable() {\n    return this.config.resettable || getAkitaConfig().resettable;\n  }\n\n  /**\n   * Listen to the transaction stream\n   */\n  private handleTransaction() {\n    if (!this.inTransaction) {\n      this.watchTransaction();\n      this.inTransaction = true;\n    }\n  }\n\n  ngOnDestroy() {\n    if (isNotBrowser) return;\n    if (!(window as any).hmrEnabled && this === __stores__[this.storeName]) {\n      delete __stores__[this.storeName];\n      rootDispatcher.next({\n        type: Actions.DELETE_STORE,\n        payload: { storeName: this.storeName }\n      });\n    }\n  }\n}\n","export function deepFreeze(o) {\n  Object.freeze(o);\n\n  var oIsFunction = typeof o === 'function';\n  var hasOwnProp = Object.prototype.hasOwnProperty;\n\n  Object.getOwnPropertyNames(o).forEach(function(prop) {\n    if (\n      hasOwnProp.call(o, prop) &&\n      (oIsFunction ? prop !== 'caller' && prop !== 'callee' && prop !== 'arguments' : true) &&\n      o[prop] !== null &&\n      (typeof o[prop] === 'object' || typeof o[prop] === 'function') &&\n      !Object.isFrozen(o[prop])\n    ) {\n      deepFreeze(o[prop]);\n    }\n  });\n\n  return o;\n}\n","import { _crud } from '../internal/crud';\nimport { AkitaImmutabilityError, assertActive } from '../internal/error';\nimport { Action, __globalState } from '../internal/global-state';\nimport { coerceArray, entityExists, isFunction, isNil, isObject, isUndefined, toBoolean } from '../internal/utils';\nimport { isDev, Store } from './store';\nimport { ActiveState, Entities, EntityState, HashMap, ID, Newable, AddOptions, SetActiveOptions } from './types';\n\n/**\n * The Root Store that every sub store needs to inherit and\n * invoke `super` with the initial state.\n */\nexport class EntityStore<S extends EntityState<E>, E, ActiveEntity = ID> extends Store<S> {\n  /**\n   *\n   * Initiate the store with the state\n   */\n  constructor(initialState = {}, options: { idKey?: string; storeName?: string } = {}) {\n    super({ ...getInitialEntitiesState(), ...initialState }, options);\n  }\n\n  get entities() {\n    return this._value().entities;\n  }\n\n  /**\n   *\n   * Replace current collection with provided collection\n   *\n   * @example\n   * this.store.set([Entity, Entity]);\n   * this.store.set({1: Entity, 2: Entity});\n   * this.store.set([{id: 1}, {id: 2}], { entityClass: Product });\n   *\n   */\n  set(entities: E[] | HashMap<E> | Entities<E>, options: { entityClass?: Newable<E> | undefined } = {}) {\n    isDev() && __globalState.setAction({ type: 'Set Entities' });\n    this.setState(state => _crud._set(state, isNil(entities) ? [] : entities, options.entityClass, this.idKey));\n    this.setDirty();\n  }\n\n  /**\n   * Create or replace an entity in the store.\n   *\n   * @example\n   * this.store.createOrReplace(3, Entity);\n   *\n   */\n  createOrReplace(id: ID, entity: E) {\n    if (!entityExists(id, this._value().entities)) {\n      this.addWhenNotExists(id, entity);\n    } else {\n      isDev() && __globalState.setAction({ type: 'Create or Replace Entity', entityId: [id] });\n      this.setState(state => _crud._replaceEntity(state, id, entity));\n    }\n  }\n\n  /**\n   *\n   * Insert or Update\n   */\n  upsert(id: ID, entityOrFn: Partial<E> | ((entity: Readonly<E>) => Partial<E>)) {\n    if (!entityExists(id, this._value().entities)) {\n      const resolve = isFunction(entityOrFn) ? (entityOrFn as Function)({}) : entityOrFn;\n      this.addWhenNotExists(id, resolve);\n    } else {\n      this.update(id, entityOrFn as any);\n    }\n  }\n\n  /**\n   * Add an entity or entities to the store.\n   *\n   * @example\n   * this.store.add([Entity, Entity]);\n   * this.store.add(Entity);\n   * this.store.add(Entity, { prepend: true });\n   */\n  add(entities: E[] | E, options?: AddOptions) {\n    const toArray = coerceArray(entities);\n\n    if (toArray.length === 0) return;\n    /**  If we pass entities that already exist, we should ignore them */\n    const allExists = toArray.every(entity => this._value().ids.indexOf(entity[this.idKey]) > -1);\n    if (allExists) return;\n\n    isDev() && __globalState.setAction({ type: 'Add Entity' });\n    this.setState(state => _crud._add<S, E>(state, toArray, this.idKey, options));\n  }\n\n  /**\n   *\n   * Update an entity or entities in the store.\n   *\n   * @example\n   * this.store.update(3, {\n   *   name: 'New Name'\n   * });\n   *\n   *  this.store.update(3, entity => {\n   *    return {\n   *      config: {\n   *        ...entity.filter,\n   *        date\n   *      }\n   *    }\n   *  });\n   *\n   * this.store.update([1,2,3], {\n   *   name: 'New Name'\n   * });\n   *\n   * this.store.update(e => e.name === 'value', {\n   *   name: 'New Name'\n   * });\n   *\n   * this.store.update(null, {\n   *   name: 'New Name'\n   * });\n   *\n   */\n  update(id: ID | ID[] | null, newStateFn: ((entity: Readonly<E>) => Partial<E>));\n  update(id: ID | ID[] | null, newState: Partial<E>);\n  update(id: ID | ID[] | null, newState: Partial<S>);\n  update(newState: (state: Readonly<S>) => Partial<S>);\n  update(predicate: ((entity: Readonly<E>) => boolean), newStateFn: ((entity: Readonly<E>) => Partial<E>));\n  update(predicate: ((entity: Readonly<E>) => boolean), newState: Partial<E>);\n  update(predicate: ((entity: Readonly<E>) => boolean), newState: Partial<S>);\n  update(newState: Partial<S>);\n  update(\n    idsOrFn: ID | ID[] | null | Partial<S> | ((state: Readonly<S>) => Partial<S>) | ((entity: Readonly<E>) => boolean),\n    newStateOrFn?: ((entity: Readonly<E>) => Partial<E>) | Partial<E> | Partial<S>\n  ) {\n    let ids: ID[] = [];\n    const storeIds = this._value().ids;\n\n    if (isFunction(idsOrFn)) {\n      for (let i = 0, len = storeIds.length; i < len; i++) {\n        const id = storeIds[i];\n        const entity = this._value().entities[id];\n        if (entity && (idsOrFn as Function)(entity)) {\n          ids.push(id);\n        }\n      }\n    } else {\n      ids = toBoolean(idsOrFn) ? coerceArray(idsOrFn) : storeIds;\n    }\n\n    if (ids.length === 0) return;\n    isDev() && __globalState.setAction({ type: 'Update Entity', entityId: ids });\n\n    this.setState(state => {\n      return _crud._update(state, ids, newStateOrFn, this.idKey);\n    });\n  }\n\n  /**\n   * An alias to update all.\n   */\n  updateAll(state: Partial<E>) {\n    if (this._value().ids.length === 0) return;\n    this.update(null, state);\n  }\n\n  /**\n   * Update the root state (data which is external to the entities).\n   *\n   * @example\n   * this.store.updateRoot({\n   *   metadata: 'new metadata\n   * });\n   *\n   *  this.store.updateRoot(state => {\n   *    return {\n   *      metadata: {\n   *        ...state.metadata,\n   *        key: 'new value'\n   *      }\n   *    }\n   *  });\n   */\n  updateRoot(newStateFn: ((state: Readonly<S>) => Partial<S>) | Partial<S>, action?: Action) {\n    const newState = isFunction(newStateFn) ? newStateFn(this._value()) : newStateFn;\n\n    if (newState === this._value()) {\n      throw new AkitaImmutabilityError(this.storeName);\n    }\n\n    isDev() && __globalState.setAction(action || { type: 'Update Root' });\n\n    this.setState(state => {\n      return {\n        ...(state as any),\n        ...(newState as any)\n      };\n    });\n  }\n\n  /**\n   *\n   * Remove one or more entities from the store:\n   *\n   * @example\n   * this.store.remove(5);\n   * this.store.remove([1,2,3]);\n   * this.store.remove(entity => entity.id === 1);\n   * this.store.remove();\n   */\n  remove(id?: ID | ID[]);\n  remove(predicate: (entity: Readonly<E>) => boolean);\n  remove(idsOrFn?: ID | ID[] | ((entity: Readonly<E>) => boolean)) {\n    const storeIds = this._value().ids;\n\n    if (storeIds.length === 0) return;\n    const idPassed = toBoolean(idsOrFn);\n    if (!idPassed) this.setPristine();\n\n    let ids: ID[] = [];\n    if (isFunction(idsOrFn)) {\n      for (let i = 0, len = storeIds.length; i < len; i++) {\n        const id = storeIds[i];\n        const entity = this._value().entities[id];\n        if (entity && idsOrFn(entity)) {\n          ids.push(id);\n        }\n      }\n    } else {\n      ids = idPassed ? coerceArray(idsOrFn) : null;\n    }\n\n    if (ids && ids.length === 0) return;\n    isDev() && __globalState.setAction({ type: 'Remove Entity', entityId: ids });\n\n    this.setState(state => {\n      return _crud._remove(state, ids);\n    });\n  }\n\n  /**\n   *\n   * Update the active entity.\n   *\n   * @example\n   * this.store.updateActive(active => {\n   *   return {\n   *     config: {\n   *      ..active.config,\n   *      date\n   *     }\n   *   }\n   * })\n   */\n  updateActive(newStateFn: ((entity: Readonly<E>) => Partial<E>) | Partial<E>) {\n    assertActive(this._value());\n    isDev() && __globalState.setAction({ type: 'Update Active Entity', entityId: this._value().active });\n    this.setState(state => {\n      const activeId = state.active as ID;\n      const newState = isFunction(newStateFn) ? newStateFn(state.entities[activeId]) : newStateFn;\n      if (newState === state) {\n        throw new AkitaImmutabilityError(this.storeName);\n      }\n      return _crud._update(state, [activeId], newState, this.idKey);\n    });\n  }\n\n  /**\n   * Set the given entity as active.\n   */\n  setActive(idOrOptions: ActiveEntity | SetActiveOptions | null) {\n    let activeId: ActiveEntity;\n\n    if (isObject(idOrOptions)) {\n      if (isNil(this._value().active)) return;\n      (idOrOptions as SetActiveOptions) = Object.assign({ wrap: true }, idOrOptions);\n      const ids = this._value().ids;\n      const currentIdIndex = ids.indexOf(this._value().active);\n      if ((idOrOptions as SetActiveOptions).prev) {\n        const isFirst = currentIdIndex === 0;\n        if (isFirst && !(idOrOptions as SetActiveOptions).wrap) return;\n        activeId = isFirst ? ids[ids.length - 1] : (ids[currentIdIndex - 1] as any);\n      } else if ((idOrOptions as SetActiveOptions).next) {\n        const isLast = ids.length === currentIdIndex + 1;\n        if (isLast && !(idOrOptions as SetActiveOptions).wrap) return;\n        activeId = isLast ? ids[0] : (ids[currentIdIndex + 1] as any);\n      }\n    } else {\n      if (idOrOptions === this._value().active) return;\n      activeId = idOrOptions as ActiveEntity;\n    }\n\n    isDev() && __globalState.setAction({ type: 'Set Active Entity', entityId: activeId });\n    this.setState(state => {\n      return {\n        ...(state as any),\n        active: activeId\n      };\n    });\n  }\n\n  private addWhenNotExists(id: ID, entity: E) {\n    if (!entity[this.idKey]) {\n      entity[this.idKey] = id;\n    }\n    this.add(entity);\n  }\n}\n\nexport const getInitialEntitiesState = () =>\n  ({\n    entities: {},\n    ids: [],\n    loading: true,\n    error: null\n  } as EntityState);\n\nexport const getInitialActiveState = () =>\n  ({\n    active: null\n  } as ActiveState);\n","export enum Order {\n  ASC = 'asc',\n  DESC = 'desc'\n}\n\nexport function compareValues(key, order: Order = Order.ASC) {\n  return function(a, b) {\n    if (!a.hasOwnProperty(key) || !b.hasOwnProperty(key)) {\n      return 0;\n    }\n\n    const varA = typeof a[key] === 'string' ? a[key].toUpperCase() : a[key];\n    const varB = typeof b[key] === 'string' ? b[key].toUpperCase() : b[key];\n\n    let comparison = 0;\n    if (varA > varB) {\n      comparison = 1;\n    } else if (varA < varB) {\n      comparison = -1;\n    }\n    return order == Order.DESC ? comparison * -1 : comparison;\n  };\n}\n","export function memoizeOne(fn: Function) {\n  let lastArgs;\n  let changed = false;\n  let firstInit = true;\n  let lastResult;\n\n  return function(...args) {\n    if (lastArgs) {\n      /** If entities nor ids doesn't change return the last value */\n      changed = lastArgs[1] !== args[1] || lastArgs[0] !== args[0];\n    }\n\n    if (firstInit || (changed && !firstInit)) {\n      lastResult = fn.apply(this, args);\n    }\n\n    firstInit = false;\n    lastArgs = args;\n    return lastResult;\n  };\n}\n","import { Order } from '../internal/sort';\n\nexport type SortBy<E, S = any> = ((a: E, b: E, state?: S) => number) | keyof E;\n\nexport interface SortByOptions<E> {\n  sortBy?: SortBy<E>;\n  sortByOrder?: Order;\n}\n\nexport interface QueryConfigOptions<E = any> extends SortByOptions<E> {}\n\nexport const queryConfigKey = 'akitaQueryConfig';\n\nexport function QueryConfig<E>(metadata: QueryConfigOptions<E>) {\n  return function(constructor: Function) {\n    constructor[queryConfigKey] = {};\n    for (let i = 0, keys = Object.keys(metadata); i < keys.length; i++) {\n      const key = keys[i];\n      constructor[queryConfigKey][key] = metadata[key];\n    }\n  };\n}\n","import { Store } from './store';\nimport { Observable } from 'rxjs';\nimport { take } from 'rxjs/operators';\nimport { queryConfigKey, QueryConfigOptions } from './query-config';\n\nexport class Query<S> {\n  /** Use only for internal plugins like Pagination - don't use this property **/\n  __store__: Store<S>;\n\n  constructor(protected store: Store<S>) {\n    this.__store__ = store;\n  }\n\n  /**\n   * Select a slice from the store.\n   *\n   * @example\n   * this.query.select()\n   * this.query.select(state => state.entities)\n   */\n  select<R>(project?: (store: S) => R): Observable<R>;\n  select(): Observable<S>;\n  select<R>(project?: (store: S) => R): Observable<R | S> {\n    let state = project ? project : state => state;\n    return this.store._select(state);\n  }\n\n  /**\n   * Select once and complete.\n   */\n  selectOnce<R>(project: (store: S) => R): Observable<R> {\n    return this.select(project).pipe(take(1));\n  }\n\n  /**\n   * Select the store's loading state.\n   */\n  selectLoading() {\n    return this.select(state => (state as S & { loading: boolean }).loading);\n  }\n\n  /**\n   * Select the store's error state.\n   */\n  selectError() {\n    return this.select(state => (state as S & { error: any }).error);\n  }\n\n  /**\n   * Get the raw value of the store.\n   */\n  getSnapshot(): S {\n    return this.store._value();\n  }\n\n  /**\n   *  Returns whether the state of the store is pristine (the set() method hasn't been explicitly called\n   *  since the store creation, or the last time setPristine()was called).\n   */\n  get isPristine() {\n    return this.store.isPristine;\n  }\n\n  /**\n   * Returns whether the state of the store is dirty (the set() method\n   * or the setDirty() method has been explicitly called since the store creation,\n   * or the last time setPristine() was called).\n   */\n  get isDirty() {\n    return !this.store.isPristine;\n  }\n\n  get config(): QueryConfigOptions {\n    return this.constructor[queryConfigKey];\n  }\n}\n","import { combineLatest, Observable } from 'rxjs';\nimport { auditTime, map, switchMap, withLatestFrom } from 'rxjs/operators';\n\nimport { compareValues, Order } from '../internal/sort';\nimport { entityExists, isFunction, isUndefined, toBoolean } from '../internal/utils';\nimport { EntityStore } from './entity-store';\nimport { memoizeOne } from './memoize';\nimport { Query } from './query';\nimport { SortBy, SortByOptions } from './query-config';\nimport { ActiveState, EntityState, HashMap, ID } from './types';\n\nexport interface SelectOptions<E> extends SortByOptions<E> {\n  asObject?: boolean;\n  filterBy?: ((entity: E, index?: number) => boolean) | ((entity: E, index?: number) => boolean)[] | undefined;\n  limitTo?: number;\n}\n\n/**\n *  An abstraction for querying the entities from the store\n */\nexport class QueryEntity<S extends EntityState, E, ActiveEntity = ID> extends Query<S> {\n  protected store: EntityStore<S, E, ActiveEntity>;\n  private memoized;\n\n  /** Use only for internal plugins like Pagination - don't use this property **/\n  __store__;\n\n  constructor(store: EntityStore<S, E, ActiveEntity>) {\n    super(store);\n    this.__store__ = store;\n  }\n\n  /**\n   * Select the entire store's entity collection.\n   *\n   * @example\n   * this.store.selectAll();\n   */\n  selectAll(options: { asObject: true; filterBy?: SelectOptions<E>['filterBy']; limitTo?: number; sortBy?: undefined; sortByOrder?: undefined }): Observable<HashMap<E>>;\n  selectAll(options: { filterBy: SelectOptions<E>['filterBy']; limitTo?: number; sortBy?: SortBy<E>; sortByOrder?: Order }): Observable<E[]>;\n  selectAll(options: { asObject: true; limitTo?: number; sortBy?: undefined; sortByOrder?: undefined }): Observable<HashMap<E>>;\n  selectAll(options: { limitTo?: number; sortBy?: SortBy<E>; sortByOrder?: Order }): Observable<E[]>;\n  selectAll(options: { asObject: false; filterBy?: SelectOptions<E>['filterBy']; limitTo?: number; sortBy?: SortBy<E>; sortByOrder?: Order }): Observable<E[]>;\n  selectAll(): Observable<E[]>;\n  selectAll(\n    options: SelectOptions<E> = {\n      asObject: false\n    }\n  ): Observable<E[] | HashMap<E>> {\n    const selectState$ = this.select(state => state);\n    const selectEntities$ = this.select(state => state.entities);\n\n    this.sortByOptions(options);\n\n    return selectEntities$.pipe(\n      withLatestFrom(selectState$, (entities: HashMap<E>, state: S) => {\n        const { ids } = state;\n        if (options.asObject) {\n          return toMap(ids, entities, options);\n        } else {\n          if (!options.filterBy && !options.sortBy) {\n            if (!this.memoized) {\n              this.memoized = memoizeOne(toArray);\n            }\n            return this.memoized(state, options);\n          }\n\n          return toArray(state, options);\n        }\n      })\n    );\n  }\n\n  /**\n   * Get the entire store's entity collection.\n   *\n   * @example\n   * this.store.getAll();\n   */\n  getAll(options: { asObject: true; filterBy?: SelectOptions<E>['filterBy']; limitTo?: number; sortBy?: undefined; sortByOrder?: undefined }): HashMap<E>;\n  getAll(options: { filterBy: SelectOptions<E>['filterBy']; limitTo?: number; sortBy?: SortBy<E>; sortByOrder?: Order }): E[];\n  getAll(options: { asObject: true; limitTo?: number; sortBy?: undefined; sortByOrder?: undefined }): HashMap<E>;\n  getAll(options: { limitTo?: number; sortBy?: SortBy<E>; sortByOrder?: Order }): E[];\n  getAll(options: { asObject: false; filterBy?: SelectOptions<E>['filterBy']; limitTo?: number; sortBy?: SortBy<E>; sortByOrder?: Order }): E[];\n  getAll(): E[];\n  getAll(options: SelectOptions<E> = { asObject: false, filterBy: undefined, limitTo: undefined }): E[] | HashMap<E> {\n    const state = this.getSnapshot();\n\n    if (options.asObject) {\n      return toMap(state.ids, state.entities, options, true);\n    }\n\n    this.sortByOptions(options);\n\n    return toArray(state, options);\n  }\n\n  /**\n   * Select multiple entities from the store.\n   *\n   * @example\n   * this.store.selectMany([1,2]);\n   */\n  selectMany(ids: ActiveEntity[], options: { filterUndefined?: boolean } = {}): Observable<E[]> {\n    const filterUndefined = isUndefined(options.filterUndefined) ? true : options.filterUndefined;\n    const entities = ids.map(id => this.selectEntity(id));\n\n    return combineLatest(entities).pipe(\n      map(entities => {\n        return filterUndefined ? entities.filter(val => !isUndefined(val)) : entities;\n      }),\n      auditTime(0)\n    );\n  }\n\n  /**\n   * Select an entity or a slice of an entity.\n   *\n   * @example\n   * this.pagesStore.selectEntity(1)\n   * this.pagesStore.selectEntity(1, entity => entity.config.date)\n   *\n   */\n  selectEntity<R>(id: ActiveEntity): Observable<E>;\n  selectEntity<R>(id: ActiveEntity, project: (entity: E) => R): Observable<R>;\n  selectEntity<R>(id: ActiveEntity, project?: (entity: E) => R): Observable<R | E> {\n    if (!project) {\n      return this._byId(id);\n    }\n\n    return this.select(state => {\n      if (this.hasEntity(id)) {\n        return project(this.getEntity(id));\n      }\n\n      return undefined;\n    });\n  }\n\n  /**\n   * Get an entity by id\n   *\n   * @example\n   * this.store.getEntity(1);\n   */\n  getEntity(id: ActiveEntity): E {\n    return this.getSnapshot().entities[id as any];\n  }\n\n  /**\n   * Select the active entity's id.\n   */\n  selectActiveId(): Observable<ActiveEntity> {\n    return this.select(state => (state as S & ActiveState<ActiveEntity>).active);\n  }\n\n  /**\n   * Get the active id\n   */\n  getActiveId(): ActiveEntity {\n    return (this.getSnapshot() as S & ActiveState<ActiveEntity>).active;\n  }\n\n  /**\n   * Select the active entity.\n   */\n  selectActive<R>(): Observable<E>;\n  selectActive<R>(project: (entity: E) => R): Observable<R>;\n  selectActive<R>(project?: (entity: E) => R): Observable<R | E> {\n    return this.selectActiveId().pipe(switchMap(activeId => this.selectEntity(activeId, project)));\n  }\n\n  /**\n   * Get the active entity.\n   */\n  getActive(): E {\n    const activeId: ActiveEntity = this.getActiveId();\n    return toBoolean(activeId) ? this.getEntity(activeId) : undefined;\n  }\n\n  /**\n   * Select the store's entity collection length.\n   */\n  selectCount(predicate?: (entity: E, index: number) => boolean): Observable<number> {\n    if (isFunction(predicate)) {\n      return this.selectAll({\n        filterBy: predicate\n      }).pipe(map(entities => entities.length));\n    }\n\n    return this.select(store => store.ids.length);\n  }\n\n  /**\n   * Get the store's entity collection length.\n   */\n  getCount(predicate?: (entity: E, index: number) => boolean): number {\n    if (isFunction(predicate)) {\n      return this.getAll().filter(predicate).length;\n    }\n    return this.getSnapshot().ids.length;\n  }\n\n  /**\n   * Returns whether entity exists.\n   */\n  hasEntity(id: ActiveEntity): boolean;\n  hasEntity(id: ActiveEntity[]): boolean;\n  hasEntity(project: (entity: E) => boolean): boolean;\n  hasEntity(projectOrIds: ActiveEntity | ActiveEntity[] | ((entity: E) => boolean)): boolean {\n    if (isFunction(projectOrIds)) {\n      return this.getAll().some(projectOrIds);\n    }\n\n    if (Array.isArray(projectOrIds)) {\n      return projectOrIds.every(id => (id as any) in this.store.entities);\n    }\n\n    return (projectOrIds as any) in this.store.entities;\n  }\n\n  /**\n   * Returns whether entity store has an active entity.\n   */\n  hasActive(): boolean {\n    return this.getSnapshot().active != null;\n  }\n\n  isEmpty() {\n    return this.getSnapshot().ids.length === 0;\n  }\n\n  private _byId(id: ActiveEntity): Observable<E> {\n    return this.select(state => this.getEntity(id));\n  }\n\n  private sortByOptions(options) {\n    options.sortBy = options.sortBy || (this.config && (this.config.sortBy as SortBy<E>));\n    options.sortByOrder = options.sortByOrder || (this.config && this.config.sortByOrder);\n  }\n\n  ngOnDestroy() {\n    this.memoized = null;\n  }\n}\n\nfunction toArray<E, S extends EntityState>(state: S, options: SelectOptions<E>): E[] {\n  let arr = [];\n  const { ids, entities } = state;\n  const { filterBy, limitTo, sortBy, sortByOrder } = options;\n\n  for (let i = 0; i < ids.length; i++) {\n    const id = ids[i];\n\n    if (!entityExists(id, entities)) {\n      continue;\n    }\n\n    if (!filterBy) {\n      arr.push(entities[id]);\n      continue;\n    }\n\n    if (Array.isArray(filterBy)) {\n      const allPass = filterBy.every(fn => fn(entities[id], i));\n      if (allPass) {\n        arr.push(entities[id]);\n      }\n    } else {\n      if (filterBy(entities[id], i)) {\n        arr.push(entities[id]);\n      }\n    }\n  }\n\n  if (sortBy) {\n    let _sortBy: any = isFunction(sortBy) ? sortBy : compareValues(sortBy, sortByOrder);\n    arr = arr.sort((a, b) => _sortBy(a, b, state));\n  }\n  const length = Math.min(limitTo || arr.length, arr.length);\n\n  return length === arr.length ? arr : arr.slice(0, length);\n}\n\nfunction toMap<E>(ids: any[], entities: HashMap<E>, options: SelectOptions<E>, get = false): HashMap<E> {\n  const map = {};\n  const { filterBy, limitTo } = options;\n\n  if (get && !filterBy && !limitTo) {\n    return entities;\n  }\n\n  const length = Math.min(limitTo || ids.length, ids.length);\n\n  if (filterBy && isUndefined(limitTo) === false) {\n    let count = 0;\n    for (let i = 0, length = ids.length; i < length; i++) {\n      if (count === limitTo) break;\n      const id = ids[i];\n      if (!entityExists(id, entities)) {\n        continue;\n      }\n      if (Array.isArray(filterBy)) {\n        const allPass = filterBy.every(fn => fn(entities[id], i));\n        if (allPass) {\n          map[id] = entities[id];\n          count++;\n        }\n      } else {\n        if (filterBy(entities[id], i)) {\n          map[id] = entities[id];\n          count++;\n        }\n      }\n    }\n  } else {\n    for (let i = 0; i < length; i++) {\n      const id = ids[i];\n\n      if (!entityExists(id, entities)) {\n        continue;\n      }\n\n      if (!filterBy) {\n        map[id] = entities[id];\n        continue;\n      }\n\n      if (Array.isArray(filterBy)) {\n        const allPass = filterBy.every(fn => fn(entities[id], i));\n        if (allPass) {\n          map[id] = entities[id];\n        }\n      } else {\n        if (filterBy(entities[id], i)) {\n          map[id] = entities[id];\n        }\n      }\n    }\n  }\n\n  return map;\n}\n","import { endBatch, startBatch } from '../internal/transaction.internal';\n\n/**\n *  A logical transaction.\n *  Use this transaction to optimize the dispatch of all the stores.\n *  The following code will update the store, BUT  emits only once\n *\n *  @example\n *  applyTransaction(() => {\n *    this.todosStore.add(new Todo(1, title));\n *    this.todosStore.add(new Todo(2, title));\n *  });\n *\n */\nexport function applyTransaction<T>(action: () => T, thisArg = undefined): T {\n  startBatch();\n  try {\n    return action.apply(thisArg);\n  } finally {\n    endBatch();\n  }\n}\n\n/**\n *  A logical transaction.\n *  Use this transaction to optimize the dispatch of all the stores.\n *\n *  The following code will update the store, BUT  emits only once.\n *\n *  @example\n *  @transaction\n *  addTodos() {\n *    this.todosStore.add(new Todo(1, title));\n *    this.todosStore.add(new Todo(2, title));\n *  }\n *\n *\n */\nexport function transaction() {\n  return function(target: any, propertyKey: string, descriptor: PropertyDescriptor) {\n    const originalMethod = descriptor.value;\n\n    descriptor.value = function(...args) {\n      return applyTransaction(() => {\n        return originalMethod.apply(this, args);\n      }, this);\n    };\n\n    return descriptor;\n  };\n}\n","import { isObject } from '../internal/utils';\n\n// https://github.com/georapbox/immutable-arrays\n\n/**\n * Adds one or more elements to the end of an array by returning\n * a new array instead of mutating the original one.\n *\n * @example\n * const originalArray = ['a', 'b', 'c', 'd', 'e'];\n * const resultArray = push(originalArray, 'f', 'g');\n * // -> originalArray ['a', 'b', 'c', 'd', 'e']\n * // -> resultArray ['a', 'b', 'c', 'd', 'e', 'f', 'g']\n */\nexport function push<T>(array: T[], ...elementN: T[]): T[] {\n  return [...array, ...elementN];\n}\n\n/**\n * Deletes an element from an array by its index in the array.\n *\n * @example\n * const originalArray = ['a', 'b', 'c', 'd', 'e'];\n * const resultArray = remove(originalArray, 2);\n * // -> originalArray ['a', 'b', 'c', 'd', 'e']\n * // -> resultArray ['a', 'b', 'd', 'e']\n */\nexport function remove<T>(array: T[], index: number): T[] {\n  return index >= 0 ? [...array.slice(0, index), ...array.slice(index + 1)] : [...array];\n}\n\n/**\n * Removes the last element from an array by returning\n * a new array instead of mutating the original one.\n *\n * @example\n * const originalArray = ['a', 'b', 'c', 'd', 'e'];\n * const resultArray = pop(originalArray);\n * // -> originalArray ['a', 'b', 'c', 'd', 'e']\n * // -> resultArray ['a', 'b', 'c', 'd']\n */\nexport function pop<T>(array: T[]): T[] {\n  return array.slice(0, -1);\n}\n\n/**\n * Adds one or more elements to the beginning of an array.\n *\n * @example\n * const originalArray = ['a', 'b', 'c', 'd', 'e'];\n * const resultArray = unshift(originalArray, 'f', 'g');\n * // -> originalArray ['a', 'b', 'c', 'd', 'e']\n * // -> resultArray ['f', 'g', 'a', 'b', 'c', 'd', 'e']\n */\nexport function unshift<T>(array: T[], ...elementN: T[]): T[] {\n  return [...elementN, ...array];\n}\n\n/**\n * Sorts the elements of an array (not in place) and returns a sorted array.\n *\n * @example\n * const numberArray = [20, 3, 4, 10, -3, 1, 0, 5];\n * const stringArray = ['Blue', 'Humpback', 'Beluga'];\n *\n * const resultArray = sort(numberArray, (a, b) => a - b);\n * // -> numberArray [20, 3, 4, 10, -3, 1, 0, 5]\n * // -> resultArray [-3, 0, 1, 3, 4, 5, 10, 20]\n *\n * const resultArray = sort(numberArray, (a, b) => b - a);\n * // -> numberArray [20, 3, 4, 10, -3, 1, 0, 5]\n * // -> resultArray [20, 10, 5, 4, 3, 1, 0, -3]\n *\n * const resultArray = sort(stringArray);\n * // -> stringArray ['Blue', 'Humpback', 'Beluga']\n * // -> resultArray ['Beluga', 'Blue', 'Humpback']\n *\n * const resultArray = sort(stringArray, (a, b) => a.toLowerCase() < b.toLowerCase());\n * // -> stringArray ['Blue', 'Humpback', 'Beluga']\n * // -> resultArray ['Humpback', 'Blue', 'Beluga']\n */\nexport function sort<T>(array: T[], compareFunction?: (a: T, b: T) => number): T[] {\n  return [...array].sort(compareFunction);\n}\n\n/**\n * Reverses an array (not in place).\n * The first array element becomes the last, and the last array element becomes the first.\n *\n * @example\n * const originalArray = ['a', 'b', 'c', 'd', 'e'];\n * const resultArray = reverse(originalArray);\n * // -> originalArray ['a', 'b', 'c', 'd', 'e']\n * // -> resultArray ['e', 'd', 'c', 'b', 'a']\n */\nexport function reverse<T>(array: T[]): T[] {\n  return [...array].reverse();\n}\n\n/**\n * Swap items in the array\n *\n * @example\n * const originalArray = ['a', 'b', 'c', 'd', 'e'];\n * const resultArray = swap(originalArray, 1, 4);\n * // -> originalArray ['a', 'b', 'c', 'd', 'e']\n * // -> resultArray ['a', 'e', 'c', 'd', 'b']\n */\nexport function swap<T>(array: T[], firstIndex: number, secondIndex: number): T[] {\n  const results = array.slice();\n  const firstItem = array[firstIndex];\n  results[firstIndex] = array[secondIndex];\n  results[secondIndex] = firstItem;\n\n  return results;\n}\n\n/**\n * Update item in the array\n *\n * @example\n * const originalArray = ['a', 'b', 'c', 'd', 'e'];\n * const resultArray = update(originalArray, 1, 'newItem');\n * // -> resultArray ['a', 'newItem', 'c', 'd', 'b']\n *\n * const originalArray = [{title: 1}, {title: 2}];\n * const resultArray = update(originalArray, originalArray[0], {title: 3});\n * // -> resultArray  [{title: 3}, {title: 2}];\n */\nexport function update<T>(array: T[], indexOrItem: number | object, updated: T): T[] {\n  return array.map((current, idx) => {\n    if (typeof indexOrItem === 'number' && idx === indexOrItem) {\n      return updated;\n    }\n\n    if (isObject(indexOrItem) && (indexOrItem as any) === current) {\n      return {\n        ...(indexOrItem as object),\n        ...(updated as any)\n      };\n    }\n\n    return current;\n  });\n}\n\n/**\n * Removes existing elements and/or adds new elements to an array.\n *\n * @example\n * const originalArray = ['a', 'b', 'c', 'd', 'e'];\n * const resultArray = splice(originalArray, 0);\n * // -> originalArray ['a', 'b', 'c', 'd', 'e']\n * // -> resultArray []\n *\n * const originalArray = ['a', 'b', 'c', 'd', 'e'];\n * const resultArray = splice(originalArray, 0, 1);\n * // -> originalArray ['a', 'b', 'c', 'd', 'e']\n * // -> resultArray ['b', 'c', 'd', 'e']\n *\n * const originalArray = ['a', 'b', 'c', 'd', 'e'];\n * const resultArray = splice(originalArray, 0, 3);\n * // -> originalArray ['a', 'b', 'c', 'd', 'e']\n * // -> resultArray ['d', 'e']\n *\n * const originalArray = ['a', 'b', 'c', 'd', 'e'];\n * const resultArray = splice(originalArray, 0, originalArray.length);\n * // -> originalArray ['a', 'b', 'c', 'd', 'e']\n * // -> resultArray []\n *\n * const originalArray = ['a', 'b', 'c', 'd', 'e'];\n * const resultArray = splice(originalArray, 0, -3);\n * // -> originalArray ['a', 'b', 'c', 'd', 'e']\n * // -> resultArray ['a', 'b', 'c', 'd', 'e']\n *\n * const originalArray = ['a', 'b', 'c', 'd', 'e'];\n * const resultArray = splice(originalArray, 0, 0, 'lorem', 'ipsum');\n * // -> originalArray ['a', 'b', 'c', 'd', 'e']\n * // -> resultArray ['lorem', 'ipsum', 'a', 'b', 'c', 'd', 'e']\n *\n * const originalArray = ['a', 'b', 'c', 'd', 'e'];\n * const resultArray = splice(originalArray, originalArray.length, 0, 'lorem', 'ipsum');\n * // -> originalArray ['a', 'b', 'c', 'd', 'e']\n * // -> resultArray ['a', 'b', 'c', 'd', 'e', 'lorem', 'ipsum']\n *\n * const originalArray = ['a', 'b', 'c', 'd', 'e'];\n * const resultArray = splice(originalArray, 0, 2, 'lorem', 'ipsum');\n * // -> originalArray ['a', 'b', 'c', 'd', 'e']\n * // -> resultArray ['lorem', 'ipsum', 'c', 'd', 'e']\n *\n * const originalArray = ['a', 'b', 'c', 'd', 'e'];\n * const resultArray = splice(originalArray, originalArray.length - 2, 2, 'lorem', 'ipsum');\n * // -> originalArray ['a', 'b', 'c', 'd', 'e']\n * // -> resultArray ['a', 'b', 'c', 'lorem', 'ipsum']\n */\nexport function splice<T>(array: T[], start = array.length, deleteCount = array.length - start, ...elementN: T[]): T[] {\n  return [...array.slice(0, start), ...elementN, ...array.slice(start + (deleteCount < 0 ? 0 : deleteCount))];\n}\n\nexport function toggle<T>(arr: T[], item: T) {\n  return arr.indexOf(item) > -1 ? arr.filter(current => item !== current) : push(arr, item);\n}\n","/** Checks if value is null or undefined */\nimport { Observable } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\nexport const filterNil = <T>(source: Observable<T>) => source.pipe(filter(value => value !== null && typeof value !== 'undefined'));\n","import { Action, __globalState } from './global-state';\n\nexport function applyAction<T>(func: () => T, action: Action, thisArg = undefined): T {\n  __globalState.setCustomAction(action, true);\n  return func.apply(thisArg);\n}\n\nexport function action(action: Action, skipTransactionMsg = true) {\n  return function(target: any, propertyKey: string, descriptor: PropertyDescriptor) {\n    const originalMethod = descriptor.value;\n    descriptor.value = function(...args) {\n      __globalState.setCustomAction(action, skipTransactionMsg);\n      return originalMethod.apply(this, args);\n    };\n\n    return descriptor;\n  };\n}\n","import { __stores__ } from './store';\nimport { isString } from '../internal/utils';\n\nexport class SnapshotManager {\n  /**\n   * Get a snapshot of the whole state or a specific stores\n   * Use it ONLY for things like saving the state in the server\n   */\n  getStoresSnapshot(stores: string[] = []) {\n    let acc = {};\n    const hasInclude = stores.length > 0;\n    const keys = hasInclude ? stores : Object.keys(__stores__);\n    for (let i = 0; i < keys.length; i++) {\n      let storeName = keys[i];\n      acc[storeName] = __stores__[storeName]._value();\n    }\n\n    return acc;\n  }\n\n  /**\n   * Set snapshot we get from the server\n   */\n  setStoresSnapshot(stores: { [storeName: string]: any } | string) {\n    let normalizedStores = stores;\n    if (isString(stores)) {\n      normalizedStores = JSON.parse(normalizedStores as string);\n    }\n\n    for (let i = 0, keys = Object.keys(normalizedStores); i < keys.length; i++) {\n      const storeName = keys[i];\n      if (__stores__[storeName]) {\n        __stores__[storeName].setState(() => normalizedStores[storeName]);\n      }\n    }\n  }\n}\n\nexport const snapshotManager = new SnapshotManager();\n","import { QueryEntity } from '../api/query-entity';\nimport { Query } from '../api/query';\nimport { Observable } from 'rxjs';\nimport { filterNil } from '../api/operators';\nimport { toBoolean } from '../internal/utils';\nimport { ID } from '../api/types';\nimport { getAkitaConfig } from '../api/config';\n\nexport type Queries<E, S> = Query<S> | QueryEntity<S, E>;\n\nexport abstract class AkitaPlugin<E = any, S = any> {\n  protected constructor(protected query: Queries<E, S>, config?: { resetFn?: Function }) {\n    if (config && config.resetFn) {\n      if (getAkitaConfig().resettable) {\n        this.onReset(config.resetFn);\n      }\n    }\n  }\n\n  /** This method is responsible for getting access to the query. */\n  protected getQuery(): Queries<E, S> {\n    return this.query;\n  }\n\n  /** This method is responsible for getting access to the store. */\n  protected getStore() {\n    return this.getQuery().__store__;\n  }\n\n  /** This method is responsible for cleaning. */\n  public abstract destroy();\n\n  /** This method is responsible tells whether the plugin is entityBased or not.  */\n  protected isEntityBased(entityId: ID) {\n    return toBoolean(entityId);\n  }\n\n  /** This method is responsible for selecting the source; it can be the whole store or one entity. */\n  protected selectSource(entityId: ID): Observable<S | E> {\n    if (this.isEntityBased(entityId)) {\n      return (this.getQuery() as QueryEntity<S, E>).selectEntity(entityId).pipe(filterNil);\n    }\n\n    return (this.getQuery() as Query<S>).select(state => state);\n  }\n\n  protected getSource(entityId: ID): S | E {\n    if (this.isEntityBased(entityId)) {\n      return (this.getQuery() as QueryEntity<S, E>).getEntity(entityId);\n    }\n\n    return this.getQuery().getSnapshot();\n  }\n\n  /** This method is responsible for updating the store or one entity; it can be the whole store or one entity. */\n  protected updateStore(newState, entityId?) {\n    if (this.isEntityBased(entityId)) {\n      this.getStore().update(entityId, newState);\n    } else {\n      this.getStore().setState(state => ({ ...state, ...newState }));\n    }\n  }\n\n  /**\n   * Function to invoke upon reset\n   */\n  private onReset(fn: Function) {\n    const original = this.getStore().reset;\n    this.getStore().reset = (...params) => {\n      /** It should run after the plugin destroy method */\n      setTimeout(() => {\n        original.apply(this.getStore(), params);\n        fn();\n      });\n    };\n  }\n}\n","import { QueryEntity } from '../../api/query-entity';\nimport { delay, map, switchMap, take } from 'rxjs/operators';\nimport { BehaviorSubject, from, Observable, Subscription } from 'rxjs';\nimport { isObservable, isUndefined } from '../../internal/utils';\nimport { ID } from '../../api/types';\nimport { AkitaPlugin } from '../plugin';\nimport { applyTransaction } from '../../api/transaction';\nimport { action, applyAction } from '../../internal/action';\n\nexport interface PaginationResponse<E> {\n  currentPage: number;\n  perPage: number;\n  lastPage: number;\n  data: E[];\n  total?: number;\n  from?: number;\n  to?: number;\n  pageControls?: number[];\n}\n\nexport type PaginatorConfig = {\n  pagesControls?: boolean;\n  range?: boolean;\n  startWith?: number;\n  cacheTimeout?: Observable<number>;\n};\n\nconst paginatorDefaults: PaginatorConfig = {\n  pagesControls: false,\n  range: false,\n  startWith: 1,\n  cacheTimeout: undefined\n};\n\nexport class PaginatorPlugin<E> extends AkitaPlugin<E> {\n  /** Save current filters, sorting, etc. in cache */\n  metadata = new Map();\n\n  private page: BehaviorSubject<number>;\n  private pages = new Map<number, { ids: ID[] }>();\n  private readonly clearCacheSubscription: Subscription;\n\n  private pagination: PaginationResponse<E> = {\n    currentPage: 1,\n    perPage: 0,\n    total: 0,\n    lastPage: 0,\n    data: []\n  };\n\n  /**\n   * When the user navigates to a different page and return\n   * we don't want to call `clearCache` on first time.\n   */\n  private initial = false;\n\n  constructor(protected query: QueryEntity<any, E>, public config: PaginatorConfig = {}) {\n    super(query, {\n      resetFn: () => {\n        this.initial = false;\n        this.destroy({ clearCache: true, currentPage: 1 });\n      }\n    });\n    this.config = Object.assign(paginatorDefaults, config);\n    const { startWith, cacheTimeout } = this.config;\n    this.page = new BehaviorSubject(startWith);\n    if (isObservable(cacheTimeout)) {\n      this.clearCacheSubscription = cacheTimeout.subscribe(_ => this.clearCache());\n    }\n  }\n\n  /**\n   * Proxy to the query loading\n   */\n  isLoading$ = this.query.selectLoading().pipe(delay(0));\n\n  /**\n   * Listen to page changes\n   */\n  get pageChanges() {\n    return this.page.asObservable();\n  }\n\n  /**\n   * Get the current page number\n   */\n  get currentPage() {\n    return this.pagination.currentPage;\n  }\n\n  /**\n   * Check if current page is the first one\n   */\n  get isFirst() {\n    return this.currentPage === 1;\n  }\n\n  /**\n   * Check if current page is the last one\n   */\n  get isLast() {\n    return this.currentPage === this.pagination.lastPage;\n  }\n\n  /**\n   * Whether to generate an array of pages for *ngFor\n   * [1, 2, 3, 4]\n   */\n  withControls() {\n    this.config.pagesControls = true;\n    return this;\n  }\n\n  /**\n   * Whether to generate the `from` and `to` keys\n   * [1, 2, 3, 4]\n   */\n  withRange() {\n    this.config.range = true;\n    return this;\n  }\n\n  /**\n   * Set the loading state\n   */\n  setLoading(value = true) {\n    this.getStore().setLoading(value);\n  }\n\n  /**\n   * Update the pagination object and add the page\n   */\n  @action({ type: '@Pagination - New Page' }, true)\n  update(response: PaginationResponse<E>) {\n    this.pagination = response;\n    this.addPage(response.data);\n  }\n\n  /**\n   *\n   * Set the ids and add the page to store\n   */\n  addPage(data: E[]) {\n    this.pages.set(this.currentPage, { ids: data.map(entity => entity[this.getStore().idKey]) });\n    this.getStore().add(data);\n  }\n\n  /**\n   * Clear the cache.\n   */\n  clearCache() {\n    if (!this.initial) {\n      applyAction(\n        () => {\n          this.getStore().remove();\n        },\n        { type: '@Pagination - Clear Cache' }\n      );\n      this.pages = new Map();\n      this.metadata = new Map();\n    }\n    this.initial = false;\n  }\n\n  clearPage(page: number) {\n    this.pages.delete(page);\n  }\n\n  /**\n   * Clear the cache timeout and optionally the pages\n   */\n  destroy({ clearCache, currentPage }: { clearCache?: boolean; currentPage?: number } = {}) {\n    if (this.clearCacheSubscription) {\n      this.clearCacheSubscription.unsubscribe();\n    }\n    if (clearCache) {\n      this.clearCache();\n    }\n    if (!isUndefined(currentPage)) {\n      this.setPage(currentPage);\n    }\n    this.initial = true;\n  }\n\n  /**\n   * Whether the provided page is active\n   */\n  isPageActive(page: number) {\n    return this.currentPage === page;\n  }\n\n  /**\n   * Set the current page\n   */\n  setPage(page: number) {\n    if (page !== this.currentPage || !this.hasPage(page)) {\n      this.page.next((this.pagination.currentPage = page));\n    }\n  }\n\n  /**\n   * Increment current page\n   */\n  nextPage() {\n    if (this.currentPage !== this.pagination.lastPage) {\n      this.setPage(this.pagination.currentPage + 1);\n    }\n  }\n\n  /**\n   * Decrement current page\n   */\n  prevPage() {\n    if (this.pagination.currentPage > 1) {\n      this.setPage(this.pagination.currentPage - 1);\n    }\n  }\n\n  /**\n   * Set current page to last\n   */\n  setLastPage() {\n    this.setPage(this.pagination.lastPage);\n  }\n\n  /**\n   * Set current page to first\n   */\n  setFirstPage() {\n    this.setPage(1);\n  }\n\n  /**\n   * Check if page exists in cache\n   */\n  hasPage(page: number) {\n    return this.pages.has(page);\n  }\n\n  /**\n   * Get the current page if it's in cache, otherwise invoke the request\n   */\n  getPage(req: () => Observable<PaginationResponse<E>>) {\n    const page = this.pagination.currentPage;\n    if (this.hasPage(page)) {\n      return this.selectPage(page);\n    } else {\n      this.setLoading(true);\n      return from(req()).pipe(\n        switchMap((config: PaginationResponse<E>) => {\n          applyTransaction(() => {\n            this.setLoading(false);\n            this.update(config);\n          });\n          return this.selectPage(page);\n        })\n      );\n    }\n  }\n\n  getQuery(): QueryEntity<any, E> {\n    return this.query;\n  }\n\n  private getFrom() {\n    if (this.isFirst) {\n      return 1;\n    }\n    return (this.currentPage - 1) * this.pagination.perPage + 1;\n  }\n\n  private getTo() {\n    return this.currentPage * this.pagination.perPage;\n  }\n\n  /**\n   * Select the page\n   */\n  private selectPage(page: number): Observable<PaginationResponse<E>> {\n    return this.query.selectAll({ asObject: true }).pipe(\n      take(1),\n      map(entities => {\n        let response: PaginationResponse<E> = {\n          ...this.pagination,\n          data: this.pages.get(page).ids.map(id => entities[id])\n        };\n\n        const { range, pagesControls } = this.config;\n\n        /** If no total - calc it */\n        if (isNaN(this.pagination.total)) {\n          if (response.lastPage === 1) {\n            response.total = response.data ? response.data.length : 0;\n          } else {\n            response.total = response.perPage * response.lastPage;\n          }\n          this.pagination.total = response.total;\n        }\n\n        if (range) {\n          response.from = this.getFrom();\n          response.to = this.getTo();\n        }\n\n        if (pagesControls) {\n          response.pageControls = generatePages(this.pagination.total, this.pagination.perPage);\n        }\n\n        return response;\n      })\n    );\n  }\n}\n\n/**\n * Generate an array so we can ngFor them to navigate between pages\n */\nfunction generatePages(total: number, perPage: number) {\n  const len = Math.ceil(total / perPage);\n  let arr = [];\n  for (let i = 0; i < len; i++) {\n    arr.push(i + 1);\n  }\n  return arr;\n}\n\n/** backward compatibility */\nexport const Paginator = PaginatorPlugin;\n","import { __stores__, Actions, rootDispatcher } from '../api/store';\nimport { __globalState } from '../internal/global-state';\nimport { isDefined } from '../internal/utils';\n\nexport type DevtoolsOptions = {\n  /**  maximum allowed actions to be stored in the history tree */\n  maxAge: number;\n  latency: number;\n  actionsBlacklist: string[];\n  actionsWhitelist: string[];\n  shouldCatchErrors: boolean;\n  logTrace: boolean;\n  predicate: (state: any, action: any) => boolean;\n};\nlet rootDispatcherSub, devtoolsSub;\n\nexport type NgZoneLike = { run: any };\n\nexport function akitaDevtools(ngZone: NgZoneLike, options?: Partial<DevtoolsOptions>);\nexport function akitaDevtools(options?: Partial<DevtoolsOptions>);\nexport function akitaDevtools(ngZoneOrOptions?: NgZoneLike | Partial<DevtoolsOptions>, options: Partial<DevtoolsOptions> = {}) {\n  if (!(window as any).__REDUX_DEVTOOLS_EXTENSION__) {\n    return;\n  }\n\n  rootDispatcherSub && rootDispatcherSub.unsubscribe();\n  devtoolsSub && devtoolsSub();\n\n  const isAngular = ngZoneOrOptions && ngZoneOrOptions['run'];\n\n  if (!isAngular) {\n    ngZoneOrOptions = ngZoneOrOptions || {};\n    (ngZoneOrOptions as any).run = cb => cb();\n    options = ngZoneOrOptions as Partial<DevtoolsOptions>;\n  }\n\n  const defaultOptions: Partial<DevtoolsOptions> & { name: string } = { name: 'Akita' };\n  const merged = Object.assign({}, defaultOptions, options);\n\n  const devTools = (window as any).__REDUX_DEVTOOLS_EXTENSION__.connect(merged);\n  let appState = {};\n\n  rootDispatcherSub = rootDispatcher.subscribe(action => {\n    if (action.type === Actions.DELETE_STORE) {\n      const storeName = action.payload.storeName;\n      delete appState[storeName];\n      devTools.send({ type: `[${storeName}] - Delete Store` }, appState);\n    }\n\n    if (action.type === Actions.NEW_STATE) {\n      if (__globalState.skipAction) {\n        __globalState.setSkipAction(false);\n        return;\n      }\n\n      appState = {\n        ...appState,\n        [action.payload.name]: __stores__[action.payload.name]._value()\n      };\n\n      const { type, entityId } = __globalState.currentAction;\n      const storeName = capitalize(action.payload.name);\n      let msg = isDefined(entityId) ? `[${storeName}] - ${type} (ids: ${entityId})` : `[${storeName}] - ${type}`;\n\n      if (options.logTrace) {\n        console.group(msg);\n        console.trace();\n        console.groupEnd();\n      }\n\n      devTools.send({ type: msg, transaction: __globalState.currentT.map(t => t.type) }, appState);\n    }\n  });\n\n  devtoolsSub = devTools.subscribe(message => {\n    if (message.type === 'ACTION') {\n      const [storeName] = message.payload.split('.');\n\n      if (__stores__[storeName]) {\n        (ngZoneOrOptions as NgZoneLike).run(() => {\n          const funcCall = message.payload.replace(storeName, `this['${storeName}']`);\n          try {\n            new Function(`${funcCall}`).call(__stores__);\n          } catch (e) {\n            console.warn('Unknown Method â¹ï¸');\n          }\n        });\n      }\n    }\n\n    if (message.type === 'DISPATCH') {\n      const payloadType = message.payload.type;\n\n      if (payloadType === 'COMMIT') {\n        devTools.init(appState);\n        return;\n      }\n\n      if (message.state) {\n        const rootState = JSON.parse(message.state);\n        for (let i = 0, keys = Object.keys(rootState); i < keys.length; i++) {\n          const storeName = keys[i];\n          if (__stores__[storeName]) {\n            (ngZoneOrOptions as NgZoneLike).run(() => {\n              __stores__[storeName].setState(() => rootState[storeName], false);\n            });\n          }\n        }\n      }\n    }\n  });\n}\n\nfunction capitalize(string) {\n  return string && string.charAt(0).toUpperCase() + string.slice(1);\n}\n","import { AkitaPlugin } from '../plugin';\nimport { Query } from '../../api/query';\nimport { Observable, Subscription } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\nimport { __globalState } from '../../internal/global-state';\nimport { getValue, isString, setValue, toBoolean } from '../../internal/utils';\n\nexport type FormGroupLike = {\n  patchValue: Function;\n  setValue: Function;\n  value: any;\n  get: Function;\n  valueChanges: Observable<any>;\n  controls: any;\n};\n\nexport type AkitaFormProp<T> = {\n  [key: string]: T;\n};\n\nexport type PersistFormParams = {\n  debounceTime?: number;\n  formKey?: string;\n  emitEvent?: boolean;\n  arrControlFactory?: ArrayControlFactory;\n};\n\nexport type ArrayControlFactory = (value: any) => any; // Todo: Return  AbstractControl interface\n\nexport class PersistNgFormPlugin<T = any> extends AkitaPlugin {\n  formChanges: Subscription;\n  private isRootKeys: boolean;\n  private form: FormGroupLike;\n  private isKeyBased: boolean;\n  private initialValue;\n  private builder;\n\n  constructor(protected query: Query<any>, private factoryFnOrPath?: Function | string, private params: PersistFormParams = {}) {\n    super(query);\n    this.params = { ...{ debounceTime: 300, formKey: 'akitaForm', emitEvent: false, arrControlFactory: v => this.builder.control(v) }, ...params };\n    this.isRootKeys = toBoolean(factoryFnOrPath) === false;\n    this.isKeyBased = isString(factoryFnOrPath) || this.isRootKeys;\n  }\n\n  setForm(form: FormGroupLike, builder?) {\n    this.form = form;\n    this.builder = builder;\n    this.activate();\n    return this;\n  }\n\n  reset(initialState?: T) {\n    let value;\n    if (initialState) {\n      value = initialState;\n    } else {\n      value = this.isKeyBased ? this.initialValue : (this as any).factoryFnOrPath();\n    }\n\n    if (this.isKeyBased) {\n      Object.keys(this.initialValue).forEach(stateKey => {\n        const value = this.initialValue[stateKey];\n        if (Array.isArray(value) && this.builder) {\n          const formArray = this.form.controls[stateKey];\n          this.cleanArray(formArray);\n          value.forEach((v, i) => {\n            this.form.get(stateKey).insert(i, (this.params.arrControlFactory as Function)(v));\n          });\n        }\n      });\n    }\n    this.form.patchValue(value, { emitEvent: this.params.emitEvent });\n\n    const storeValue = this.isKeyBased ? setValue(this.getQuery().getSnapshot(), `${this.getStore().storeName}.${this.factoryFnOrPath}`, value) : { [this.params.formKey]: value };\n    this.updateStore(storeValue);\n  }\n\n  private cleanArray(control) {\n    while (control.length !== 0) {\n      control.removeAt(0);\n    }\n  }\n\n  private resolveInitialValue(formValue, root) {\n    if (!formValue) return;\n    return Object.keys(formValue).reduce((acc, stateKey) => {\n      const value = root[stateKey];\n      if (Array.isArray(value) && this.builder) {\n        const factory = this.params.arrControlFactory;\n        this.cleanArray(this.form.get(stateKey));\n        value.forEach((v, i) => {\n          this.form.get(stateKey).insert(i, (factory as Function)(v));\n        });\n      }\n      acc[stateKey] = root[stateKey];\n      return acc;\n    }, {});\n  }\n\n  private activate() {\n    let path;\n\n    if (this.isKeyBased) {\n      if (this.isRootKeys) {\n        this.initialValue = this.resolveInitialValue(this.form.value, this.getQuery().getSnapshot());\n        this.form.patchValue(this.initialValue, { emitEvent: this.params.emitEvent });\n      } else {\n        path = `${this.getStore().storeName}.${this.factoryFnOrPath}`;\n        const root = getValue(this.getQuery().getSnapshot(), path);\n        this.initialValue = this.resolveInitialValue(root, root);\n        this.form.patchValue(this.initialValue, { emitEvent: this.params.emitEvent });\n      }\n    } else {\n      if (!(this.getQuery().getSnapshot() as AkitaFormProp<T>)[this.params.formKey]) {\n        __globalState.setAction({ type: '@PersistNgFormPlugin activate' });\n        this.updateStore({ [this.params.formKey]: (this as any).factoryFnOrPath() });\n      }\n\n      const value = this.getQuery().getSnapshot()[this.params.formKey];\n      this.form.patchValue(value);\n    }\n\n    this.formChanges = this.form.valueChanges.pipe(debounceTime(this.params.debounceTime)).subscribe(value => {\n      __globalState.setAction({ type: '@PersistForm - Update' });\n      let newState;\n      if (this.isKeyBased) {\n        if (this.isRootKeys) {\n          newState = state => ({ ...state, ...value });\n        } else {\n          newState = state => setValue(state, path, value);\n        }\n      } else {\n        newState = () => ({ [this.params.formKey]: value });\n      }\n      this.updateStore(newState(this.getQuery().getSnapshot()));\n    });\n  }\n\n  destroy() {\n    this.formChanges && this.formChanges.unsubscribe();\n    this.form = null;\n    this.builder = null;\n  }\n}\n","import { AkitaError } from '../internal/error';\nimport { __stores__, Actions, rootDispatcher } from '../api/store';\nimport { skip, filter } from 'rxjs/operators';\nimport { getValue, setValue } from '../internal/utils';\nimport { __globalState } from '../internal/global-state';\n\nconst notBs = typeof localStorage === 'undefined';\n\nexport interface PersistStateParams {\n  /** The storage key */\n  key: string;\n  /** Storage strategy to use. This defaults to LocalStorage but you can pass SessionStorage or anything that implements the StorageEngine API. */\n  storage: Storage;\n  /** Custom deserializer. Defaults to JSON.parse */\n  deserialize: Function;\n  /** Custom serializer, defaults to JSON.stringify */\n  serialize: Function;\n  /**\n   * By default the whole state is saved to storage, use this param to include only the stores you need.\n   * Pay attention that you can't use both include and exclude\n   */\n  include: string[];\n  /**\n   *  By default the whole state is saved to storage, use this param to exclude stores that you don't need.\n   *  Pay attention that you can't use both include and exclude\n   */\n  exclude: string[];\n}\n\nexport function persistState(params?: Partial<PersistStateParams>) {\n  if (notBs) return;\n\n  const defaults: PersistStateParams = {\n    key: 'AkitaStores',\n    storage: localStorage,\n    deserialize: JSON.parse,\n    serialize: JSON.stringify,\n    include: [],\n    exclude: []\n  };\n  const { storage, deserialize, serialize, include, exclude, key } = Object.assign({}, defaults, params);\n\n  const hasInclude = include.length > 0;\n  const hasExclude = exclude.length > 0;\n  let includeStores;\n\n  if (hasInclude && hasExclude) {\n    throw new AkitaError(\"You can't use both include and exclude\");\n  }\n\n  if (hasInclude) {\n    includeStores = include.reduce((acc, path) => {\n      const storeName = path.split('.')[0];\n      acc[storeName] = path;\n      return acc;\n    }, {});\n  }\n\n  const storageState = deserialize(storage.getItem(key) || '{}');\n\n  let stores = {};\n  let acc = {};\n\n  function save() {\n    storage.setItem(key, serialize(Object.assign({}, storageState, acc)));\n  }\n\n  function subscribe(storeName, path) {\n    stores[storeName] = __stores__[storeName]\n      ._select(state => getValue(state, path))\n      .pipe(skip(1))\n      .subscribe(data => {\n        acc[storeName] = data;\n        save();\n      });\n  }\n\n  function setInitial(storeName, store, path) {\n    if (storageState[storeName]) {\n      __globalState.setAction({ type: '@PersistState' });\n      store.setState(state => {\n        return setValue(state, path, storageState[storeName]);\n      });\n      if (store.setDirty) {\n        store.setDirty();\n      }\n    }\n  }\n\n  const subscription = rootDispatcher.pipe(filter(action => action.type === Actions.NEW_STORE)).subscribe(action => {\n    let currentStoreName = action.payload.store.storeName;\n\n    if (hasExclude && exclude.includes(currentStoreName)) {\n      return;\n    }\n\n    if (hasInclude) {\n      const path = includeStores[currentStoreName];\n      if (!path) {\n        return;\n      }\n      setInitial(currentStoreName, action.payload.store, path);\n      subscribe(currentStoreName, path);\n    } else {\n      setInitial(currentStoreName, action.payload.store, currentStoreName);\n      subscribe(currentStoreName, currentStoreName);\n    }\n  });\n\n  return {\n    destroy() {\n      subscription.unsubscribe();\n      for (let i = 0, keys = Object.keys(stores); i < keys.length; i++) {\n        const storeName = keys[i];\n        stores[storeName].unsubscribe();\n      }\n      stores = {};\n    },\n    clear() {\n      storage.clear();\n    },\n    clearStore(storeName: string) {\n      const storageState = deserialize(storage.getItem(key) || '{}');\n\n      if (storageState[storeName]) {\n        delete storageState[storeName];\n        storage.setItem(key, serialize(storageState));\n      }\n    }\n  };\n}\n","import {coerceArray, isFunction, isUndefined, toBoolean} from '../internal/utils';\nimport {QueryEntity} from '../api/query-entity';\nimport {ID, IDS} from '../api/types';\nimport {Observable} from 'rxjs';\n\n/**\n * Each plugin that wants to add support for entities should extend this interface.\n */\nexport type EntityParam = ID;\n\nexport type EntityCollectionParams = ID | ID[];\n\nexport type RebaseActions<P = any> = { beforeRemove?: Function; beforeAdd?: Function; afterAdd?: (plugin: P) => any; };\n\nconst defaultActions: RebaseActions = {beforeRemove: plugin => plugin.destroy()};\n\nexport abstract class EntityCollectionPlugin<E, P> {\n  protected entities = new Map<ID, P>();\n\n  protected constructor(protected query: QueryEntity<any, E>, private entityIds: EntityCollectionParams) {}\n\n  /**\n   * Get the entity plugin instance.\n   */\n  protected getEntity(id: ID): P {\n    return this.entities.get(id);\n  }\n\n  /**\n   * Whether the entity plugin exist.\n   */\n  protected hasEntity(id: ID): boolean {\n    return this.entities.has(id);\n  }\n\n  /**\n   * Remove the entity plugin instance.\n   */\n  protected removeEntity(id: ID) {\n    return this.entities.delete(id);\n  }\n\n  /**\n   * Set the entity plugin instance.\n   */\n  protected createEntity(id: ID, plugin: P) {\n    return this.entities.set(id, plugin);\n  }\n\n  /**\n   * If the user passes `entityIds` we take them; otherwise, we take all.\n   */\n  protected getIds(): ID[] {\n    return isUndefined(this.entityIds) ? this.query.getSnapshot().ids : coerceArray(this.entityIds);\n  }\n\n  /**\n   * When you call one of the plugin methods, you can pass id/ids or undefined which means all.\n   */\n  protected resolvedIds(ids?): ID[] {\n    return isUndefined(ids) ? this.getIds() : coerceArray(ids);\n  }\n\n  /**\n   * Call this method when you want to activate the plugin on init or when you need to listen to add/remove of entities dynamically.\n   *\n   * For example in your plugin you may do the following:\n   *\n   * this.query.select(state => state.ids).pipe(skip(1)).subscribe(ids => this.activate(ids));\n   */\n  protected rebase(ids: ID[], actions: RebaseActions<P> = defaultActions) {\n    /**\n     *\n     * If the user passes `entityIds` & we have new ids check if we need to add/remove instances.\n     *\n     * This phase will be called only upon update.\n     */\n    if (toBoolean(ids)) {\n      /**\n       * Which means all\n       */\n      if (isUndefined(this.entityIds)) {\n        for (let i = 0, len = ids.length; i < len; i++) {\n          const entityId = ids[i];\n          if (this.hasEntity(entityId) === false) {\n            isFunction(actions.beforeAdd) && actions.beforeAdd(entityId);\n            const plugin = this.instantiatePlugin(entityId);\n            this.entities.set(entityId, plugin);\n            isFunction(actions.afterAdd) && actions.afterAdd(plugin);\n          }\n        }\n\n        this.entities.forEach((plugin, entityId) => {\n          if (ids.indexOf(entityId) === -1) {\n            isFunction(actions.beforeRemove) && actions.beforeRemove(plugin);\n            this.removeEntity(entityId);\n          }\n        });\n      } else {\n        /**\n         * Which means the user passes specific ids\n         */\n        const _ids = coerceArray(this.entityIds);\n        for (let i = 0, len = _ids.length; i < len; i++) {\n          const entityId = _ids[i];\n          /** The Entity in current ids and doesn't exist, add it. */\n          if (ids.indexOf(entityId) > -1 && this.hasEntity(entityId) === false) {\n            isFunction(actions.beforeAdd) && actions.beforeAdd(entityId);\n            const plugin = this.instantiatePlugin(entityId);\n            this.entities.set(entityId, plugin);\n            isFunction(actions.afterAdd) && actions.afterAdd(plugin);\n          } else {\n            this.entities.forEach((plugin, entityId) => {\n              /** The Entity not in current ids and exists, remove it. */\n              if (ids.indexOf(entityId) === -1 && this.hasEntity(entityId) === true) {\n                isFunction(actions.beforeRemove) && actions.beforeRemove(plugin);\n                this.removeEntity(entityId);\n              }\n            });\n          }\n        }\n      }\n    } else {\n      /**\n       * Otherwise, start with the provided ids or all.\n       */\n      this.getIds().forEach(id => {\n        if (!this.hasEntity(id)) this.createEntity(id, this.instantiatePlugin(id))\n      });\n    }\n  }\n\n  /**\n   * Listen for add/remove entities.\n   */\n  protected selectIds(): Observable<ID[]> {\n    return this.query.select(state => state.ids);\n  }\n\n  /**\n   * Base method for activation, you can override it if you need to.\n   */\n  protected activate(ids?: ID[]) {\n    this.rebase(ids);\n  }\n\n  /**\n   * This method is responsible for plugin instantiation.\n   *\n   * For example:\n   * return new StateHistory(this.query, this.params, id) as P;\n   */\n  protected abstract instantiatePlugin(id: ID): P;\n\n  /**\n   * This method is responsible for cleaning.\n   */\n  public abstract destroy(id?: ID);\n\n  /**\n   * Loop over each id and invoke the plugin method.\n   */\n  protected forEachId(ids: IDS, cb: (entity: P) => any) {\n    const _ids = this.resolvedIds(ids);\n\n    for (let i = 0, len = _ids.length; i < len; i++) {\n      const id = _ids[i];\n      if (this.hasEntity(id)) {\n        cb(this.getEntity(id));\n      }\n    }\n  }\n}\n","import { filter, pairwise } from 'rxjs/operators';\nimport { __globalState } from '../../internal/global-state';\nimport { toBoolean } from '../../internal/utils';\nimport { AkitaPlugin, Queries } from '../plugin';\nimport { EntityParam } from '../entity-collection-plugin';\n\nexport interface StateHistoryParams {\n  maxAge?: number;\n}\n\nexport class StateHistoryPlugin<E = any, S = any> extends AkitaPlugin<E, S> {\n  /** Allow skipping an update from outside */\n  private skip = false;\n\n  private history = {\n    past: [],\n    present: null,\n    future: []\n  };\n\n  /** Skip the update when redo/undo */\n  private skipUpdate = false;\n  private subscription;\n\n  constructor(protected query: Queries<E, S>, private params: StateHistoryParams = {}, private _entityId?: EntityParam) {\n    super(query, {\n      resetFn: () => this.clear()\n    });\n    params.maxAge = toBoolean(params.maxAge) ? params.maxAge : 10;\n    this.activate();\n  }\n\n  get hasPast() {\n    return this.history.past.length > 0;\n  }\n\n  get hasFuture() {\n    return this.history.future.length > 0;\n  }\n\n  activate() {\n    this.history.present = this.getSource(this._entityId);\n    this.subscription = this.selectSource(this._entityId)\n      .pipe(pairwise())\n      .subscribe(([past, present]) => {\n        if (this.skip) {\n          this.skip = false;\n          return;\n        }\n        if (!this.skipUpdate) {\n          if (this.history.past.length === this.params.maxAge) {\n            this.history.past = this.history.past.slice(1);\n          }\n          this.history.past = [...this.history.past, past];\n          this.history.present = present;\n        }\n      });\n  }\n\n  undo() {\n    if (this.history.past.length > 0) {\n      const { past, present, future } = this.history;\n      const previous = past[past.length - 1];\n      const newPast = past.slice(0, past.length - 1);\n\n      this.history.past = newPast;\n      this.history.present = previous;\n      this.history.future = [present, ...this.history.future];\n      this.update();\n    }\n  }\n\n  redo() {\n    if (this.history.future.length > 0) {\n      const { past, present, future } = this.history;\n      const next = this.history.future[0];\n      const newFuture = this.history.future.slice(1);\n      this.history.past = [...past, present];\n      this.history.present = next;\n      this.history.future = newFuture;\n      this.update('Redo');\n    }\n  }\n\n  jumpToPast(index: number) {\n    if (index < 0 || index >= this.history.past.length) return;\n\n    const { past, future } = this.history;\n    /**\n     *\n     * const past = [1, 2, 3, 4, 5];\n     *\n     * newPast = past.slice(0, 2) = [1, 2];\n     * present = past[index] = 3;\n     * [...past.slice(2 + 1), ...future] = [4, 5];\n     *\n     */\n    const newPast = past.slice(0, index);\n    const newFuture = [...past.slice(index + 1), ...future];\n    const newPresent = past[index];\n    this.history.past = newPast;\n    this.history.present = newPresent;\n    this.history.future = newFuture;\n    this.update();\n  }\n\n  jumpToFuture(index: number) {\n    if (index < 0 || index >= this.history.future.length) return;\n\n    const { past, future } = this.history;\n\n    const newPast = [...past, ...future.slice(0, index)];\n    const newPresent = future[index];\n    const newFuture = future.slice(index + 1);\n\n    this.history.past = newPast;\n    this.history.present = newPresent;\n    this.history.future = newFuture;\n    this.update('Redo');\n  }\n\n  clear() {\n    this.history = {\n      past: [],\n      present: null,\n      future: []\n    };\n  }\n\n  destroy(clearHistory = false) {\n    if (clearHistory) {\n      this.clear();\n    }\n    this.subscription.unsubscribe();\n  }\n\n  ignoreNext() {\n    this.skip = true;\n  }\n\n  private update(action = 'Undo') {\n    this.skipUpdate = true;\n    __globalState.setCustomAction({ type: `@StateHistory - ${action}` });\n    this.updateStore(this.history.present, this._entityId);\n    this.skipUpdate = false;\n  }\n}\n","import { ID, IDS } from '../../api/types';\nimport { QueryEntity } from '../../api/query-entity';\nimport { StateHistoryPlugin, StateHistoryParams } from './state-history-plugin';\nimport { toBoolean } from '../../internal/utils';\nimport { skip } from 'rxjs/operators';\nimport { EntityCollectionPlugin, EntityCollectionParams } from '../entity-collection-plugin';\n\nexport interface StateHistoryEntityParams extends StateHistoryParams {\n  entityIds?: EntityCollectionParams;\n}\n\nexport class EntityStateHistoryPlugin<E, P extends StateHistoryPlugin<E, any> = StateHistoryPlugin<E, any>> extends EntityCollectionPlugin<E, P> {\n  constructor(protected query: QueryEntity<any, E>, protected readonly params: StateHistoryEntityParams = {}) {\n    super(query, params.entityIds);\n    params.maxAge = toBoolean(params.maxAge) ? params.maxAge : 10;\n    this.activate();\n    this.selectIds()\n      .pipe(skip(1))\n      .subscribe(ids => this.activate(ids));\n  }\n\n  redo(ids?: IDS) {\n    this.forEachId(ids, e => e.redo());\n  }\n\n  undo(ids?: IDS) {\n    this.forEachId(ids, e => e.undo());\n  }\n\n  hasPast(id: ID) {\n    if (this.hasEntity(id)) {\n      return this.getEntity(id).hasPast;\n    }\n  }\n\n  hasFuture(id: ID) {\n    if (this.hasEntity(id)) {\n      return this.getEntity(id).hasFuture;\n    }\n  }\n\n  jumpToFuture(ids: IDS, index: number) {\n    this.forEachId(ids, e => e.jumpToFuture(index));\n  }\n\n  jumpToPast(ids: IDS, index: number) {\n    this.forEachId(ids, e => e.jumpToPast(index));\n  }\n\n  clear(ids?: IDS) {\n    this.forEachId(ids, e => e.clear());\n  }\n\n  destroy(ids?: IDS, clearHistory = false) {\n    this.forEachId(ids, e => e.destroy(clearHistory));\n  }\n\n  ignoreNext(ids?: IDS) {\n    this.forEachId(ids, e => e.ignoreNext());\n  }\n\n  protected instantiatePlugin(id: ID) {\n    return new StateHistoryPlugin<E, any>(this.query, this.params, id) as P;\n  }\n}\n","import { AkitaPlugin, Queries } from '../plugin';\nimport { QueryEntity } from '../../api/query-entity';\nimport { BehaviorSubject, Observable, Subject, Subscription, combineLatest } from 'rxjs';\nimport { distinctUntilChanged, map, skip } from 'rxjs/operators';\nimport { coerceArray, isFunction, isUndefined, toBoolean } from '../../internal/utils';\nimport { EntityParam } from '../entity-collection-plugin';\nimport { __globalState } from '../../internal/global-state';\nimport { Query } from '../../api/query';\n\ntype Head<StoreState = any, Entity = any> = StoreState | Partial<StoreState> | Entity;\n\nexport type DirtyCheckComparator<Entity> = (head: Entity, current: Entity) => boolean;\n\nexport type DirtyCheckParams<StoreState = any> = {\n  comparator?: DirtyCheckComparator<StoreState>;\n  watchProperty?: keyof StoreState | (keyof StoreState)[];\n};\n\nexport const dirtyCheckDefaultParams = {\n  comparator: (head, current) => JSON.stringify(head) !== JSON.stringify(current)\n};\n\nexport function getNestedPath(nestedObj, path: string) {\n  const pathAsArray: string[] = path.split('.');\n  return pathAsArray.reduce((obj, key) => (obj && obj[key] !== 'undefined' ? obj[key] : undefined), nestedObj);\n}\n\nexport type DirtyCheckResetParams<StoreState = any> = {\n  updateFn?: StoreState | ((head: StoreState, current: StoreState) => any);\n};\n\nexport class DirtyCheckPlugin<Entity = any, StoreState = any> extends AkitaPlugin<Entity, StoreState> {\n  private head: Head<StoreState, Entity>;\n  private dirty = new BehaviorSubject(false);\n  private subscription: Subscription;\n  private active = false;\n  private _reset = new Subject();\n\n  isDirty$: Observable<boolean> = this.dirty.asObservable().pipe(distinctUntilChanged());\n  reset$ = this._reset.asObservable();\n\n  constructor(protected query: Queries<Entity, StoreState>, private params?: DirtyCheckParams, private _entityId?: EntityParam) {\n    super(query);\n    this.params = { ...dirtyCheckDefaultParams, ...params };\n    if (this.params.watchProperty) {\n      let watchProp = coerceArray(this.params.watchProperty) as any[];\n      if (query instanceof QueryEntity && watchProp.includes('entities') && !watchProp.includes('ids')) {\n        watchProp.push('ids');\n      }\n      this.params.watchProperty = watchProp;\n    }\n  }\n\n  reset(params: DirtyCheckResetParams = {}) {\n    let currentValue = this.head;\n    if (isFunction(params.updateFn)) {\n      if (this.isEntityBased(this._entityId)) {\n        currentValue = params.updateFn(this.head, (this.getQuery() as QueryEntity<StoreState, Entity>).getEntity(this._entityId));\n      } else {\n        currentValue = params.updateFn(this.head, (this.getQuery() as Query<StoreState>).getSnapshot());\n      }\n    }\n    __globalState.setCustomAction({ type: `@DirtyCheck - Revert` });\n    this.updateStore(currentValue, this._entityId);\n    this._reset.next();\n  }\n\n  setHead() {\n    if (!this.active) {\n      this.activate();\n      this.active = true;\n    } else {\n      this.head = this._getHead();\n    }\n    this.updateDirtiness(false);\n    return this;\n  }\n\n  isDirty(): boolean {\n    return toBoolean(this.dirty.value);\n  }\n\n  hasHead() {\n    return toBoolean(this.getHead());\n  }\n\n  destroy() {\n    this.head = null;\n    this.subscription && this.subscription.unsubscribe();\n    this._reset && this._reset.complete();\n  }\n\n  isPathDirty(path: string) {\n    const head = this.getHead();\n    const current = (this.getQuery() as Query<StoreState>).getSnapshot();\n    const currentPathValue = getNestedPath(current, path);\n    const headPathValue = getNestedPath(head, path);\n\n    return this.params.comparator(currentPathValue, headPathValue);\n  }\n\n  protected getHead() {\n    return this.head;\n  }\n\n  private activate() {\n    this.head = this._getHead();\n    /** if we are tracking specific properties select only the relevant ones */\n    const source = this.params.watchProperty\n      ? (this.params.watchProperty as (keyof StoreState)[]).map(prop =>\n          this.query.select(state => state[prop]).pipe(\n            map(val => ({\n              val,\n              __akitaKey: prop\n            }))\n          )\n        )\n      : [this.selectSource(this._entityId)];\n    this.subscription = combineLatest(...source)\n      .pipe(skip(1))\n      .subscribe((currentState: any[]) => {\n        if (isUndefined(this.head)) return;\n        /** __akitaKey is used to determine if we are tracking a specific property or a store change */\n        const isChange = currentState.some(state => {\n          const head = state.__akitaKey ? this.head[state.__akitaKey as any] : this.head;\n          const compareTo = state.__akitaKey ? state.val : state;\n\n          return this.params.comparator(head, compareTo);\n        });\n\n        this.updateDirtiness(isChange);\n      });\n  }\n\n  private updateDirtiness(isDirty: boolean) {\n    this.dirty.next(isDirty);\n  }\n\n  private _getHead(): Head<StoreState, Entity> {\n    let head: Head<StoreState, Entity> = this.getSource(this._entityId);\n    if (this.params.watchProperty) {\n      head = this.getWatchedValues(head as StoreState);\n    }\n    return head;\n  }\n\n  private getWatchedValues(source: StoreState): Partial<StoreState> {\n    return (this.params.watchProperty as (keyof StoreState)[]).reduce(\n      (watched, prop) => {\n        watched[prop] = source[prop];\n        return watched;\n      },\n      {} as Partial<StoreState>\n    );\n  }\n}\n","import { HashMap, ID, IDS } from '../../api/types';\nimport {\n  DirtyCheckComparator,\n  dirtyCheckDefaultParams,\n  DirtyCheckPlugin,\n  DirtyCheckResetParams,\n  getNestedPath\n} from './dirty-check-plugin';\nimport { QueryEntity } from '../../api/query-entity';\nimport { EntityCollectionPlugin } from '../entity-collection-plugin';\nimport { map, skip } from 'rxjs/operators';\nimport { Observable } from 'rxjs';\n\nexport type DirtyCheckCollectionParams<E> = {\n  comparator?: DirtyCheckComparator<E>;\n  entityIds?: ID | ID[];\n};\n\nexport class EntityDirtyCheckPlugin<E, P extends DirtyCheckPlugin<E, any> = DirtyCheckPlugin<E, any>> extends EntityCollectionPlugin<E, P> {\n  /**\n   * @deprecated Use someDirty$ instead\n   */\n  isSomeDirty$: Observable<boolean> = this.query.select(state => state.entities).pipe(map((entities: any) => this.checkSomeDirty(entities)));\n\n  someDirty$ = this.isSomeDirty$;\n  someDirty = this.isSomeDirty;\n\n  constructor(protected query: QueryEntity<any, E>, private readonly params: DirtyCheckCollectionParams<E> = {}) {\n    super(query, params.entityIds);\n    this.params = { ...dirtyCheckDefaultParams, ...params };\n    this.activate();\n    this.selectIds()\n      .pipe(skip(1))\n      .subscribe(ids => {\n        this.rebase(ids, { afterAdd: plugin => plugin.setHead() });\n      });\n  }\n\n  setHead(ids?: IDS) {\n    this.forEachId(ids, e => e.setHead());\n    return this;\n  }\n\n  hasHead(id: ID): boolean {\n    if (this.entities.has(id)) {\n      const entity = this.getEntity(id);\n      return entity.hasHead();\n    }\n\n    return false;\n  }\n\n  reset(ids?: IDS, params: DirtyCheckResetParams = {}) {\n    this.forEachId(ids, e => e.reset(params));\n  }\n\n  isDirty(id: ID): Observable<boolean>;\n  isDirty(id: ID, asObservable: true): Observable<boolean>;\n  isDirty(id: ID, asObservable: false): boolean;\n  isDirty(id: ID, asObservable = true): Observable<boolean> | boolean {\n    if (this.entities.has(id)) {\n      const entity = this.getEntity(id);\n      return asObservable ? entity.isDirty$ : entity.isDirty();\n    }\n\n    return false;\n  }\n\n  /**\n   * @deprecated Use someDirty() instead\n   */\n  isSomeDirty(): boolean {\n    const entities = this.query.getAll({ asObject: true });\n    return this.checkSomeDirty(entities);\n  }\n\n  isPathDirty(id: ID, path: string) {\n    if (this.entities.has(id)) {\n      const head = (this.getEntity(id) as any).getHead();\n      const current = this.query.getEntity(id);\n      const currentPathValue = getNestedPath(current, path);\n      const headPathValue = getNestedPath(head, path);\n\n      return this.params.comparator(currentPathValue, headPathValue);\n    }\n\n    return null;\n  }\n\n  destroy(ids?: IDS) {\n    this.forEachId(ids, e => e.destroy());\n  }\n\n  protected instantiatePlugin(id: ID): P {\n    return new DirtyCheckPlugin(this.query, this.params, id) as P;\n  }\n\n  private checkSomeDirty(entities: HashMap<E>): boolean {\n    const entitiesIds = this.resolvedIds();\n    for (const id of entitiesIds) {\n      const dirty = this.params.comparator((this.getEntity(id) as any).getHead(), entities[id]);\n      if (dirty) {\n        return true;\n      }\n    }\n    return false;\n  }\n}\n","import { Observable } from 'rxjs';\n\nfunction serialize(object) {\n  return JSON.stringify(object, function(key, value) {\n    if (typeof value === 'function') {\n      return value.toString();\n    }\n    return value;\n  });\n}\n\nfunction createWorker() {\n  const blob = new Blob(\n    [\n      `self.onmessage = function(e) {\n\n      function deserialize(str) {\n        return JSON.parse(str || '', function(key, value) {\n          if (value &&\n            typeof value === \"string\" &&\n            value.substr(0, 8) == \"function\") {\n            var startBody = value.indexOf('{') + 1;\n            var endBody = value.lastIndexOf('}');\n            var startArgs = value.indexOf('(') + 1;\n            var endArgs = value.indexOf(')');\n            return new Function(value.substring(startArgs, endArgs), value.substring(startBody, endBody));\n          }\n          return value;\n        });\n      }\n\n      var deserialized = deserialize(e.data);\n      var mapped = deserialized.data.map(function(d) {\n        return deserialized.factory(d);\n      });\n\n      self.postMessage(mapped);\n    }`\n    ],\n    {\n      type: 'text/javascript'\n    }\n  );\n\n  const url = URL.createObjectURL(blob);\n  return new Worker(url);\n}\n\n/**\n *  @example\n *   const mockTodos = Array.from({length: 10000}, (_, x) => ({id: x}));\n *\n *   of(mockTodos).pipe(mapInWorker<Todo>(createTodo))\n *   .subscribe(res => console.log(res));\n */\nexport function mapInWorker<T>(factoryFn: Function) {\n  return function(source): Observable<T[]> {\n    return new Observable(observer => {\n      const worker = createWorker();\n\n      worker.onmessage = function(e) {\n        observer.next(e.data);\n        observer.complete();\n        worker.terminate();\n      };\n\n      worker.onerror = function(err) {\n        observer.error(err);\n        observer.complete();\n        worker.terminate();\n      };\n\n      return source.subscribe(value => {\n        const input = {\n          factory: factoryFn,\n          data: value\n        };\n        const serialized = serialize(input);\n\n        worker.postMessage(serialized);\n      });\n    });\n  };\n}\n","import { isNumber } from '../internal/utils';\nimport { __stores__ } from './store';\nimport { applyTransaction } from './transaction';\n\n/**\n * @example\n *\n * this.peopleStore.update(id, person => ({\n *   guests: increment(person.guests)\n * }));\n */\nexport function increment(value: number, params: { maxValue: number | undefined } = { maxValue: undefined }) {\n  if (isNumber(value) === false) return;\n  if (params.maxValue && value === params.maxValue) return value;\n  return value + 1;\n}\n\n/**\n * @example\n *\n * this.peopleStore.update(id, person => ({\n *   guests: decrement(person.guests)\n * }));\n */\nexport function decrement(value, params: { allowNegative: boolean } = { allowNegative: false }) {\n  if (isNumber(value) === false) return;\n  if (params.allowNegative === false && value === 0) {\n    return value;\n  }\n  return value - 1;\n}\n\n/**\n * Generate random guid\n */\nexport function guid() {\n  return 'xxxxxx4xyx'.replace(/[xy]/g, c => {\n    const r = (Math.random() * 16) | 0,\n      v = c == 'x' ? r : (r & 0x3) | 0x8;\n    return v.toString(16);\n  });\n}\n\nexport interface ResetStoresParams {\n  /**\n   *  By default the whole state is resetted, use this param to exclude stores that you don't want to reset.\n   */\n  exclude: string[];\n}\n\n/**\n *\n * @param options\n */\nexport function resetStores(options?: Partial<ResetStoresParams>) {\n  const defaults: ResetStoresParams = {\n    exclude: []\n  };\n\n  options = Object.assign({}, defaults, options);\n  const stores = Object.keys(__stores__);\n\n  applyTransaction(() => {\n    for (const store of stores) {\n      const s = __stores__[store];\n      if (!options.exclude) {\n        s.reset();\n      } else {\n        if (options.exclude.indexOf(s.storeName) === -1) {\n          s.reset();\n        }\n      }\n    }\n  });\n}\n"]}