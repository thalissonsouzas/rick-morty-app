{"version":3,"file":"datorama-akita.umd.js.map","sources":["node_modules/tslib/tslib.es6.js","ng://@datorama/akita/src/internal/utils.ts","ng://@datorama/akita/src/internal/error.ts","ng://@datorama/akita/src/internal/crud.ts","ng://@datorama/akita/src/internal/global-state.ts","ng://@datorama/akita/src/internal/transaction.internal.ts","ng://@datorama/akita/src/internal/deep-freeze.ts","ng://@datorama/akita/src/api/store-config.ts","ng://@datorama/akita/src/api/config.ts","ng://@datorama/akita/src/api/store.ts","ng://@datorama/akita/src/api/entity-store.ts","ng://@datorama/akita/src/internal/sort.ts","ng://@datorama/akita/src/api/memoize.ts","ng://@datorama/akita/src/api/query-config.ts","ng://@datorama/akita/src/api/query.ts","ng://@datorama/akita/src/api/query-entity.ts","ng://@datorama/akita/src/api/transaction.ts","ng://@datorama/akita/src/api/arrays.ts","ng://@datorama/akita/src/api/operators.ts","ng://@datorama/akita/src/internal/action.ts","ng://@datorama/akita/src/api/worker.ts","ng://@datorama/akita/src/api/snapshot-manager.ts","ng://@datorama/akita/src/plugins/plugin.ts","ng://@datorama/akita/src/plugins/paginator/paginator-plugin.ts","ng://@datorama/akita/src/plugins/persist-form/persist-ng-form-plugin.ts","ng://@datorama/akita/src/enhancers/persist-state.ts","ng://@datorama/akita/src/enhancers/devtools.ts","ng://@datorama/akita/src/plugins/entity-collection-plugin.ts","ng://@datorama/akita/src/plugins/state-history/state-history-plugin.ts","ng://@datorama/akita/src/plugins/state-history/entity-state-history-plugin.ts","ng://@datorama/akita/src/plugins/dirty-check/dirty-check-plugin.ts","ng://@datorama/akita/src/plugins/dirty-check/entity-dirty-check-plugin.ts","ng://@datorama/akita/src/api/store-utils.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { Observable } from 'rxjs';\nimport { ActiveState, EntityState, HashMap, ID } from '../api/types';\n\n/** Wraps the provided value in an array, unless the provided _value is an array. */\nexport function coerceArray<T>(value: T | T[]): T[] {\n  return Array.isArray(value) ? value : [value];\n}\n\n/** Check if a value is an object */\nexport function isObject(value: any) {\n  return Object.prototype.toString.call(value) === '[object Object]';\n}\n\nexport function isPlainObject(value) {\n  return toBoolean(value) && value.constructor.name === 'Object';\n}\n\nexport function isFunction(value): value is Function {\n  return typeof value === 'function';\n}\n\nexport function toBoolean(value: any): boolean {\n  return value != null && `${value}` !== 'false';\n}\n\nexport function isUndefined(value) {\n  return value === undefined;\n}\n\nexport function isNil(v) {\n  return v === null || v === undefined;\n}\n\n/**\n * Check if entity exists\n */\nexport function entityExists<E>(id: ID, entities: HashMap<E>) {\n  return entities.hasOwnProperty(id);\n}\n\n/**\n * Observable that emits empty value and complete\n */\nexport function noop<T>(): Observable<T> {\n  return new Observable(observer => {\n    observer.next();\n    observer.complete();\n  });\n}\n\nexport function isObservable(value) {\n  return toBoolean(value) && isFunction(value.subscribe);\n}\n\nexport function isString(val: string | any): val is string {\n  return typeof val === 'string';\n}\n\nexport function isNumber(value) {\n  return typeof value === 'number';\n}\n\nexport function isDefined(val) {\n  return val !== null && typeof val !== 'undefined';\n}\n\n/**\n * Check if the active entity exist\n */\nexport function resetActive<E>(state: EntityState<E>) {\n  return isActiveState(state) && entityExists((state as ActiveState).active, state.entities) === false;\n}\n\n/**\n * Check if the store supports active entity\n */\nexport function isActiveState<E>(state: EntityState<E>) {\n  return (state as ActiveState).hasOwnProperty('active');\n}\n\n/**\n * setValue(state, 'todos.ui', { filter: {}})\n */\nexport const setValue = (obj: any, prop: string, val: any) => {\n  const split = prop.split('.');\n\n  if (split.length === 1) return val;\n\n  obj = { ...obj };\n\n  const lastIndex = split.length - 2;\n  const removeStoreName = prop.split('.').slice(1);\n\n  removeStoreName.reduce((acc, part, index) => {\n    if (index === lastIndex) {\n      acc[part] = val;\n    } else {\n      acc[part] = { ...acc[part] };\n    }\n\n    return acc && acc[part];\n  }, obj);\n\n  return obj;\n};\n\n/**\n * getValue(state, 'todos.ui')\n */\nexport const getValue = (obj: any, prop: string) => {\n  /** return the whole state  */\n  if (prop.split('.').length === 1) {\n    return obj;\n  }\n  const removeStoreName = prop\n    .split('.')\n    .slice(1)\n    .join('.');\n  return removeStoreName.split('.').reduce((acc: any, part: string) => acc && acc[part], obj);\n};\n","import { entityExists, isObject, toBoolean } from './utils';\nimport { EntityState, ID } from '../api/types';\n\nexport class AkitaError extends Error {\n  constructor(message: string) {\n    super(message);\n  }\n}\n\nexport class AkitaImmutabilityError extends AkitaError {\n  constructor(storeName) {\n    super(`The new state should be immutable. Make sure to return a new immutable state. \\n store: \\n ${storeName}`);\n  }\n}\n\nexport class AkitaEntityNotExistsError extends AkitaError {\n  constructor(id) {\n    super(`Entity ${id} does not exists`);\n  }\n}\n\nexport class AkitaNoActiveError extends AkitaError {\n  constructor() {\n    super(`Active is null/undefined`);\n  }\n}\n\nexport class AkitaInvalidEntityState extends AkitaError {\n  constructor() {\n    super(`Entity state is invalid`);\n  }\n}\n\nexport class AkitaUpdateIdKeyError extends AkitaError {\n  constructor() {\n    super(`Updating entity id is not permitted when updating many entities`);\n  }\n}\n\nexport function assertEntityExists(id: ID, entities) {\n  if (!entityExists(id, entities)) {\n    throw new AkitaEntityNotExistsError(id);\n  }\n}\n\nexport function assertActive(store) {\n  if (!toBoolean(store.active)) {\n    throw new AkitaNoActiveError();\n  }\n}\n\nexport function assertEntityState(state: EntityState<any>) {\n  const assertEntities = isObject(state);\n\n  if (!assertEntities) {\n    throw new AkitaInvalidEntityState();\n  }\n}\n\nexport function assertDecorator(name: string, className: string) {\n  if (!name) {\n    console.error(`@StoreConfig({ name }) is missing in ${className}`);\n  }\n}\n","import { Entities, EntityState, HashMap, ID, Newable, AddOptions } from '../api/types';\nimport { AkitaUpdateIdKeyError, assertEntityExists, assertEntityState } from './error';\nimport { entityExists, isFunction, isPlainObject, resetActive } from './utils';\n\nexport class CRUD {\n  _set<S, E>(state: S, entities: E[] | HashMap<E> | Entities<E>, entityClass: Newable<E> | undefined, idKey): S {\n    let ids, normalized;\n\n    if ((entities as Entities<E>).ids && (entities as Entities<E>).entities) {\n      ids = (entities as Entities<E>).ids;\n      normalized = (entities as Entities<E>).entities;\n    } else {\n      const isArray = Array.isArray(entities);\n      normalized = entities;\n\n      if (isArray) {\n        normalized = this.keyBy(entities as E[], entityClass, idKey) as E[];\n      } else {\n        assertEntityState(entities);\n      }\n\n      ids = isArray ? (entities as E[]).map(entity => entity[idKey]) : Object.keys(normalized as HashMap<E>).map(id => entities[id][idKey]);\n    }\n\n    const newState = {\n      ...(state as any),\n      entities: normalized,\n      ids,\n      loading: false\n    };\n\n    if (resetActive(newState)) {\n      newState.active = null;\n    }\n\n    return newState;\n  }\n\n  _replaceEntity<T extends EntityState>(state: T, id: ID, entity): T {\n    return {\n      ...(state as any),\n      entities: {\n        ...state.entities,\n        [id]: entity\n      }\n    };\n  }\n\n  _add<S extends EntityState, E>(state: S, entities: E[], idKey, options: AddOptions = {}): S {\n    let addedEntities = {};\n    let addedIds = [];\n\n    for (let i = 0; i < entities.length; i++) {\n      const entity = entities[i];\n      const entityId = entity[idKey];\n\n      if (!entityExists(entityId, state.entities)) {\n        addedEntities[entityId] = entity;\n        if (options.prepend) addedIds.unshift(entityId);\n        else addedIds.push(entityId);\n      }\n    }\n\n    return {\n      ...(state as any),\n      entities: {\n        ...state.entities,\n        ...addedEntities\n      },\n      ids: options.prepend ? [...addedIds, ...state.ids] : [...state.ids, ...addedIds]\n    };\n  }\n\n  _update<T extends EntityState>(state: T, ids: ID[], newStateOrFn: object | ((e: Readonly<any>) => object), idKey: string): T {\n    const updatedEntities = {};\n\n    let isUpdatingIdKey = false;\n    let idToUpdate: ID;\n\n    for (let i = 0; i < ids.length; i++) {\n      const id = ids[i];\n      idToUpdate = id;\n      assertEntityExists(id, state.entities);\n\n      const oldEntity = state.entities[id];\n      const newState = isFunction(newStateOrFn) ? newStateOrFn(oldEntity) : newStateOrFn;\n\n      if (newState.hasOwnProperty(idKey) && newState[idKey] !== oldEntity[idKey]) {\n        if (ids.length > 1) {\n          throw new AkitaUpdateIdKeyError();\n        }\n        isUpdatingIdKey = true;\n        idToUpdate = newState[idKey];\n      }\n\n      let newEntity;\n\n      const merged = {\n        ...oldEntity,\n        ...newState\n      };\n\n      if (isPlainObject(oldEntity)) {\n        newEntity = merged;\n      } else {\n        /**\n         * In case that new state is class of it's own, there's\n         * a possibility that it will be different than the old\n         * class.\n         * For example, Old state is an instance of animal class\n         * and new state is instance of person class.\n         * To avoid run over new person class with the old animal\n         * class we check if the new state is a class of it's own.\n         * If so, use it. Otherwise, use the old state class\n         */\n        if (isPlainObject(newState)) {\n          newEntity = new oldEntity.constructor(merged);\n        } else {\n          newEntity = new (newState as any).constructor(merged);\n        }\n      }\n\n      updatedEntities[idToUpdate] = newEntity;\n    }\n\n    let updatedIds = state.ids;\n    let stateEntities = state.entities;\n    if (isUpdatingIdKey) {\n      const [id] = ids;\n      const { [id]: deletedEntity, ...rest } = state.entities;\n      stateEntities = rest;\n      updatedIds = state.ids.map(current => (current === id ? idToUpdate : current));\n    }\n\n    return {\n      ...(state as any),\n      entities: {\n        ...stateEntities,\n        ...updatedEntities\n      },\n      ids: updatedIds\n    };\n  }\n\n  _remove<T extends EntityState>(state: T, ids: ID[] | null): T {\n    if (!ids) return this._removeAll(state);\n\n    const removed = ids.reduce((acc, id) => {\n      const { [id]: entity, ...rest } = acc;\n      return rest;\n    }, state.entities);\n    const newState = {\n      ...(state as any),\n      entities: removed,\n      ids: state.ids.filter(current => ids.indexOf(current) === -1)\n    };\n\n    if (resetActive(newState)) {\n      newState.active = null;\n    }\n\n    return newState;\n  }\n\n  private _removeAll<T extends EntityState>(state: T): T {\n    const newState = {\n      ...(state as any),\n      entities: {},\n      ids: [],\n      active: null\n    };\n\n    return newState;\n  }\n\n  private keyBy(entities: any[], entityClass?: Newable<any>, id = 'id') {\n    const acc = {};\n\n    for (let i = 0, len = entities.length; i < len; i++) {\n      const entity = entities[i];\n      acc[entity[id]] = entityClass ? new entityClass(entity) : entity;\n    }\n\n    return acc;\n  }\n}\n\nexport const _crud = new CRUD();\n","import { Subject } from 'rxjs';\n\nexport type Action = {\n  type: string;\n  entityId?: any[] | any;\n  payload?: any;\n};\n\nexport class AkitaGlobals {\n  private customAction;\n  currentAction: Action;\n  skipAction = false;\n  skipTransactionMsg = false;\n  currentT = [];\n  activeTransactions = 0;\n  batchTransaction: Subject<boolean>;\n\n  setAction(_action: Action) {\n    if (this.customAction) {\n      this.currentAction = this.customAction;\n      this.customAction = null;\n      this.skipTransactionMsg = false;\n    } else {\n      if (this.activeTransactions === 0) {\n        this.currentAction = _action;\n      }\n    }\n\n    if (this.activeTransactions > 0) {\n      this.currentT.push(_action);\n    }\n  }\n\n  setCustomAction(action: Action, skipTransactionMsg = false) {\n    this.currentAction = this.customAction = action;\n    this.skipTransactionMsg = skipTransactionMsg;\n  }\n\n  setSkipAction(skip = true) {\n    this.skipAction = skip;\n  }\n}\n\nexport const __globalState = new AkitaGlobals();\n","import { __globalState } from './global-state';\nimport { Observable, Subject, of } from 'rxjs';\n\n/**\n * Start a new transaction batch\n */\nexport function startBatch() {\n  if (!isTransactionInProcess()) {\n    __globalState.batchTransaction = new Subject();\n  }\n  __globalState.activeTransactions++;\n}\n\n/**\n * End the transaction\n */\nexport function endBatch() {\n  if (--__globalState.activeTransactions === 0) {\n    __globalState.batchTransaction.next(true);\n    __globalState.batchTransaction.complete();\n  }\n}\n\n/**\n * Whether we're inside batch\n */\nexport function isTransactionInProcess() {\n  return __globalState.activeTransactions > 0;\n}\n\n/**\n */\nexport function commit(): Observable<boolean> {\n  return __globalState.batchTransaction ? __globalState.batchTransaction.asObservable() : of(true);\n}\n","export function deepFreeze(o) {\n  Object.freeze(o);\n\n  var oIsFunction = typeof o === 'function';\n  var hasOwnProp = Object.prototype.hasOwnProperty;\n\n  Object.getOwnPropertyNames(o).forEach(function(prop) {\n    if (\n      hasOwnProp.call(o, prop) &&\n      (oIsFunction ? prop !== 'caller' && prop !== 'callee' && prop !== 'arguments' : true) &&\n      o[prop] !== null &&\n      (typeof o[prop] === 'object' || typeof o[prop] === 'function') &&\n      !Object.isFrozen(o[prop])\n    ) {\n      deepFreeze(o[prop]);\n    }\n  });\n\n  return o;\n}\n","export type StoreConfigOptions = {\n  name: string;\n  resettable?: boolean;\n  idKey?: string;\n};\n\nexport const configKey = 'akitaConfig';\n\nexport function StoreConfig(metadata: StoreConfigOptions) {\n  return function(constructor: Function) {\n    constructor[configKey] = { idKey: 'id' };\n\n    for (let i = 0, keys = Object.keys(metadata); i < keys.length; i++) {\n      const key = keys[i];\n      /* name is preserved read only key */\n      if (key === 'name') {\n        constructor[configKey]['storeName'] = metadata[key];\n      } else {\n        constructor[configKey][key] = metadata[key];\n      }\n    }\n  };\n}\n","export interface AkitaConfig {\n  /**\n   * Whether to allowed the reset() stores functionality\n   */\n  resettable?: boolean;\n}\n\nlet CONFIG: AkitaConfig = {\n  resettable: false\n};\n\nexport function akitaConfig(config: AkitaConfig) {\n  CONFIG = { ...CONFIG, ...config };\n}\n\nexport function getAkitaConfig() {\n  return CONFIG;\n}\n","import { HashMap, ID } from './types';\nimport { BehaviorSubject, Observable, ReplaySubject } from 'rxjs';\nimport { distinctUntilChanged, map } from 'rxjs/operators';\nimport { AkitaError, AkitaImmutabilityError, assertDecorator } from '../internal/error';\nimport { commit, isTransactionInProcess } from '../internal/transaction.internal';\nimport { isFunction, isPlainObject } from '../internal/utils';\nimport { deepFreeze } from '../internal/deep-freeze';\nimport { configKey, StoreConfigOptions } from './store-config';\nimport { __globalState } from '../internal/global-state';\nimport { getAkitaConfig } from './config';\n\nlet __DEV__ = true;\nconst isNotBrowser = typeof window === 'undefined';\n\nexport const __stores__: { [storeName: string]: Store<any> } = {};\n\nexport const enum Actions {\n  NEW_STORE,\n  DELETE_STORE,\n  NEW_STATE\n}\n\nexport type Action = {\n  type: Actions;\n  payload: HashMap<any>;\n};\n\nexport const rootDispatcher = new ReplaySubject<Action>();\n\nfunction nextState(storeName, initialState = false) {\n  return {\n    type: Actions.NEW_STATE,\n    payload: {\n      name: storeName,\n      initialState\n    }\n  };\n}\n\n/**\n * Enable production mode to disable objectFreeze\n */\nexport function enableAkitaProdMode() {\n  __DEV__ = false;\n}\n\nexport function isDev() {\n  return __DEV__;\n}\n\n/**\n * The Root Store that every sub store needs to inherit and\n * invoke `super` with the initial state.\n */\nexport class Store<S> {\n  /** Manage the store with BehaviorSubject */\n  private store: BehaviorSubject<Readonly<S>>;\n\n  /** The current state value */\n  private storeValue: S;\n\n  /** Whether we are inside transaction **/\n  private inTransaction = false;\n\n  private _isPristine = true;\n\n  private readonly _initialState: S;\n\n  /**\n   *\n   * Initial the store with the state\n   */\n  constructor(initialState, private options: { idKey?: string; storeName?: string } = {}) {\n    __globalState.setAction({ type: '@@INIT' });\n    __stores__[this.storeName] = this;\n    this.setState(() => initialState);\n    rootDispatcher.next({\n      type: Actions.NEW_STORE,\n      payload: { store: this }\n    });\n    isDev() && assertDecorator(this.storeName, this.constructor.name);\n    if (this.isRessetable()) {\n      this._initialState = initialState;\n    }\n  }\n\n  setLoading(loading = false) {\n    if (loading !== (this._value() as S & { loading: boolean }).loading) {\n      isDev() && __globalState.setAction({ type: 'Set Loading' });\n      this.setState(s => ({ ...(s as object), loading } as any));\n    }\n  }\n\n  /**\n   * Update the store's error state.\n   */\n  setError<T>(error: T) {\n    if (error !== (this._value() as S & { error: any }).error) {\n      isDev() && __globalState.setAction({ type: 'Set Error' });\n      this.setState(s => ({ ...(s as object), error } as any));\n    }\n  }\n\n  /**\n   * Select a slice from the store\n   *\n   * @example\n   * this.store.select(state => state.entities)\n   *\n   */\n  _select<R>(project: (store: S) => R): Observable<R> {\n    return this.store$.pipe(\n      map(project),\n      distinctUntilChanged()\n    );\n  }\n\n  _value(): S {\n    return this.storeValue;\n  }\n\n  get config(): StoreConfigOptions {\n    return this.constructor[configKey];\n  }\n\n  get storeName() {\n    return this.options.storeName || (this.config && this.config['storeName']);\n  }\n\n  get idKey() {\n    /** backward compatibility */\n    const newIdKey = this.config && this.config.idKey;\n    if (!newIdKey) {\n      return this.options.idKey || 'id';\n    }\n    return newIdKey;\n  }\n\n  get isPristine() {\n    return this._isPristine;\n  }\n\n  /**\n   * `setState()` is the only way to update a store; It receives a callback function,\n   * which gets the current state, and returns a new immutable state,\n   * which will be the new value of the store.\n   */\n  setState(newStateFn: (state: Readonly<S>) => S, _rootDispatcher = true) {\n    const prevState = this._value();\n    this.storeValue = __DEV__ ? deepFreeze(newStateFn(this._value())) : newStateFn(this._value());\n\n    if (prevState === this.storeValue) {\n      throw new AkitaImmutabilityError(this.storeName);\n    }\n\n    if (!this.store) {\n      this.store = new BehaviorSubject(this.storeValue);\n      rootDispatcher.next(nextState(this.storeName, true));\n      return;\n    }\n\n    if (isTransactionInProcess()) {\n      this.handleTransaction();\n      return;\n    }\n\n    this.dispatch(this.storeValue, _rootDispatcher);\n  }\n\n  /**\n   * Resets the store to it's initial state and set the store to a pristine state.\n   */\n  reset() {\n    if (this.isRessetable()) {\n      __globalState.setAction({ type: 'Reset Store' });\n      this.setState(() => Object.assign({}, this._initialState));\n      this.setPristine();\n    } else {\n      throw new AkitaError(`You need to enable the reset functionality`);\n    }\n  }\n\n  /**\n   * This method is a shortcut for `setState()`.\n   * It can be useful when you want to pass the whole state object instead of merging a partial state.\n   *\n   * @example\n   * this.store.update(newState)\n   */\n  update(newState: (state: Readonly<S>) => Partial<S>);\n  update(newState: Partial<S>);\n  update(id: ID | ID[] | null, newState: Partial<S>);\n  update(newStateOrId: Partial<S> | ID | ID[] | null | ((state: Readonly<S>) => Partial<S>), newState?: Partial<S>) {\n    __globalState.setAction({ type: 'Update Store' });\n    this.setState(state => {\n      let value = isFunction(newStateOrId) ? newStateOrId(state) : newStateOrId;\n      let merged = Object.assign({}, state, value);\n      return isPlainObject(state) ? merged : new (state as any).constructor(merged);\n    });\n    this.setDirty();\n  }\n\n  /**\n   * Sets the store to a pristine state.\n   */\n  setPristine() {\n    this._isPristine = true;\n  }\n\n  /**\n   * Sets the store to a dirty state, indicating that it is not pristine.\n   */\n  setDirty() {\n    this._isPristine = false;\n  }\n\n  destroy = this.ngOnDestroy;\n\n  private dispatch(state: S, _rootDispatcher = true) {\n    this.store.next(state);\n    if (_rootDispatcher) {\n      rootDispatcher.next(nextState(this.storeName));\n      isDev() && __globalState.setAction({ type: 'Set State' });\n    }\n  }\n\n  private get store$() {\n    return this.store.asObservable();\n  }\n\n  /**\n   * When the transaction ends dispatch the final value once\n   */\n  private watchTransaction() {\n    commit().subscribe(() => {\n      this.inTransaction = false;\n      if (isDev() && !__globalState.skipTransactionMsg) {\n        __globalState.setAction({ type: '@Transaction' });\n      }\n      this.dispatch(this._value());\n      __globalState.currentT = [];\n      __globalState.skipTransactionMsg = false;\n    });\n  }\n\n  private isRessetable() {\n    return this.config.resettable || getAkitaConfig().resettable;\n  }\n\n  /**\n   * Listen to the transaction stream\n   */\n  private handleTransaction() {\n    if (!this.inTransaction) {\n      this.watchTransaction();\n      this.inTransaction = true;\n    }\n  }\n\n  ngOnDestroy() {\n    if (isNotBrowser) return;\n    if (!(window as any).hmrEnabled && this === __stores__[this.storeName]) {\n      delete __stores__[this.storeName];\n      rootDispatcher.next({\n        type: Actions.DELETE_STORE,\n        payload: { storeName: this.storeName }\n      });\n    }\n  }\n}\n","import { _crud } from '../internal/crud';\nimport { AkitaImmutabilityError, assertActive } from '../internal/error';\nimport { Action, __globalState } from '../internal/global-state';\nimport { coerceArray, entityExists, isFunction, isNil, isObject, isUndefined, toBoolean } from '../internal/utils';\nimport { isDev, Store } from './store';\nimport { ActiveState, Entities, EntityState, HashMap, ID, Newable, AddOptions, SetActiveOptions } from './types';\n\n/**\n * The Root Store that every sub store needs to inherit and\n * invoke `super` with the initial state.\n */\nexport class EntityStore<S extends EntityState<E>, E, ActiveEntity = ID> extends Store<S> {\n  /**\n   *\n   * Initiate the store with the state\n   */\n  constructor(initialState = {}, options: { idKey?: string; storeName?: string } = {}) {\n    super({ ...getInitialEntitiesState(), ...initialState }, options);\n  }\n\n  get entities() {\n    return this._value().entities;\n  }\n\n  /**\n   *\n   * Replace current collection with provided collection\n   *\n   * @example\n   * this.store.set([Entity, Entity]);\n   * this.store.set({1: Entity, 2: Entity});\n   * this.store.set([{id: 1}, {id: 2}], { entityClass: Product });\n   *\n   */\n  set(entities: E[] | HashMap<E> | Entities<E>, options: { entityClass?: Newable<E> | undefined } = {}) {\n    isDev() && __globalState.setAction({ type: 'Set Entities' });\n    this.setState(state => _crud._set(state, isNil(entities) ? [] : entities, options.entityClass, this.idKey));\n    this.setDirty();\n  }\n\n  /**\n   * Create or replace an entity in the store.\n   *\n   * @example\n   * this.store.createOrReplace(3, Entity);\n   *\n   */\n  createOrReplace(id: ID, entity: E) {\n    if (!entityExists(id, this._value().entities)) {\n      this.addWhenNotExists(id, entity);\n    } else {\n      isDev() && __globalState.setAction({ type: 'Create or Replace Entity', entityId: [id] });\n      this.setState(state => _crud._replaceEntity(state, id, entity));\n    }\n  }\n\n  /**\n   *\n   * Insert or Update\n   */\n  upsert(id: ID, entityOrFn: Partial<E> | ((entity: Readonly<E>) => Partial<E>)) {\n    if (!entityExists(id, this._value().entities)) {\n      const resolve = isFunction(entityOrFn) ? (entityOrFn as Function)({}) : entityOrFn;\n      this.addWhenNotExists(id, resolve);\n    } else {\n      this.update(id, entityOrFn as any);\n    }\n  }\n\n  /**\n   * Add an entity or entities to the store.\n   *\n   * @example\n   * this.store.add([Entity, Entity]);\n   * this.store.add(Entity);\n   * this.store.add(Entity, { prepend: true });\n   */\n  add(entities: E[] | E, options?: AddOptions) {\n    const toArray = coerceArray(entities);\n\n    if (toArray.length === 0) return;\n    /**  If we pass entities that already exist, we should ignore them */\n    const allExists = toArray.every(entity => this._value().ids.indexOf(entity[this.idKey]) > -1);\n    if (allExists) return;\n\n    isDev() && __globalState.setAction({ type: 'Add Entity' });\n    this.setState(state => _crud._add<S, E>(state, toArray, this.idKey, options));\n  }\n\n  /**\n   *\n   * Update an entity or entities in the store.\n   *\n   * @example\n   * this.store.update(3, {\n   *   name: 'New Name'\n   * });\n   *\n   *  this.store.update(3, entity => {\n   *    return {\n   *      config: {\n   *        ...entity.filter,\n   *        date\n   *      }\n   *    }\n   *  });\n   *\n   * this.store.update([1,2,3], {\n   *   name: 'New Name'\n   * });\n   *\n   * this.store.update(e => e.name === 'value', {\n   *   name: 'New Name'\n   * });\n   *\n   * this.store.update(null, {\n   *   name: 'New Name'\n   * });\n   *\n   */\n  update(id: ID | ID[] | null, newStateFn: ((entity: Readonly<E>) => Partial<E>));\n  update(id: ID | ID[] | null, newState: Partial<E>);\n  update(id: ID | ID[] | null, newState: Partial<S>);\n  update(newState: (state: Readonly<S>) => Partial<S>);\n  update(predicate: ((entity: Readonly<E>) => boolean), newStateFn: ((entity: Readonly<E>) => Partial<E>));\n  update(predicate: ((entity: Readonly<E>) => boolean), newState: Partial<E>);\n  update(predicate: ((entity: Readonly<E>) => boolean), newState: Partial<S>);\n  update(newState: Partial<S>);\n  update(\n    idsOrFn: ID | ID[] | null | Partial<S> | ((state: Readonly<S>) => Partial<S>) | ((entity: Readonly<E>) => boolean),\n    newStateOrFn?: ((entity: Readonly<E>) => Partial<E>) | Partial<E> | Partial<S>\n  ) {\n    let ids: ID[] = [];\n    const storeIds = this._value().ids;\n\n    if (isFunction(idsOrFn)) {\n      for (let i = 0, len = storeIds.length; i < len; i++) {\n        const id = storeIds[i];\n        const entity = this._value().entities[id];\n        if (entity && (idsOrFn as Function)(entity)) {\n          ids.push(id);\n        }\n      }\n    } else {\n      ids = toBoolean(idsOrFn) ? coerceArray(idsOrFn) : storeIds;\n    }\n\n    if (ids.length === 0) return;\n    isDev() && __globalState.setAction({ type: 'Update Entity', entityId: ids });\n\n    this.setState(state => {\n      return _crud._update(state, ids, newStateOrFn, this.idKey);\n    });\n  }\n\n  /**\n   * An alias to update all.\n   */\n  updateAll(state: Partial<E>) {\n    if (this._value().ids.length === 0) return;\n    this.update(null, state);\n  }\n\n  /**\n   * Update the root state (data which is external to the entities).\n   *\n   * @example\n   * this.store.updateRoot({\n   *   metadata: 'new metadata\n   * });\n   *\n   *  this.store.updateRoot(state => {\n   *    return {\n   *      metadata: {\n   *        ...state.metadata,\n   *        key: 'new value'\n   *      }\n   *    }\n   *  });\n   */\n  updateRoot(newStateFn: ((state: Readonly<S>) => Partial<S>) | Partial<S>, action?: Action) {\n    const newState = isFunction(newStateFn) ? newStateFn(this._value()) : newStateFn;\n\n    if (newState === this._value()) {\n      throw new AkitaImmutabilityError(this.storeName);\n    }\n\n    isDev() && __globalState.setAction(action || { type: 'Update Root' });\n\n    this.setState(state => {\n      return {\n        ...(state as any),\n        ...(newState as any)\n      };\n    });\n  }\n\n  /**\n   *\n   * Remove one or more entities from the store:\n   *\n   * @example\n   * this.store.remove(5);\n   * this.store.remove([1,2,3]);\n   * this.store.remove(entity => entity.id === 1);\n   * this.store.remove();\n   */\n  remove(id?: ID | ID[]);\n  remove(predicate: (entity: Readonly<E>) => boolean);\n  remove(idsOrFn?: ID | ID[] | ((entity: Readonly<E>) => boolean)) {\n    const storeIds = this._value().ids;\n\n    if (storeIds.length === 0) return;\n    const idPassed = toBoolean(idsOrFn);\n    if (!idPassed) this.setPristine();\n\n    let ids: ID[] = [];\n    if (isFunction(idsOrFn)) {\n      for (let i = 0, len = storeIds.length; i < len; i++) {\n        const id = storeIds[i];\n        const entity = this._value().entities[id];\n        if (entity && idsOrFn(entity)) {\n          ids.push(id);\n        }\n      }\n    } else {\n      ids = idPassed ? coerceArray(idsOrFn) : null;\n    }\n\n    if (ids && ids.length === 0) return;\n    isDev() && __globalState.setAction({ type: 'Remove Entity', entityId: ids });\n\n    this.setState(state => {\n      return _crud._remove(state, ids);\n    });\n  }\n\n  /**\n   *\n   * Update the active entity.\n   *\n   * @example\n   * this.store.updateActive(active => {\n   *   return {\n   *     config: {\n   *      ..active.config,\n   *      date\n   *     }\n   *   }\n   * })\n   */\n  updateActive(newStateFn: ((entity: Readonly<E>) => Partial<E>) | Partial<E>) {\n    assertActive(this._value());\n    isDev() && __globalState.setAction({ type: 'Update Active Entity', entityId: this._value().active });\n    this.setState(state => {\n      const activeId = state.active as ID;\n      const newState = isFunction(newStateFn) ? newStateFn(state.entities[activeId]) : newStateFn;\n      if (newState === state) {\n        throw new AkitaImmutabilityError(this.storeName);\n      }\n      return _crud._update(state, [activeId], newState, this.idKey);\n    });\n  }\n\n  /**\n   * Set the given entity as active.\n   */\n  setActive(idOrOptions: ActiveEntity | SetActiveOptions | null) {\n    let activeId: ActiveEntity;\n\n    if (isObject(idOrOptions)) {\n      if (isNil(this._value().active)) return;\n      (idOrOptions as SetActiveOptions) = Object.assign({ wrap: true }, idOrOptions);\n      const ids = this._value().ids;\n      const currentIdIndex = ids.indexOf(this._value().active);\n      if ((idOrOptions as SetActiveOptions).prev) {\n        const isFirst = currentIdIndex === 0;\n        if (isFirst && !(idOrOptions as SetActiveOptions).wrap) return;\n        activeId = isFirst ? ids[ids.length - 1] : (ids[currentIdIndex - 1] as any);\n      } else if ((idOrOptions as SetActiveOptions).next) {\n        const isLast = ids.length === currentIdIndex + 1;\n        if (isLast && !(idOrOptions as SetActiveOptions).wrap) return;\n        activeId = isLast ? ids[0] : (ids[currentIdIndex + 1] as any);\n      }\n    } else {\n      if (idOrOptions === this._value().active) return;\n      activeId = idOrOptions as ActiveEntity;\n    }\n\n    isDev() && __globalState.setAction({ type: 'Set Active Entity', entityId: activeId });\n    this.setState(state => {\n      return {\n        ...(state as any),\n        active: activeId\n      };\n    });\n  }\n\n  private addWhenNotExists(id: ID, entity: E) {\n    if (!entity[this.idKey]) {\n      entity[this.idKey] = id;\n    }\n    this.add(entity);\n  }\n}\n\nexport const getInitialEntitiesState = () =>\n  ({\n    entities: {},\n    ids: [],\n    loading: true,\n    error: null\n  } as EntityState);\n\nexport const getInitialActiveState = () =>\n  ({\n    active: null\n  } as ActiveState);\n","export enum Order {\n  ASC = 'asc',\n  DESC = 'desc'\n}\n\nexport function compareValues(key, order: Order = Order.ASC) {\n  return function(a, b) {\n    if (!a.hasOwnProperty(key) || !b.hasOwnProperty(key)) {\n      return 0;\n    }\n\n    const varA = typeof a[key] === 'string' ? a[key].toUpperCase() : a[key];\n    const varB = typeof b[key] === 'string' ? b[key].toUpperCase() : b[key];\n\n    let comparison = 0;\n    if (varA > varB) {\n      comparison = 1;\n    } else if (varA < varB) {\n      comparison = -1;\n    }\n    return order == Order.DESC ? comparison * -1 : comparison;\n  };\n}\n","export function memoizeOne(fn: Function) {\n  let lastArgs;\n  let changed = false;\n  let firstInit = true;\n  let lastResult;\n\n  return function(...args) {\n    if (lastArgs) {\n      /** If entities nor ids doesn't change return the last value */\n      changed = lastArgs[1] !== args[1] || lastArgs[0] !== args[0];\n    }\n\n    if (firstInit || (changed && !firstInit)) {\n      lastResult = fn.apply(this, args);\n    }\n\n    firstInit = false;\n    lastArgs = args;\n    return lastResult;\n  };\n}\n","import { Order } from '../internal/sort';\n\nexport type SortBy<E, S = any> = ((a: E, b: E, state?: S) => number) | keyof E;\n\nexport interface SortByOptions<E> {\n  sortBy?: SortBy<E>;\n  sortByOrder?: Order;\n}\n\nexport interface QueryConfigOptions<E = any> extends SortByOptions<E> {}\n\nexport const queryConfigKey = 'akitaQueryConfig';\n\nexport function QueryConfig<E>(metadata: QueryConfigOptions<E>) {\n  return function(constructor: Function) {\n    constructor[queryConfigKey] = {};\n    for (let i = 0, keys = Object.keys(metadata); i < keys.length; i++) {\n      const key = keys[i];\n      constructor[queryConfigKey][key] = metadata[key];\n    }\n  };\n}\n","import { Store } from './store';\nimport { Observable } from 'rxjs';\nimport { take } from 'rxjs/operators';\nimport { queryConfigKey, QueryConfigOptions } from './query-config';\n\nexport class Query<S> {\n  /** Use only for internal plugins like Pagination - don't use this property **/\n  __store__: Store<S>;\n\n  constructor(protected store: Store<S>) {\n    this.__store__ = store;\n  }\n\n  /**\n   * Select a slice from the store.\n   *\n   * @example\n   * this.query.select()\n   * this.query.select(state => state.entities)\n   */\n  select<R>(project?: (store: S) => R): Observable<R>;\n  select(): Observable<S>;\n  select<R>(project?: (store: S) => R): Observable<R | S> {\n    let state = project ? project : state => state;\n    return this.store._select(state);\n  }\n\n  /**\n   * Select once and complete.\n   */\n  selectOnce<R>(project: (store: S) => R): Observable<R> {\n    return this.select(project).pipe(take(1));\n  }\n\n  /**\n   * Select the store's loading state.\n   */\n  selectLoading() {\n    return this.select(state => (state as S & { loading: boolean }).loading);\n  }\n\n  /**\n   * Select the store's error state.\n   */\n  selectError() {\n    return this.select(state => (state as S & { error: any }).error);\n  }\n\n  /**\n   * Get the raw value of the store.\n   */\n  getSnapshot(): S {\n    return this.store._value();\n  }\n\n  /**\n   *  Returns whether the state of the store is pristine (the set() method hasn't been explicitly called\n   *  since the store creation, or the last time setPristine()was called).\n   */\n  get isPristine() {\n    return this.store.isPristine;\n  }\n\n  /**\n   * Returns whether the state of the store is dirty (the set() method\n   * or the setDirty() method has been explicitly called since the store creation,\n   * or the last time setPristine() was called).\n   */\n  get isDirty() {\n    return !this.store.isPristine;\n  }\n\n  get config(): QueryConfigOptions {\n    return this.constructor[queryConfigKey];\n  }\n}\n","import { combineLatest, Observable } from 'rxjs';\nimport { auditTime, map, switchMap, withLatestFrom } from 'rxjs/operators';\n\nimport { compareValues, Order } from '../internal/sort';\nimport { entityExists, isFunction, isUndefined, toBoolean } from '../internal/utils';\nimport { EntityStore } from './entity-store';\nimport { memoizeOne } from './memoize';\nimport { Query } from './query';\nimport { SortBy, SortByOptions } from './query-config';\nimport { ActiveState, EntityState, HashMap, ID } from './types';\n\nexport interface SelectOptions<E> extends SortByOptions<E> {\n  asObject?: boolean;\n  filterBy?: ((entity: E, index?: number) => boolean) | ((entity: E, index?: number) => boolean)[] | undefined;\n  limitTo?: number;\n}\n\n/**\n *  An abstraction for querying the entities from the store\n */\nexport class QueryEntity<S extends EntityState, E, ActiveEntity = ID> extends Query<S> {\n  protected store: EntityStore<S, E, ActiveEntity>;\n  private memoized;\n\n  /** Use only for internal plugins like Pagination - don't use this property **/\n  __store__;\n\n  constructor(store: EntityStore<S, E, ActiveEntity>) {\n    super(store);\n    this.__store__ = store;\n  }\n\n  /**\n   * Select the entire store's entity collection.\n   *\n   * @example\n   * this.store.selectAll();\n   */\n  selectAll(options: { asObject: true; filterBy?: SelectOptions<E>['filterBy']; limitTo?: number; sortBy?: undefined; sortByOrder?: undefined }): Observable<HashMap<E>>;\n  selectAll(options: { filterBy: SelectOptions<E>['filterBy']; limitTo?: number; sortBy?: SortBy<E>; sortByOrder?: Order }): Observable<E[]>;\n  selectAll(options: { asObject: true; limitTo?: number; sortBy?: undefined; sortByOrder?: undefined }): Observable<HashMap<E>>;\n  selectAll(options: { limitTo?: number; sortBy?: SortBy<E>; sortByOrder?: Order }): Observable<E[]>;\n  selectAll(options: { asObject: false; filterBy?: SelectOptions<E>['filterBy']; limitTo?: number; sortBy?: SortBy<E>; sortByOrder?: Order }): Observable<E[]>;\n  selectAll(): Observable<E[]>;\n  selectAll(\n    options: SelectOptions<E> = {\n      asObject: false\n    }\n  ): Observable<E[] | HashMap<E>> {\n    const selectState$ = this.select(state => state);\n    const selectEntities$ = this.select(state => state.entities);\n\n    this.sortByOptions(options);\n\n    return selectEntities$.pipe(\n      withLatestFrom(selectState$, (entities: HashMap<E>, state: S) => {\n        const { ids } = state;\n        if (options.asObject) {\n          return toMap(ids, entities, options);\n        } else {\n          if (!options.filterBy && !options.sortBy) {\n            if (!this.memoized) {\n              this.memoized = memoizeOne(toArray);\n            }\n            return this.memoized(state, options);\n          }\n\n          return toArray(state, options);\n        }\n      })\n    );\n  }\n\n  /**\n   * Get the entire store's entity collection.\n   *\n   * @example\n   * this.store.getAll();\n   */\n  getAll(options: { asObject: true; filterBy?: SelectOptions<E>['filterBy']; limitTo?: number; sortBy?: undefined; sortByOrder?: undefined }): HashMap<E>;\n  getAll(options: { filterBy: SelectOptions<E>['filterBy']; limitTo?: number; sortBy?: SortBy<E>; sortByOrder?: Order }): E[];\n  getAll(options: { asObject: true; limitTo?: number; sortBy?: undefined; sortByOrder?: undefined }): HashMap<E>;\n  getAll(options: { limitTo?: number; sortBy?: SortBy<E>; sortByOrder?: Order }): E[];\n  getAll(options: { asObject: false; filterBy?: SelectOptions<E>['filterBy']; limitTo?: number; sortBy?: SortBy<E>; sortByOrder?: Order }): E[];\n  getAll(): E[];\n  getAll(options: SelectOptions<E> = { asObject: false, filterBy: undefined, limitTo: undefined }): E[] | HashMap<E> {\n    const state = this.getSnapshot();\n\n    if (options.asObject) {\n      return toMap(state.ids, state.entities, options, true);\n    }\n\n    this.sortByOptions(options);\n\n    return toArray(state, options);\n  }\n\n  /**\n   * Select multiple entities from the store.\n   *\n   * @example\n   * this.store.selectMany([1,2]);\n   */\n  selectMany(ids: ActiveEntity[], options: { filterUndefined?: boolean } = {}): Observable<E[]> {\n    const filterUndefined = isUndefined(options.filterUndefined) ? true : options.filterUndefined;\n    const entities = ids.map(id => this.selectEntity(id));\n\n    return combineLatest(entities).pipe(\n      map(entities => {\n        return filterUndefined ? entities.filter(val => !isUndefined(val)) : entities;\n      }),\n      auditTime(0)\n    );\n  }\n\n  /**\n   * Select an entity or a slice of an entity.\n   *\n   * @example\n   * this.pagesStore.selectEntity(1)\n   * this.pagesStore.selectEntity(1, entity => entity.config.date)\n   *\n   */\n  selectEntity<R>(id: ActiveEntity): Observable<E>;\n  selectEntity<R>(id: ActiveEntity, project: (entity: E) => R): Observable<R>;\n  selectEntity<R>(id: ActiveEntity, project?: (entity: E) => R): Observable<R | E> {\n    if (!project) {\n      return this._byId(id);\n    }\n\n    return this.select(state => {\n      if (this.hasEntity(id)) {\n        return project(this.getEntity(id));\n      }\n\n      return undefined;\n    });\n  }\n\n  /**\n   * Get an entity by id\n   *\n   * @example\n   * this.store.getEntity(1);\n   */\n  getEntity(id: ActiveEntity): E {\n    return this.getSnapshot().entities[id as any];\n  }\n\n  /**\n   * Select the active entity's id.\n   */\n  selectActiveId(): Observable<ActiveEntity> {\n    return this.select(state => (state as S & ActiveState<ActiveEntity>).active);\n  }\n\n  /**\n   * Get the active id\n   */\n  getActiveId(): ActiveEntity {\n    return (this.getSnapshot() as S & ActiveState<ActiveEntity>).active;\n  }\n\n  /**\n   * Select the active entity.\n   */\n  selectActive<R>(): Observable<E>;\n  selectActive<R>(project: (entity: E) => R): Observable<R>;\n  selectActive<R>(project?: (entity: E) => R): Observable<R | E> {\n    return this.selectActiveId().pipe(switchMap(activeId => this.selectEntity(activeId, project)));\n  }\n\n  /**\n   * Get the active entity.\n   */\n  getActive(): E {\n    const activeId: ActiveEntity = this.getActiveId();\n    return toBoolean(activeId) ? this.getEntity(activeId) : undefined;\n  }\n\n  /**\n   * Select the store's entity collection length.\n   */\n  selectCount(predicate?: (entity: E, index: number) => boolean): Observable<number> {\n    if (isFunction(predicate)) {\n      return this.selectAll({\n        filterBy: predicate\n      }).pipe(map(entities => entities.length));\n    }\n\n    return this.select(store => store.ids.length);\n  }\n\n  /**\n   * Get the store's entity collection length.\n   */\n  getCount(predicate?: (entity: E, index: number) => boolean): number {\n    if (isFunction(predicate)) {\n      return this.getAll().filter(predicate).length;\n    }\n    return this.getSnapshot().ids.length;\n  }\n\n  /**\n   * Returns whether entity exists.\n   */\n  hasEntity(id: ActiveEntity): boolean;\n  hasEntity(id: ActiveEntity[]): boolean;\n  hasEntity(project: (entity: E) => boolean): boolean;\n  hasEntity(projectOrIds: ActiveEntity | ActiveEntity[] | ((entity: E) => boolean)): boolean {\n    if (isFunction(projectOrIds)) {\n      return this.getAll().some(projectOrIds);\n    }\n\n    if (Array.isArray(projectOrIds)) {\n      return projectOrIds.every(id => (id as any) in this.store.entities);\n    }\n\n    return (projectOrIds as any) in this.store.entities;\n  }\n\n  /**\n   * Returns whether entity store has an active entity.\n   */\n  hasActive(): boolean {\n    return this.getSnapshot().active != null;\n  }\n\n  isEmpty() {\n    return this.getSnapshot().ids.length === 0;\n  }\n\n  private _byId(id: ActiveEntity): Observable<E> {\n    return this.select(state => this.getEntity(id));\n  }\n\n  private sortByOptions(options) {\n    options.sortBy = options.sortBy || (this.config && (this.config.sortBy as SortBy<E>));\n    options.sortByOrder = options.sortByOrder || (this.config && this.config.sortByOrder);\n  }\n\n  ngOnDestroy() {\n    this.memoized = null;\n  }\n}\n\nfunction toArray<E, S extends EntityState>(state: S, options: SelectOptions<E>): E[] {\n  let arr = [];\n  const { ids, entities } = state;\n  const { filterBy, limitTo, sortBy, sortByOrder } = options;\n\n  for (let i = 0; i < ids.length; i++) {\n    const id = ids[i];\n\n    if (!entityExists(id, entities)) {\n      continue;\n    }\n\n    if (!filterBy) {\n      arr.push(entities[id]);\n      continue;\n    }\n\n    if (Array.isArray(filterBy)) {\n      const allPass = filterBy.every(fn => fn(entities[id], i));\n      if (allPass) {\n        arr.push(entities[id]);\n      }\n    } else {\n      if (filterBy(entities[id], i)) {\n        arr.push(entities[id]);\n      }\n    }\n  }\n\n  if (sortBy) {\n    let _sortBy: any = isFunction(sortBy) ? sortBy : compareValues(sortBy, sortByOrder);\n    arr = arr.sort((a, b) => _sortBy(a, b, state));\n  }\n  const length = Math.min(limitTo || arr.length, arr.length);\n\n  return length === arr.length ? arr : arr.slice(0, length);\n}\n\nfunction toMap<E>(ids: any[], entities: HashMap<E>, options: SelectOptions<E>, get = false): HashMap<E> {\n  const map = {};\n  const { filterBy, limitTo } = options;\n\n  if (get && !filterBy && !limitTo) {\n    return entities;\n  }\n\n  const length = Math.min(limitTo || ids.length, ids.length);\n\n  if (filterBy && isUndefined(limitTo) === false) {\n    let count = 0;\n    for (let i = 0, length = ids.length; i < length; i++) {\n      if (count === limitTo) break;\n      const id = ids[i];\n      if (!entityExists(id, entities)) {\n        continue;\n      }\n      if (Array.isArray(filterBy)) {\n        const allPass = filterBy.every(fn => fn(entities[id], i));\n        if (allPass) {\n          map[id] = entities[id];\n          count++;\n        }\n      } else {\n        if (filterBy(entities[id], i)) {\n          map[id] = entities[id];\n          count++;\n        }\n      }\n    }\n  } else {\n    for (let i = 0; i < length; i++) {\n      const id = ids[i];\n\n      if (!entityExists(id, entities)) {\n        continue;\n      }\n\n      if (!filterBy) {\n        map[id] = entities[id];\n        continue;\n      }\n\n      if (Array.isArray(filterBy)) {\n        const allPass = filterBy.every(fn => fn(entities[id], i));\n        if (allPass) {\n          map[id] = entities[id];\n        }\n      } else {\n        if (filterBy(entities[id], i)) {\n          map[id] = entities[id];\n        }\n      }\n    }\n  }\n\n  return map;\n}\n","import { endBatch, startBatch } from '../internal/transaction.internal';\n\n/**\n *  A logical transaction.\n *  Use this transaction to optimize the dispatch of all the stores.\n *  The following code will update the store, BUT  emits only once\n *\n *  @example\n *  applyTransaction(() => {\n *    this.todosStore.add(new Todo(1, title));\n *    this.todosStore.add(new Todo(2, title));\n *  });\n *\n */\nexport function applyTransaction<T>(action: () => T, thisArg = undefined): T {\n  startBatch();\n  try {\n    return action.apply(thisArg);\n  } finally {\n    endBatch();\n  }\n}\n\n/**\n *  A logical transaction.\n *  Use this transaction to optimize the dispatch of all the stores.\n *\n *  The following code will update the store, BUT  emits only once.\n *\n *  @example\n *  @transaction\n *  addTodos() {\n *    this.todosStore.add(new Todo(1, title));\n *    this.todosStore.add(new Todo(2, title));\n *  }\n *\n *\n */\nexport function transaction() {\n  return function(target: any, propertyKey: string, descriptor: PropertyDescriptor) {\n    const originalMethod = descriptor.value;\n\n    descriptor.value = function(...args) {\n      return applyTransaction(() => {\n        return originalMethod.apply(this, args);\n      }, this);\n    };\n\n    return descriptor;\n  };\n}\n","import { isObject } from '../internal/utils';\n\n// https://github.com/georapbox/immutable-arrays\n\n/**\n * Adds one or more elements to the end of an array by returning\n * a new array instead of mutating the original one.\n *\n * @example\n * const originalArray = ['a', 'b', 'c', 'd', 'e'];\n * const resultArray = push(originalArray, 'f', 'g');\n * // -> originalArray ['a', 'b', 'c', 'd', 'e']\n * // -> resultArray ['a', 'b', 'c', 'd', 'e', 'f', 'g']\n */\nexport function push<T>(array: T[], ...elementN: T[]): T[] {\n  return [...array, ...elementN];\n}\n\n/**\n * Deletes an element from an array by its index in the array.\n *\n * @example\n * const originalArray = ['a', 'b', 'c', 'd', 'e'];\n * const resultArray = remove(originalArray, 2);\n * // -> originalArray ['a', 'b', 'c', 'd', 'e']\n * // -> resultArray ['a', 'b', 'd', 'e']\n */\nexport function remove<T>(array: T[], index: number): T[] {\n  return index >= 0 ? [...array.slice(0, index), ...array.slice(index + 1)] : [...array];\n}\n\n/**\n * Removes the last element from an array by returning\n * a new array instead of mutating the original one.\n *\n * @example\n * const originalArray = ['a', 'b', 'c', 'd', 'e'];\n * const resultArray = pop(originalArray);\n * // -> originalArray ['a', 'b', 'c', 'd', 'e']\n * // -> resultArray ['a', 'b', 'c', 'd']\n */\nexport function pop<T>(array: T[]): T[] {\n  return array.slice(0, -1);\n}\n\n/**\n * Adds one or more elements to the beginning of an array.\n *\n * @example\n * const originalArray = ['a', 'b', 'c', 'd', 'e'];\n * const resultArray = unshift(originalArray, 'f', 'g');\n * // -> originalArray ['a', 'b', 'c', 'd', 'e']\n * // -> resultArray ['f', 'g', 'a', 'b', 'c', 'd', 'e']\n */\nexport function unshift<T>(array: T[], ...elementN: T[]): T[] {\n  return [...elementN, ...array];\n}\n\n/**\n * Sorts the elements of an array (not in place) and returns a sorted array.\n *\n * @example\n * const numberArray = [20, 3, 4, 10, -3, 1, 0, 5];\n * const stringArray = ['Blue', 'Humpback', 'Beluga'];\n *\n * const resultArray = sort(numberArray, (a, b) => a - b);\n * // -> numberArray [20, 3, 4, 10, -3, 1, 0, 5]\n * // -> resultArray [-3, 0, 1, 3, 4, 5, 10, 20]\n *\n * const resultArray = sort(numberArray, (a, b) => b - a);\n * // -> numberArray [20, 3, 4, 10, -3, 1, 0, 5]\n * // -> resultArray [20, 10, 5, 4, 3, 1, 0, -3]\n *\n * const resultArray = sort(stringArray);\n * // -> stringArray ['Blue', 'Humpback', 'Beluga']\n * // -> resultArray ['Beluga', 'Blue', 'Humpback']\n *\n * const resultArray = sort(stringArray, (a, b) => a.toLowerCase() < b.toLowerCase());\n * // -> stringArray ['Blue', 'Humpback', 'Beluga']\n * // -> resultArray ['Humpback', 'Blue', 'Beluga']\n */\nexport function sort<T>(array: T[], compareFunction?: (a: T, b: T) => number): T[] {\n  return [...array].sort(compareFunction);\n}\n\n/**\n * Reverses an array (not in place).\n * The first array element becomes the last, and the last array element becomes the first.\n *\n * @example\n * const originalArray = ['a', 'b', 'c', 'd', 'e'];\n * const resultArray = reverse(originalArray);\n * // -> originalArray ['a', 'b', 'c', 'd', 'e']\n * // -> resultArray ['e', 'd', 'c', 'b', 'a']\n */\nexport function reverse<T>(array: T[]): T[] {\n  return [...array].reverse();\n}\n\n/**\n * Swap items in the array\n *\n * @example\n * const originalArray = ['a', 'b', 'c', 'd', 'e'];\n * const resultArray = swap(originalArray, 1, 4);\n * // -> originalArray ['a', 'b', 'c', 'd', 'e']\n * // -> resultArray ['a', 'e', 'c', 'd', 'b']\n */\nexport function swap<T>(array: T[], firstIndex: number, secondIndex: number): T[] {\n  const results = array.slice();\n  const firstItem = array[firstIndex];\n  results[firstIndex] = array[secondIndex];\n  results[secondIndex] = firstItem;\n\n  return results;\n}\n\n/**\n * Update item in the array\n *\n * @example\n * const originalArray = ['a', 'b', 'c', 'd', 'e'];\n * const resultArray = update(originalArray, 1, 'newItem');\n * // -> resultArray ['a', 'newItem', 'c', 'd', 'b']\n *\n * const originalArray = [{title: 1}, {title: 2}];\n * const resultArray = update(originalArray, originalArray[0], {title: 3});\n * // -> resultArray  [{title: 3}, {title: 2}];\n */\nexport function update<T>(array: T[], indexOrItem: number | object, updated: T): T[] {\n  return array.map((current, idx) => {\n    if (typeof indexOrItem === 'number' && idx === indexOrItem) {\n      return updated;\n    }\n\n    if (isObject(indexOrItem) && (indexOrItem as any) === current) {\n      return {\n        ...(indexOrItem as object),\n        ...(updated as any)\n      };\n    }\n\n    return current;\n  });\n}\n\n/**\n * Removes existing elements and/or adds new elements to an array.\n *\n * @example\n * const originalArray = ['a', 'b', 'c', 'd', 'e'];\n * const resultArray = splice(originalArray, 0);\n * // -> originalArray ['a', 'b', 'c', 'd', 'e']\n * // -> resultArray []\n *\n * const originalArray = ['a', 'b', 'c', 'd', 'e'];\n * const resultArray = splice(originalArray, 0, 1);\n * // -> originalArray ['a', 'b', 'c', 'd', 'e']\n * // -> resultArray ['b', 'c', 'd', 'e']\n *\n * const originalArray = ['a', 'b', 'c', 'd', 'e'];\n * const resultArray = splice(originalArray, 0, 3);\n * // -> originalArray ['a', 'b', 'c', 'd', 'e']\n * // -> resultArray ['d', 'e']\n *\n * const originalArray = ['a', 'b', 'c', 'd', 'e'];\n * const resultArray = splice(originalArray, 0, originalArray.length);\n * // -> originalArray ['a', 'b', 'c', 'd', 'e']\n * // -> resultArray []\n *\n * const originalArray = ['a', 'b', 'c', 'd', 'e'];\n * const resultArray = splice(originalArray, 0, -3);\n * // -> originalArray ['a', 'b', 'c', 'd', 'e']\n * // -> resultArray ['a', 'b', 'c', 'd', 'e']\n *\n * const originalArray = ['a', 'b', 'c', 'd', 'e'];\n * const resultArray = splice(originalArray, 0, 0, 'lorem', 'ipsum');\n * // -> originalArray ['a', 'b', 'c', 'd', 'e']\n * // -> resultArray ['lorem', 'ipsum', 'a', 'b', 'c', 'd', 'e']\n *\n * const originalArray = ['a', 'b', 'c', 'd', 'e'];\n * const resultArray = splice(originalArray, originalArray.length, 0, 'lorem', 'ipsum');\n * // -> originalArray ['a', 'b', 'c', 'd', 'e']\n * // -> resultArray ['a', 'b', 'c', 'd', 'e', 'lorem', 'ipsum']\n *\n * const originalArray = ['a', 'b', 'c', 'd', 'e'];\n * const resultArray = splice(originalArray, 0, 2, 'lorem', 'ipsum');\n * // -> originalArray ['a', 'b', 'c', 'd', 'e']\n * // -> resultArray ['lorem', 'ipsum', 'c', 'd', 'e']\n *\n * const originalArray = ['a', 'b', 'c', 'd', 'e'];\n * const resultArray = splice(originalArray, originalArray.length - 2, 2, 'lorem', 'ipsum');\n * // -> originalArray ['a', 'b', 'c', 'd', 'e']\n * // -> resultArray ['a', 'b', 'c', 'lorem', 'ipsum']\n */\nexport function splice<T>(array: T[], start = array.length, deleteCount = array.length - start, ...elementN: T[]): T[] {\n  return [...array.slice(0, start), ...elementN, ...array.slice(start + (deleteCount < 0 ? 0 : deleteCount))];\n}\n\nexport function toggle<T>(arr: T[], item: T) {\n  return arr.indexOf(item) > -1 ? arr.filter(current => item !== current) : push(arr, item);\n}\n","/** Checks if value is null or undefined */\nimport { Observable } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\nexport const filterNil = <T>(source: Observable<T>) => source.pipe(filter(value => value !== null && typeof value !== 'undefined'));\n","import { Action, __globalState } from './global-state';\n\nexport function applyAction<T>(func: () => T, action: Action, thisArg = undefined): T {\n  __globalState.setCustomAction(action, true);\n  return func.apply(thisArg);\n}\n\nexport function action(action: Action, skipTransactionMsg = true) {\n  return function(target: any, propertyKey: string, descriptor: PropertyDescriptor) {\n    const originalMethod = descriptor.value;\n    descriptor.value = function(...args) {\n      __globalState.setCustomAction(action, skipTransactionMsg);\n      return originalMethod.apply(this, args);\n    };\n\n    return descriptor;\n  };\n}\n","import { Observable } from 'rxjs';\n\nfunction serialize(object) {\n  return JSON.stringify(object, function(key, value) {\n    if (typeof value === 'function') {\n      return value.toString();\n    }\n    return value;\n  });\n}\n\nfunction createWorker() {\n  const blob = new Blob(\n    [\n      `self.onmessage = function(e) {\n\n      function deserialize(str) {\n        return JSON.parse(str || '', function(key, value) {\n          if (value &&\n            typeof value === \"string\" &&\n            value.substr(0, 8) == \"function\") {\n            var startBody = value.indexOf('{') + 1;\n            var endBody = value.lastIndexOf('}');\n            var startArgs = value.indexOf('(') + 1;\n            var endArgs = value.indexOf(')');\n            return new Function(value.substring(startArgs, endArgs), value.substring(startBody, endBody));\n          }\n          return value;\n        });\n      }\n\n      var deserialized = deserialize(e.data);\n      var mapped = deserialized.data.map(function(d) {\n        return deserialized.factory(d);\n      });\n\n      self.postMessage(mapped);\n    }`\n    ],\n    {\n      type: 'text/javascript'\n    }\n  );\n\n  const url = URL.createObjectURL(blob);\n  return new Worker(url);\n}\n\n/**\n *  @example\n *   const mockTodos = Array.from({length: 10000}, (_, x) => ({id: x}));\n *\n *   of(mockTodos).pipe(mapInWorker<Todo>(createTodo))\n *   .subscribe(res => console.log(res));\n */\nexport function mapInWorker<T>(factoryFn: Function) {\n  return function(source): Observable<T[]> {\n    return new Observable(observer => {\n      const worker = createWorker();\n\n      worker.onmessage = function(e) {\n        observer.next(e.data);\n        observer.complete();\n        worker.terminate();\n      };\n\n      worker.onerror = function(err) {\n        observer.error(err);\n        observer.complete();\n        worker.terminate();\n      };\n\n      return source.subscribe(value => {\n        const input = {\n          factory: factoryFn,\n          data: value\n        };\n        const serialized = serialize(input);\n\n        worker.postMessage(serialized);\n      });\n    });\n  };\n}\n","import { __stores__ } from './store';\nimport { isString } from '../internal/utils';\n\nexport class SnapshotManager {\n  /**\n   * Get a snapshot of the whole state or a specific stores\n   * Use it ONLY for things like saving the state in the server\n   */\n  getStoresSnapshot(stores: string[] = []) {\n    let acc = {};\n    const hasInclude = stores.length > 0;\n    const keys = hasInclude ? stores : Object.keys(__stores__);\n    for (let i = 0; i < keys.length; i++) {\n      let storeName = keys[i];\n      acc[storeName] = __stores__[storeName]._value();\n    }\n\n    return acc;\n  }\n\n  /**\n   * Set snapshot we get from the server\n   */\n  setStoresSnapshot(stores: { [storeName: string]: any } | string) {\n    let normalizedStores = stores;\n    if (isString(stores)) {\n      normalizedStores = JSON.parse(normalizedStores as string);\n    }\n\n    for (let i = 0, keys = Object.keys(normalizedStores); i < keys.length; i++) {\n      const storeName = keys[i];\n      if (__stores__[storeName]) {\n        __stores__[storeName].setState(() => normalizedStores[storeName]);\n      }\n    }\n  }\n}\n\nexport const snapshotManager = new SnapshotManager();\n","import { QueryEntity } from '../api/query-entity';\nimport { Query } from '../api/query';\nimport { Observable } from 'rxjs';\nimport { filterNil } from '../api/operators';\nimport { toBoolean } from '../internal/utils';\nimport { ID } from '../api/types';\nimport { getAkitaConfig } from '../api/config';\n\nexport type Queries<E, S> = Query<S> | QueryEntity<S, E>;\n\nexport abstract class AkitaPlugin<E = any, S = any> {\n  protected constructor(protected query: Queries<E, S>, config?: { resetFn?: Function }) {\n    if (config && config.resetFn) {\n      if (getAkitaConfig().resettable) {\n        this.onReset(config.resetFn);\n      }\n    }\n  }\n\n  /** This method is responsible for getting access to the query. */\n  protected getQuery(): Queries<E, S> {\n    return this.query;\n  }\n\n  /** This method is responsible for getting access to the store. */\n  protected getStore() {\n    return this.getQuery().__store__;\n  }\n\n  /** This method is responsible for cleaning. */\n  public abstract destroy();\n\n  /** This method is responsible tells whether the plugin is entityBased or not.  */\n  protected isEntityBased(entityId: ID) {\n    return toBoolean(entityId);\n  }\n\n  /** This method is responsible for selecting the source; it can be the whole store or one entity. */\n  protected selectSource(entityId: ID): Observable<S | E> {\n    if (this.isEntityBased(entityId)) {\n      return (this.getQuery() as QueryEntity<S, E>).selectEntity(entityId).pipe(filterNil);\n    }\n\n    return (this.getQuery() as Query<S>).select(state => state);\n  }\n\n  protected getSource(entityId: ID): S | E {\n    if (this.isEntityBased(entityId)) {\n      return (this.getQuery() as QueryEntity<S, E>).getEntity(entityId);\n    }\n\n    return this.getQuery().getSnapshot();\n  }\n\n  /** This method is responsible for updating the store or one entity; it can be the whole store or one entity. */\n  protected updateStore(newState, entityId?) {\n    if (this.isEntityBased(entityId)) {\n      this.getStore().update(entityId, newState);\n    } else {\n      this.getStore().setState(state => ({ ...state, ...newState }));\n    }\n  }\n\n  /**\n   * Function to invoke upon reset\n   */\n  private onReset(fn: Function) {\n    const original = this.getStore().reset;\n    this.getStore().reset = (...params) => {\n      /** It should run after the plugin destroy method */\n      setTimeout(() => {\n        original.apply(this.getStore(), params);\n        fn();\n      });\n    };\n  }\n}\n","import { QueryEntity } from '../../api/query-entity';\nimport { delay, map, switchMap, take } from 'rxjs/operators';\nimport { BehaviorSubject, from, Observable, Subscription } from 'rxjs';\nimport { isObservable, isUndefined } from '../../internal/utils';\nimport { ID } from '../../api/types';\nimport { AkitaPlugin } from '../plugin';\nimport { applyTransaction } from '../../api/transaction';\nimport { action, applyAction } from '../../internal/action';\n\nexport interface PaginationResponse<E> {\n  currentPage: number;\n  perPage: number;\n  lastPage: number;\n  data: E[];\n  total?: number;\n  from?: number;\n  to?: number;\n  pageControls?: number[];\n}\n\nexport type PaginatorConfig = {\n  pagesControls?: boolean;\n  range?: boolean;\n  startWith?: number;\n  cacheTimeout?: Observable<number>;\n};\n\nconst paginatorDefaults: PaginatorConfig = {\n  pagesControls: false,\n  range: false,\n  startWith: 1,\n  cacheTimeout: undefined\n};\n\nexport class PaginatorPlugin<E> extends AkitaPlugin<E> {\n  /** Save current filters, sorting, etc. in cache */\n  metadata = new Map();\n\n  private page: BehaviorSubject<number>;\n  private pages = new Map<number, { ids: ID[] }>();\n  private readonly clearCacheSubscription: Subscription;\n\n  private pagination: PaginationResponse<E> = {\n    currentPage: 1,\n    perPage: 0,\n    total: 0,\n    lastPage: 0,\n    data: []\n  };\n\n  /**\n   * When the user navigates to a different page and return\n   * we don't want to call `clearCache` on first time.\n   */\n  private initial = false;\n\n  constructor(protected query: QueryEntity<any, E>, public config: PaginatorConfig = {}) {\n    super(query, {\n      resetFn: () => {\n        this.initial = false;\n        this.destroy({ clearCache: true, currentPage: 1 });\n      }\n    });\n    this.config = Object.assign(paginatorDefaults, config);\n    const { startWith, cacheTimeout } = this.config;\n    this.page = new BehaviorSubject(startWith);\n    if (isObservable(cacheTimeout)) {\n      this.clearCacheSubscription = cacheTimeout.subscribe(_ => this.clearCache());\n    }\n  }\n\n  /**\n   * Proxy to the query loading\n   */\n  isLoading$ = this.query.selectLoading().pipe(delay(0));\n\n  /**\n   * Listen to page changes\n   */\n  get pageChanges() {\n    return this.page.asObservable();\n  }\n\n  /**\n   * Get the current page number\n   */\n  get currentPage() {\n    return this.pagination.currentPage;\n  }\n\n  /**\n   * Check if current page is the first one\n   */\n  get isFirst() {\n    return this.currentPage === 1;\n  }\n\n  /**\n   * Check if current page is the last one\n   */\n  get isLast() {\n    return this.currentPage === this.pagination.lastPage;\n  }\n\n  /**\n   * Whether to generate an array of pages for *ngFor\n   * [1, 2, 3, 4]\n   */\n  withControls() {\n    this.config.pagesControls = true;\n    return this;\n  }\n\n  /**\n   * Whether to generate the `from` and `to` keys\n   * [1, 2, 3, 4]\n   */\n  withRange() {\n    this.config.range = true;\n    return this;\n  }\n\n  /**\n   * Set the loading state\n   */\n  setLoading(value = true) {\n    this.getStore().setLoading(value);\n  }\n\n  /**\n   * Update the pagination object and add the page\n   */\n  @action({ type: '@Pagination - New Page' }, true)\n  update(response: PaginationResponse<E>) {\n    this.pagination = response;\n    this.addPage(response.data);\n  }\n\n  /**\n   *\n   * Set the ids and add the page to store\n   */\n  addPage(data: E[]) {\n    this.pages.set(this.currentPage, { ids: data.map(entity => entity[this.getStore().idKey]) });\n    this.getStore().add(data);\n  }\n\n  /**\n   * Clear the cache.\n   */\n  clearCache() {\n    if (!this.initial) {\n      applyAction(\n        () => {\n          this.getStore().remove();\n        },\n        { type: '@Pagination - Clear Cache' }\n      );\n      this.pages = new Map();\n      this.metadata = new Map();\n    }\n    this.initial = false;\n  }\n\n  clearPage(page: number) {\n    this.pages.delete(page);\n  }\n\n  /**\n   * Clear the cache timeout and optionally the pages\n   */\n  destroy({ clearCache, currentPage }: { clearCache?: boolean; currentPage?: number } = {}) {\n    if (this.clearCacheSubscription) {\n      this.clearCacheSubscription.unsubscribe();\n    }\n    if (clearCache) {\n      this.clearCache();\n    }\n    if (!isUndefined(currentPage)) {\n      this.setPage(currentPage);\n    }\n    this.initial = true;\n  }\n\n  /**\n   * Whether the provided page is active\n   */\n  isPageActive(page: number) {\n    return this.currentPage === page;\n  }\n\n  /**\n   * Set the current page\n   */\n  setPage(page: number) {\n    if (page !== this.currentPage || !this.hasPage(page)) {\n      this.page.next((this.pagination.currentPage = page));\n    }\n  }\n\n  /**\n   * Increment current page\n   */\n  nextPage() {\n    if (this.currentPage !== this.pagination.lastPage) {\n      this.setPage(this.pagination.currentPage + 1);\n    }\n  }\n\n  /**\n   * Decrement current page\n   */\n  prevPage() {\n    if (this.pagination.currentPage > 1) {\n      this.setPage(this.pagination.currentPage - 1);\n    }\n  }\n\n  /**\n   * Set current page to last\n   */\n  setLastPage() {\n    this.setPage(this.pagination.lastPage);\n  }\n\n  /**\n   * Set current page to first\n   */\n  setFirstPage() {\n    this.setPage(1);\n  }\n\n  /**\n   * Check if page exists in cache\n   */\n  hasPage(page: number) {\n    return this.pages.has(page);\n  }\n\n  /**\n   * Get the current page if it's in cache, otherwise invoke the request\n   */\n  getPage(req: () => Observable<PaginationResponse<E>>) {\n    const page = this.pagination.currentPage;\n    if (this.hasPage(page)) {\n      return this.selectPage(page);\n    } else {\n      this.setLoading(true);\n      return from(req()).pipe(\n        switchMap((config: PaginationResponse<E>) => {\n          applyTransaction(() => {\n            this.setLoading(false);\n            this.update(config);\n          });\n          return this.selectPage(page);\n        })\n      );\n    }\n  }\n\n  getQuery(): QueryEntity<any, E> {\n    return this.query;\n  }\n\n  private getFrom() {\n    if (this.isFirst) {\n      return 1;\n    }\n    return (this.currentPage - 1) * this.pagination.perPage + 1;\n  }\n\n  private getTo() {\n    return this.currentPage * this.pagination.perPage;\n  }\n\n  /**\n   * Select the page\n   */\n  private selectPage(page: number): Observable<PaginationResponse<E>> {\n    return this.query.selectAll({ asObject: true }).pipe(\n      take(1),\n      map(entities => {\n        let response: PaginationResponse<E> = {\n          ...this.pagination,\n          data: this.pages.get(page).ids.map(id => entities[id])\n        };\n\n        const { range, pagesControls } = this.config;\n\n        /** If no total - calc it */\n        if (isNaN(this.pagination.total)) {\n          if (response.lastPage === 1) {\n            response.total = response.data ? response.data.length : 0;\n          } else {\n            response.total = response.perPage * response.lastPage;\n          }\n          this.pagination.total = response.total;\n        }\n\n        if (range) {\n          response.from = this.getFrom();\n          response.to = this.getTo();\n        }\n\n        if (pagesControls) {\n          response.pageControls = generatePages(this.pagination.total, this.pagination.perPage);\n        }\n\n        return response;\n      })\n    );\n  }\n}\n\n/**\n * Generate an array so we can ngFor them to navigate between pages\n */\nfunction generatePages(total: number, perPage: number) {\n  const len = Math.ceil(total / perPage);\n  let arr = [];\n  for (let i = 0; i < len; i++) {\n    arr.push(i + 1);\n  }\n  return arr;\n}\n\n/** backward compatibility */\nexport const Paginator = PaginatorPlugin;\n","import { AkitaPlugin } from '../plugin';\nimport { Query } from '../../api/query';\nimport { Observable, Subscription } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\nimport { __globalState } from '../../internal/global-state';\nimport { getValue, isString, setValue, toBoolean } from '../../internal/utils';\n\nexport type FormGroupLike = {\n  patchValue: Function;\n  setValue: Function;\n  value: any;\n  get: Function;\n  valueChanges: Observable<any>;\n  controls: any;\n};\n\nexport type AkitaFormProp<T> = {\n  [key: string]: T;\n};\n\nexport type PersistFormParams = {\n  debounceTime?: number;\n  formKey?: string;\n  emitEvent?: boolean;\n  arrControlFactory?: ArrayControlFactory;\n};\n\nexport type ArrayControlFactory = (value: any) => any; // Todo: Return  AbstractControl interface\n\nexport class PersistNgFormPlugin<T = any> extends AkitaPlugin {\n  formChanges: Subscription;\n  private isRootKeys: boolean;\n  private form: FormGroupLike;\n  private isKeyBased: boolean;\n  private initialValue;\n  private builder;\n\n  constructor(protected query: Query<any>, private factoryFnOrPath?: Function | string, private params: PersistFormParams = {}) {\n    super(query);\n    this.params = { ...{ debounceTime: 300, formKey: 'akitaForm', emitEvent: false, arrControlFactory: v => this.builder.control(v) }, ...params };\n    this.isRootKeys = toBoolean(factoryFnOrPath) === false;\n    this.isKeyBased = isString(factoryFnOrPath) || this.isRootKeys;\n  }\n\n  setForm(form: FormGroupLike, builder?) {\n    this.form = form;\n    this.builder = builder;\n    this.activate();\n    return this;\n  }\n\n  reset(initialState?: T) {\n    let value;\n    if (initialState) {\n      value = initialState;\n    } else {\n      value = this.isKeyBased ? this.initialValue : (this as any).factoryFnOrPath();\n    }\n\n    if (this.isKeyBased) {\n      Object.keys(this.initialValue).forEach(stateKey => {\n        const value = this.initialValue[stateKey];\n        if (Array.isArray(value) && this.builder) {\n          const formArray = this.form.controls[stateKey];\n          this.cleanArray(formArray);\n          value.forEach((v, i) => {\n            this.form.get(stateKey).insert(i, (this.params.arrControlFactory as Function)(v));\n          });\n        }\n      });\n    }\n    this.form.patchValue(value, { emitEvent: this.params.emitEvent });\n\n    const storeValue = this.isKeyBased ? setValue(this.getQuery().getSnapshot(), `${this.getStore().storeName}.${this.factoryFnOrPath}`, value) : { [this.params.formKey]: value };\n    this.updateStore(storeValue);\n  }\n\n  private cleanArray(control) {\n    while (control.length !== 0) {\n      control.removeAt(0);\n    }\n  }\n\n  private resolveInitialValue(formValue, root) {\n    if (!formValue) return;\n    return Object.keys(formValue).reduce((acc, stateKey) => {\n      const value = root[stateKey];\n      if (Array.isArray(value) && this.builder) {\n        const factory = this.params.arrControlFactory;\n        this.cleanArray(this.form.get(stateKey));\n        value.forEach((v, i) => {\n          this.form.get(stateKey).insert(i, (factory as Function)(v));\n        });\n      }\n      acc[stateKey] = root[stateKey];\n      return acc;\n    }, {});\n  }\n\n  private activate() {\n    let path;\n\n    if (this.isKeyBased) {\n      if (this.isRootKeys) {\n        this.initialValue = this.resolveInitialValue(this.form.value, this.getQuery().getSnapshot());\n        this.form.patchValue(this.initialValue, { emitEvent: this.params.emitEvent });\n      } else {\n        path = `${this.getStore().storeName}.${this.factoryFnOrPath}`;\n        const root = getValue(this.getQuery().getSnapshot(), path);\n        this.initialValue = this.resolveInitialValue(root, root);\n        this.form.patchValue(this.initialValue, { emitEvent: this.params.emitEvent });\n      }\n    } else {\n      if (!(this.getQuery().getSnapshot() as AkitaFormProp<T>)[this.params.formKey]) {\n        __globalState.setAction({ type: '@PersistNgFormPlugin activate' });\n        this.updateStore({ [this.params.formKey]: (this as any).factoryFnOrPath() });\n      }\n\n      const value = this.getQuery().getSnapshot()[this.params.formKey];\n      this.form.patchValue(value);\n    }\n\n    this.formChanges = this.form.valueChanges.pipe(debounceTime(this.params.debounceTime)).subscribe(value => {\n      __globalState.setAction({ type: '@PersistForm - Update' });\n      let newState;\n      if (this.isKeyBased) {\n        if (this.isRootKeys) {\n          newState = state => ({ ...state, ...value });\n        } else {\n          newState = state => setValue(state, path, value);\n        }\n      } else {\n        newState = () => ({ [this.params.formKey]: value });\n      }\n      this.updateStore(newState(this.getQuery().getSnapshot()));\n    });\n  }\n\n  destroy() {\n    this.formChanges && this.formChanges.unsubscribe();\n    this.form = null;\n    this.builder = null;\n  }\n}\n","import { AkitaError } from '../internal/error';\nimport { __stores__, Actions, rootDispatcher } from '../api/store';\nimport { skip, filter } from 'rxjs/operators';\nimport { getValue, setValue } from '../internal/utils';\nimport { __globalState } from '../internal/global-state';\n\nconst notBs = typeof localStorage === 'undefined';\n\nexport interface PersistStateParams {\n  /** The storage key */\n  key: string;\n  /** Storage strategy to use. This defaults to LocalStorage but you can pass SessionStorage or anything that implements the StorageEngine API. */\n  storage: Storage;\n  /** Custom deserializer. Defaults to JSON.parse */\n  deserialize: Function;\n  /** Custom serializer, defaults to JSON.stringify */\n  serialize: Function;\n  /**\n   * By default the whole state is saved to storage, use this param to include only the stores you need.\n   * Pay attention that you can't use both include and exclude\n   */\n  include: string[];\n  /**\n   *  By default the whole state is saved to storage, use this param to exclude stores that you don't need.\n   *  Pay attention that you can't use both include and exclude\n   */\n  exclude: string[];\n}\n\nexport function persistState(params?: Partial<PersistStateParams>) {\n  if (notBs) return;\n\n  const defaults: PersistStateParams = {\n    key: 'AkitaStores',\n    storage: localStorage,\n    deserialize: JSON.parse,\n    serialize: JSON.stringify,\n    include: [],\n    exclude: []\n  };\n  const { storage, deserialize, serialize, include, exclude, key } = Object.assign({}, defaults, params);\n\n  const hasInclude = include.length > 0;\n  const hasExclude = exclude.length > 0;\n  let includeStores;\n\n  if (hasInclude && hasExclude) {\n    throw new AkitaError(\"You can't use both include and exclude\");\n  }\n\n  if (hasInclude) {\n    includeStores = include.reduce((acc, path) => {\n      const storeName = path.split('.')[0];\n      acc[storeName] = path;\n      return acc;\n    }, {});\n  }\n\n  const storageState = deserialize(storage.getItem(key) || '{}');\n\n  let stores = {};\n  let acc = {};\n\n  function save() {\n    storage.setItem(key, serialize(Object.assign({}, storageState, acc)));\n  }\n\n  function subscribe(storeName, path) {\n    stores[storeName] = __stores__[storeName]\n      ._select(state => getValue(state, path))\n      .pipe(skip(1))\n      .subscribe(data => {\n        acc[storeName] = data;\n        save();\n      });\n  }\n\n  function setInitial(storeName, store, path) {\n    if (storageState[storeName]) {\n      __globalState.setAction({ type: '@PersistState' });\n      store.setState(state => {\n        return setValue(state, path, storageState[storeName]);\n      });\n      if (store.setDirty) {\n        store.setDirty();\n      }\n    }\n  }\n\n  const subscription = rootDispatcher.pipe(filter(action => action.type === Actions.NEW_STORE)).subscribe(action => {\n    let currentStoreName = action.payload.store.storeName;\n\n    if (hasExclude && exclude.includes(currentStoreName)) {\n      return;\n    }\n\n    if (hasInclude) {\n      const path = includeStores[currentStoreName];\n      if (!path) {\n        return;\n      }\n      setInitial(currentStoreName, action.payload.store, path);\n      subscribe(currentStoreName, path);\n    } else {\n      setInitial(currentStoreName, action.payload.store, currentStoreName);\n      subscribe(currentStoreName, currentStoreName);\n    }\n  });\n\n  return {\n    destroy() {\n      subscription.unsubscribe();\n      for (let i = 0, keys = Object.keys(stores); i < keys.length; i++) {\n        const storeName = keys[i];\n        stores[storeName].unsubscribe();\n      }\n      stores = {};\n    },\n    clear() {\n      storage.clear();\n    },\n    clearStore(storeName: string) {\n      const storageState = deserialize(storage.getItem(key) || '{}');\n\n      if (storageState[storeName]) {\n        delete storageState[storeName];\n        storage.setItem(key, serialize(storageState));\n      }\n    }\n  };\n}\n","import { __stores__, Actions, rootDispatcher } from '../api/store';\nimport { __globalState } from '../internal/global-state';\nimport { isDefined } from '../internal/utils';\n\nexport type DevtoolsOptions = {\n  /**  maximum allowed actions to be stored in the history tree */\n  maxAge: number;\n  latency: number;\n  actionsBlacklist: string[];\n  actionsWhitelist: string[];\n  shouldCatchErrors: boolean;\n  logTrace: boolean;\n  predicate: (state: any, action: any) => boolean;\n};\nlet rootDispatcherSub, devtoolsSub;\n\nexport type NgZoneLike = { run: any };\n\nexport function akitaDevtools(ngZone: NgZoneLike, options?: Partial<DevtoolsOptions>);\nexport function akitaDevtools(options?: Partial<DevtoolsOptions>);\nexport function akitaDevtools(ngZoneOrOptions?: NgZoneLike | Partial<DevtoolsOptions>, options: Partial<DevtoolsOptions> = {}) {\n  if (!(window as any).__REDUX_DEVTOOLS_EXTENSION__) {\n    return;\n  }\n\n  rootDispatcherSub && rootDispatcherSub.unsubscribe();\n  devtoolsSub && devtoolsSub();\n\n  const isAngular = ngZoneOrOptions && ngZoneOrOptions['run'];\n\n  if (!isAngular) {\n    ngZoneOrOptions = ngZoneOrOptions || {};\n    (ngZoneOrOptions as any).run = cb => cb();\n    options = ngZoneOrOptions as Partial<DevtoolsOptions>;\n  }\n\n  const defaultOptions: Partial<DevtoolsOptions> & { name: string } = { name: 'Akita' };\n  const merged = Object.assign({}, defaultOptions, options);\n\n  const devTools = (window as any).__REDUX_DEVTOOLS_EXTENSION__.connect(merged);\n  let appState = {};\n\n  rootDispatcherSub = rootDispatcher.subscribe(action => {\n    if (action.type === Actions.DELETE_STORE) {\n      const storeName = action.payload.storeName;\n      delete appState[storeName];\n      devTools.send({ type: `[${storeName}] - Delete Store` }, appState);\n    }\n\n    if (action.type === Actions.NEW_STATE) {\n      if (__globalState.skipAction) {\n        __globalState.setSkipAction(false);\n        return;\n      }\n\n      appState = {\n        ...appState,\n        [action.payload.name]: __stores__[action.payload.name]._value()\n      };\n\n      const { type, entityId } = __globalState.currentAction;\n      const storeName = capitalize(action.payload.name);\n      let msg = isDefined(entityId) ? `[${storeName}] - ${type} (ids: ${entityId})` : `[${storeName}] - ${type}`;\n\n      if (options.logTrace) {\n        console.group(msg);\n        console.trace();\n        console.groupEnd();\n      }\n\n      devTools.send({ type: msg, transaction: __globalState.currentT.map(t => t.type) }, appState);\n    }\n  });\n\n  devtoolsSub = devTools.subscribe(message => {\n    if (message.type === 'ACTION') {\n      const [storeName] = message.payload.split('.');\n\n      if (__stores__[storeName]) {\n        (ngZoneOrOptions as NgZoneLike).run(() => {\n          const funcCall = message.payload.replace(storeName, `this['${storeName}']`);\n          try {\n            new Function(`${funcCall}`).call(__stores__);\n          } catch (e) {\n            console.warn('Unknown Method â¹ï¸');\n          }\n        });\n      }\n    }\n\n    if (message.type === 'DISPATCH') {\n      const payloadType = message.payload.type;\n\n      if (payloadType === 'COMMIT') {\n        devTools.init(appState);\n        return;\n      }\n\n      if (message.state) {\n        const rootState = JSON.parse(message.state);\n        for (let i = 0, keys = Object.keys(rootState); i < keys.length; i++) {\n          const storeName = keys[i];\n          if (__stores__[storeName]) {\n            (ngZoneOrOptions as NgZoneLike).run(() => {\n              __stores__[storeName].setState(() => rootState[storeName], false);\n            });\n          }\n        }\n      }\n    }\n  });\n}\n\nfunction capitalize(string) {\n  return string && string.charAt(0).toUpperCase() + string.slice(1);\n}\n","import {coerceArray, isFunction, isUndefined, toBoolean} from '../internal/utils';\nimport {QueryEntity} from '../api/query-entity';\nimport {ID, IDS} from '../api/types';\nimport {Observable} from 'rxjs';\n\n/**\n * Each plugin that wants to add support for entities should extend this interface.\n */\nexport type EntityParam = ID;\n\nexport type EntityCollectionParams = ID | ID[];\n\nexport type RebaseActions<P = any> = { beforeRemove?: Function; beforeAdd?: Function; afterAdd?: (plugin: P) => any; };\n\nconst defaultActions: RebaseActions = {beforeRemove: plugin => plugin.destroy()};\n\nexport abstract class EntityCollectionPlugin<E, P> {\n  protected entities = new Map<ID, P>();\n\n  protected constructor(protected query: QueryEntity<any, E>, private entityIds: EntityCollectionParams) {}\n\n  /**\n   * Get the entity plugin instance.\n   */\n  protected getEntity(id: ID): P {\n    return this.entities.get(id);\n  }\n\n  /**\n   * Whether the entity plugin exist.\n   */\n  protected hasEntity(id: ID): boolean {\n    return this.entities.has(id);\n  }\n\n  /**\n   * Remove the entity plugin instance.\n   */\n  protected removeEntity(id: ID) {\n    return this.entities.delete(id);\n  }\n\n  /**\n   * Set the entity plugin instance.\n   */\n  protected createEntity(id: ID, plugin: P) {\n    return this.entities.set(id, plugin);\n  }\n\n  /**\n   * If the user passes `entityIds` we take them; otherwise, we take all.\n   */\n  protected getIds(): ID[] {\n    return isUndefined(this.entityIds) ? this.query.getSnapshot().ids : coerceArray(this.entityIds);\n  }\n\n  /**\n   * When you call one of the plugin methods, you can pass id/ids or undefined which means all.\n   */\n  protected resolvedIds(ids?): ID[] {\n    return isUndefined(ids) ? this.getIds() : coerceArray(ids);\n  }\n\n  /**\n   * Call this method when you want to activate the plugin on init or when you need to listen to add/remove of entities dynamically.\n   *\n   * For example in your plugin you may do the following:\n   *\n   * this.query.select(state => state.ids).pipe(skip(1)).subscribe(ids => this.activate(ids));\n   */\n  protected rebase(ids: ID[], actions: RebaseActions<P> = defaultActions) {\n    /**\n     *\n     * If the user passes `entityIds` & we have new ids check if we need to add/remove instances.\n     *\n     * This phase will be called only upon update.\n     */\n    if (toBoolean(ids)) {\n      /**\n       * Which means all\n       */\n      if (isUndefined(this.entityIds)) {\n        for (let i = 0, len = ids.length; i < len; i++) {\n          const entityId = ids[i];\n          if (this.hasEntity(entityId) === false) {\n            isFunction(actions.beforeAdd) && actions.beforeAdd(entityId);\n            const plugin = this.instantiatePlugin(entityId);\n            this.entities.set(entityId, plugin);\n            isFunction(actions.afterAdd) && actions.afterAdd(plugin);\n          }\n        }\n\n        this.entities.forEach((plugin, entityId) => {\n          if (ids.indexOf(entityId) === -1) {\n            isFunction(actions.beforeRemove) && actions.beforeRemove(plugin);\n            this.removeEntity(entityId);\n          }\n        });\n      } else {\n        /**\n         * Which means the user passes specific ids\n         */\n        const _ids = coerceArray(this.entityIds);\n        for (let i = 0, len = _ids.length; i < len; i++) {\n          const entityId = _ids[i];\n          /** The Entity in current ids and doesn't exist, add it. */\n          if (ids.indexOf(entityId) > -1 && this.hasEntity(entityId) === false) {\n            isFunction(actions.beforeAdd) && actions.beforeAdd(entityId);\n            const plugin = this.instantiatePlugin(entityId);\n            this.entities.set(entityId, plugin);\n            isFunction(actions.afterAdd) && actions.afterAdd(plugin);\n          } else {\n            this.entities.forEach((plugin, entityId) => {\n              /** The Entity not in current ids and exists, remove it. */\n              if (ids.indexOf(entityId) === -1 && this.hasEntity(entityId) === true) {\n                isFunction(actions.beforeRemove) && actions.beforeRemove(plugin);\n                this.removeEntity(entityId);\n              }\n            });\n          }\n        }\n      }\n    } else {\n      /**\n       * Otherwise, start with the provided ids or all.\n       */\n      this.getIds().forEach(id => {\n        if (!this.hasEntity(id)) this.createEntity(id, this.instantiatePlugin(id))\n      });\n    }\n  }\n\n  /**\n   * Listen for add/remove entities.\n   */\n  protected selectIds(): Observable<ID[]> {\n    return this.query.select(state => state.ids);\n  }\n\n  /**\n   * Base method for activation, you can override it if you need to.\n   */\n  protected activate(ids?: ID[]) {\n    this.rebase(ids);\n  }\n\n  /**\n   * This method is responsible for plugin instantiation.\n   *\n   * For example:\n   * return new StateHistory(this.query, this.params, id) as P;\n   */\n  protected abstract instantiatePlugin(id: ID): P;\n\n  /**\n   * This method is responsible for cleaning.\n   */\n  public abstract destroy(id?: ID);\n\n  /**\n   * Loop over each id and invoke the plugin method.\n   */\n  protected forEachId(ids: IDS, cb: (entity: P) => any) {\n    const _ids = this.resolvedIds(ids);\n\n    for (let i = 0, len = _ids.length; i < len; i++) {\n      const id = _ids[i];\n      if (this.hasEntity(id)) {\n        cb(this.getEntity(id));\n      }\n    }\n  }\n}\n","import { filter, pairwise } from 'rxjs/operators';\nimport { __globalState } from '../../internal/global-state';\nimport { toBoolean } from '../../internal/utils';\nimport { AkitaPlugin, Queries } from '../plugin';\nimport { EntityParam } from '../entity-collection-plugin';\n\nexport interface StateHistoryParams {\n  maxAge?: number;\n}\n\nexport class StateHistoryPlugin<E = any, S = any> extends AkitaPlugin<E, S> {\n  /** Allow skipping an update from outside */\n  private skip = false;\n\n  private history = {\n    past: [],\n    present: null,\n    future: []\n  };\n\n  /** Skip the update when redo/undo */\n  private skipUpdate = false;\n  private subscription;\n\n  constructor(protected query: Queries<E, S>, private params: StateHistoryParams = {}, private _entityId?: EntityParam) {\n    super(query, {\n      resetFn: () => this.clear()\n    });\n    params.maxAge = toBoolean(params.maxAge) ? params.maxAge : 10;\n    this.activate();\n  }\n\n  get hasPast() {\n    return this.history.past.length > 0;\n  }\n\n  get hasFuture() {\n    return this.history.future.length > 0;\n  }\n\n  activate() {\n    this.history.present = this.getSource(this._entityId);\n    this.subscription = this.selectSource(this._entityId)\n      .pipe(pairwise())\n      .subscribe(([past, present]) => {\n        if (this.skip) {\n          this.skip = false;\n          return;\n        }\n        if (!this.skipUpdate) {\n          if (this.history.past.length === this.params.maxAge) {\n            this.history.past = this.history.past.slice(1);\n          }\n          this.history.past = [...this.history.past, past];\n          this.history.present = present;\n        }\n      });\n  }\n\n  undo() {\n    if (this.history.past.length > 0) {\n      const { past, present, future } = this.history;\n      const previous = past[past.length - 1];\n      const newPast = past.slice(0, past.length - 1);\n\n      this.history.past = newPast;\n      this.history.present = previous;\n      this.history.future = [present, ...this.history.future];\n      this.update();\n    }\n  }\n\n  redo() {\n    if (this.history.future.length > 0) {\n      const { past, present, future } = this.history;\n      const next = this.history.future[0];\n      const newFuture = this.history.future.slice(1);\n      this.history.past = [...past, present];\n      this.history.present = next;\n      this.history.future = newFuture;\n      this.update('Redo');\n    }\n  }\n\n  jumpToPast(index: number) {\n    if (index < 0 || index >= this.history.past.length) return;\n\n    const { past, future } = this.history;\n    /**\n     *\n     * const past = [1, 2, 3, 4, 5];\n     *\n     * newPast = past.slice(0, 2) = [1, 2];\n     * present = past[index] = 3;\n     * [...past.slice(2 + 1), ...future] = [4, 5];\n     *\n     */\n    const newPast = past.slice(0, index);\n    const newFuture = [...past.slice(index + 1), ...future];\n    const newPresent = past[index];\n    this.history.past = newPast;\n    this.history.present = newPresent;\n    this.history.future = newFuture;\n    this.update();\n  }\n\n  jumpToFuture(index: number) {\n    if (index < 0 || index >= this.history.future.length) return;\n\n    const { past, future } = this.history;\n\n    const newPast = [...past, ...future.slice(0, index)];\n    const newPresent = future[index];\n    const newFuture = future.slice(index + 1);\n\n    this.history.past = newPast;\n    this.history.present = newPresent;\n    this.history.future = newFuture;\n    this.update('Redo');\n  }\n\n  clear() {\n    this.history = {\n      past: [],\n      present: null,\n      future: []\n    };\n  }\n\n  destroy(clearHistory = false) {\n    if (clearHistory) {\n      this.clear();\n    }\n    this.subscription.unsubscribe();\n  }\n\n  ignoreNext() {\n    this.skip = true;\n  }\n\n  private update(action = 'Undo') {\n    this.skipUpdate = true;\n    __globalState.setCustomAction({ type: `@StateHistory - ${action}` });\n    this.updateStore(this.history.present, this._entityId);\n    this.skipUpdate = false;\n  }\n}\n","import { ID, IDS } from '../../api/types';\nimport { QueryEntity } from '../../api/query-entity';\nimport { StateHistoryPlugin, StateHistoryParams } from './state-history-plugin';\nimport { toBoolean } from '../../internal/utils';\nimport { skip } from 'rxjs/operators';\nimport { EntityCollectionPlugin, EntityCollectionParams } from '../entity-collection-plugin';\n\nexport interface StateHistoryEntityParams extends StateHistoryParams {\n  entityIds?: EntityCollectionParams;\n}\n\nexport class EntityStateHistoryPlugin<E, P extends StateHistoryPlugin<E, any> = StateHistoryPlugin<E, any>> extends EntityCollectionPlugin<E, P> {\n  constructor(protected query: QueryEntity<any, E>, protected readonly params: StateHistoryEntityParams = {}) {\n    super(query, params.entityIds);\n    params.maxAge = toBoolean(params.maxAge) ? params.maxAge : 10;\n    this.activate();\n    this.selectIds()\n      .pipe(skip(1))\n      .subscribe(ids => this.activate(ids));\n  }\n\n  redo(ids?: IDS) {\n    this.forEachId(ids, e => e.redo());\n  }\n\n  undo(ids?: IDS) {\n    this.forEachId(ids, e => e.undo());\n  }\n\n  hasPast(id: ID) {\n    if (this.hasEntity(id)) {\n      return this.getEntity(id).hasPast;\n    }\n  }\n\n  hasFuture(id: ID) {\n    if (this.hasEntity(id)) {\n      return this.getEntity(id).hasFuture;\n    }\n  }\n\n  jumpToFuture(ids: IDS, index: number) {\n    this.forEachId(ids, e => e.jumpToFuture(index));\n  }\n\n  jumpToPast(ids: IDS, index: number) {\n    this.forEachId(ids, e => e.jumpToPast(index));\n  }\n\n  clear(ids?: IDS) {\n    this.forEachId(ids, e => e.clear());\n  }\n\n  destroy(ids?: IDS, clearHistory = false) {\n    this.forEachId(ids, e => e.destroy(clearHistory));\n  }\n\n  ignoreNext(ids?: IDS) {\n    this.forEachId(ids, e => e.ignoreNext());\n  }\n\n  protected instantiatePlugin(id: ID) {\n    return new StateHistoryPlugin<E, any>(this.query, this.params, id) as P;\n  }\n}\n","import { AkitaPlugin, Queries } from '../plugin';\nimport { QueryEntity } from '../../api/query-entity';\nimport { BehaviorSubject, Observable, Subject, Subscription, combineLatest } from 'rxjs';\nimport { distinctUntilChanged, map, skip } from 'rxjs/operators';\nimport { coerceArray, isFunction, isUndefined, toBoolean } from '../../internal/utils';\nimport { EntityParam } from '../entity-collection-plugin';\nimport { __globalState } from '../../internal/global-state';\nimport { Query } from '../../api/query';\n\ntype Head<StoreState = any, Entity = any> = StoreState | Partial<StoreState> | Entity;\n\nexport type DirtyCheckComparator<Entity> = (head: Entity, current: Entity) => boolean;\n\nexport type DirtyCheckParams<StoreState = any> = {\n  comparator?: DirtyCheckComparator<StoreState>;\n  watchProperty?: keyof StoreState | (keyof StoreState)[];\n};\n\nexport const dirtyCheckDefaultParams = {\n  comparator: (head, current) => JSON.stringify(head) !== JSON.stringify(current)\n};\n\nexport function getNestedPath(nestedObj, path: string) {\n  const pathAsArray: string[] = path.split('.');\n  return pathAsArray.reduce((obj, key) => (obj && obj[key] !== 'undefined' ? obj[key] : undefined), nestedObj);\n}\n\nexport type DirtyCheckResetParams<StoreState = any> = {\n  updateFn?: StoreState | ((head: StoreState, current: StoreState) => any);\n};\n\nexport class DirtyCheckPlugin<Entity = any, StoreState = any> extends AkitaPlugin<Entity, StoreState> {\n  private head: Head<StoreState, Entity>;\n  private dirty = new BehaviorSubject(false);\n  private subscription: Subscription;\n  private active = false;\n  private _reset = new Subject();\n\n  isDirty$: Observable<boolean> = this.dirty.asObservable().pipe(distinctUntilChanged());\n  reset$ = this._reset.asObservable();\n\n  constructor(protected query: Queries<Entity, StoreState>, private params?: DirtyCheckParams, private _entityId?: EntityParam) {\n    super(query);\n    this.params = { ...dirtyCheckDefaultParams, ...params };\n    if (this.params.watchProperty) {\n      let watchProp = coerceArray(this.params.watchProperty) as any[];\n      if (query instanceof QueryEntity && watchProp.includes('entities') && !watchProp.includes('ids')) {\n        watchProp.push('ids');\n      }\n      this.params.watchProperty = watchProp;\n    }\n  }\n\n  reset(params: DirtyCheckResetParams = {}) {\n    let currentValue = this.head;\n    if (isFunction(params.updateFn)) {\n      if (this.isEntityBased(this._entityId)) {\n        currentValue = params.updateFn(this.head, (this.getQuery() as QueryEntity<StoreState, Entity>).getEntity(this._entityId));\n      } else {\n        currentValue = params.updateFn(this.head, (this.getQuery() as Query<StoreState>).getSnapshot());\n      }\n    }\n    __globalState.setCustomAction({ type: `@DirtyCheck - Revert` });\n    this.updateStore(currentValue, this._entityId);\n    this._reset.next();\n  }\n\n  setHead() {\n    if (!this.active) {\n      this.activate();\n      this.active = true;\n    } else {\n      this.head = this._getHead();\n    }\n    this.updateDirtiness(false);\n    return this;\n  }\n\n  isDirty(): boolean {\n    return toBoolean(this.dirty.value);\n  }\n\n  hasHead() {\n    return toBoolean(this.getHead());\n  }\n\n  destroy() {\n    this.head = null;\n    this.subscription && this.subscription.unsubscribe();\n    this._reset && this._reset.complete();\n  }\n\n  isPathDirty(path: string) {\n    const head = this.getHead();\n    const current = (this.getQuery() as Query<StoreState>).getSnapshot();\n    const currentPathValue = getNestedPath(current, path);\n    const headPathValue = getNestedPath(head, path);\n\n    return this.params.comparator(currentPathValue, headPathValue);\n  }\n\n  protected getHead() {\n    return this.head;\n  }\n\n  private activate() {\n    this.head = this._getHead();\n    /** if we are tracking specific properties select only the relevant ones */\n    const source = this.params.watchProperty\n      ? (this.params.watchProperty as (keyof StoreState)[]).map(prop =>\n          this.query.select(state => state[prop]).pipe(\n            map(val => ({\n              val,\n              __akitaKey: prop\n            }))\n          )\n        )\n      : [this.selectSource(this._entityId)];\n    this.subscription = combineLatest(...source)\n      .pipe(skip(1))\n      .subscribe((currentState: any[]) => {\n        if (isUndefined(this.head)) return;\n        /** __akitaKey is used to determine if we are tracking a specific property or a store change */\n        const isChange = currentState.some(state => {\n          const head = state.__akitaKey ? this.head[state.__akitaKey as any] : this.head;\n          const compareTo = state.__akitaKey ? state.val : state;\n\n          return this.params.comparator(head, compareTo);\n        });\n\n        this.updateDirtiness(isChange);\n      });\n  }\n\n  private updateDirtiness(isDirty: boolean) {\n    this.dirty.next(isDirty);\n  }\n\n  private _getHead(): Head<StoreState, Entity> {\n    let head: Head<StoreState, Entity> = this.getSource(this._entityId);\n    if (this.params.watchProperty) {\n      head = this.getWatchedValues(head as StoreState);\n    }\n    return head;\n  }\n\n  private getWatchedValues(source: StoreState): Partial<StoreState> {\n    return (this.params.watchProperty as (keyof StoreState)[]).reduce(\n      (watched, prop) => {\n        watched[prop] = source[prop];\n        return watched;\n      },\n      {} as Partial<StoreState>\n    );\n  }\n}\n","import { HashMap, ID, IDS } from '../../api/types';\nimport {\n  DirtyCheckComparator,\n  dirtyCheckDefaultParams,\n  DirtyCheckPlugin,\n  DirtyCheckResetParams,\n  getNestedPath\n} from './dirty-check-plugin';\nimport { QueryEntity } from '../../api/query-entity';\nimport { EntityCollectionPlugin } from '../entity-collection-plugin';\nimport { map, skip } from 'rxjs/operators';\nimport { Observable } from 'rxjs';\n\nexport type DirtyCheckCollectionParams<E> = {\n  comparator?: DirtyCheckComparator<E>;\n  entityIds?: ID | ID[];\n};\n\nexport class EntityDirtyCheckPlugin<E, P extends DirtyCheckPlugin<E, any> = DirtyCheckPlugin<E, any>> extends EntityCollectionPlugin<E, P> {\n  /**\n   * @deprecated Use someDirty$ instead\n   */\n  isSomeDirty$: Observable<boolean> = this.query.select(state => state.entities).pipe(map((entities: any) => this.checkSomeDirty(entities)));\n\n  someDirty$ = this.isSomeDirty$;\n  someDirty = this.isSomeDirty;\n\n  constructor(protected query: QueryEntity<any, E>, private readonly params: DirtyCheckCollectionParams<E> = {}) {\n    super(query, params.entityIds);\n    this.params = { ...dirtyCheckDefaultParams, ...params };\n    this.activate();\n    this.selectIds()\n      .pipe(skip(1))\n      .subscribe(ids => {\n        this.rebase(ids, { afterAdd: plugin => plugin.setHead() });\n      });\n  }\n\n  setHead(ids?: IDS) {\n    this.forEachId(ids, e => e.setHead());\n    return this;\n  }\n\n  hasHead(id: ID): boolean {\n    if (this.entities.has(id)) {\n      const entity = this.getEntity(id);\n      return entity.hasHead();\n    }\n\n    return false;\n  }\n\n  reset(ids?: IDS, params: DirtyCheckResetParams = {}) {\n    this.forEachId(ids, e => e.reset(params));\n  }\n\n  isDirty(id: ID): Observable<boolean>;\n  isDirty(id: ID, asObservable: true): Observable<boolean>;\n  isDirty(id: ID, asObservable: false): boolean;\n  isDirty(id: ID, asObservable = true): Observable<boolean> | boolean {\n    if (this.entities.has(id)) {\n      const entity = this.getEntity(id);\n      return asObservable ? entity.isDirty$ : entity.isDirty();\n    }\n\n    return false;\n  }\n\n  /**\n   * @deprecated Use someDirty() instead\n   */\n  isSomeDirty(): boolean {\n    const entities = this.query.getAll({ asObject: true });\n    return this.checkSomeDirty(entities);\n  }\n\n  isPathDirty(id: ID, path: string) {\n    if (this.entities.has(id)) {\n      const head = (this.getEntity(id) as any).getHead();\n      const current = this.query.getEntity(id);\n      const currentPathValue = getNestedPath(current, path);\n      const headPathValue = getNestedPath(head, path);\n\n      return this.params.comparator(currentPathValue, headPathValue);\n    }\n\n    return null;\n  }\n\n  destroy(ids?: IDS) {\n    this.forEachId(ids, e => e.destroy());\n  }\n\n  protected instantiatePlugin(id: ID): P {\n    return new DirtyCheckPlugin(this.query, this.params, id) as P;\n  }\n\n  private checkSomeDirty(entities: HashMap<E>): boolean {\n    const entitiesIds = this.resolvedIds();\n    for (const id of entitiesIds) {\n      const dirty = this.params.comparator((this.getEntity(id) as any).getHead(), entities[id]);\n      if (dirty) {\n        return true;\n      }\n    }\n    return false;\n  }\n}\n","import { isNumber } from '../internal/utils';\nimport { __stores__ } from './store';\nimport { applyTransaction } from './transaction';\n\n/**\n * @example\n *\n * this.peopleStore.update(id, person => ({\n *   guests: increment(person.guests)\n * }));\n */\nexport function increment(value: number, params: { maxValue: number | undefined } = { maxValue: undefined }) {\n  if (isNumber(value) === false) return;\n  if (params.maxValue && value === params.maxValue) return value;\n  return value + 1;\n}\n\n/**\n * @example\n *\n * this.peopleStore.update(id, person => ({\n *   guests: decrement(person.guests)\n * }));\n */\nexport function decrement(value, params: { allowNegative: boolean } = { allowNegative: false }) {\n  if (isNumber(value) === false) return;\n  if (params.allowNegative === false && value === 0) {\n    return value;\n  }\n  return value - 1;\n}\n\n/**\n * Generate random guid\n */\nexport function guid() {\n  return 'xxxxxx4xyx'.replace(/[xy]/g, c => {\n    const r = (Math.random() * 16) | 0,\n      v = c == 'x' ? r : (r & 0x3) | 0x8;\n    return v.toString(16);\n  });\n}\n\nexport interface ResetStoresParams {\n  /**\n   *  By default the whole state is resetted, use this param to exclude stores that you don't want to reset.\n   */\n  exclude: string[];\n}\n\n/**\n *\n * @param options\n */\nexport function resetStores(options?: Partial<ResetStoresParams>) {\n  const defaults: ResetStoresParams = {\n    exclude: []\n  };\n\n  options = Object.assign({}, defaults, options);\n  const stores = Object.keys(__stores__);\n\n  applyTransaction(() => {\n    for (const store of stores) {\n      const s = __stores__[store];\n      if (!options.exclude) {\n        s.reset();\n      } else {\n        if (options.exclude.indexOf(s.storeName) === -1) {\n          s.reset();\n        }\n      }\n    }\n  });\n}\n"],"names":["Observable","tslib_1.__extends","Subject","of","ReplaySubject","map","distinctUntilChanged","BehaviorSubject","take","withLatestFrom","combineLatest","auditTime","switchMap","tslib_1.__spread","filter","delay","from","tslib_1.__decorate","debounceTime","skip","pairwise","tslib_1.__values"],"mappings":"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"}
