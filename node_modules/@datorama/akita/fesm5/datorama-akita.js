import { __assign, __extends, __spread, __values, __decorate, __metadata, __read, __rest } from 'tslib';
import { Observable, Subject, of, BehaviorSubject, ReplaySubject, combineLatest, from } from 'rxjs';
import { distinctUntilChanged, map, take, auditTime, switchMap, withLatestFrom, filter, delay, debounceTime, skip, pairwise } from 'rxjs/operators';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
/**
 * Wraps the provided value in an array, unless the provided _value is an array.
 * @template T
 * @param {?} value
 * @return {?}
 */
function coerceArray(value) {
    return Array.isArray(value) ? value : [value];
}
/**
 * Check if a value is an object
 * @param {?} value
 * @return {?}
 */
function isObject(value) {
    return Object.prototype.toString.call(value) === '[object Object]';
}
/**
 * @param {?} value
 * @return {?}
 */
function isPlainObject(value) {
    return toBoolean(value) && value.constructor.name === 'Object';
}
/**
 * @param {?} value
 * @return {?}
 */
function isFunction(value) {
    return typeof value === 'function';
}
/**
 * @param {?} value
 * @return {?}
 */
function toBoolean(value) {
    return value != null && "" + value !== 'false';
}
/**
 * @param {?} value
 * @return {?}
 */
function isUndefined(value) {
    return value === undefined;
}
/**
 * @param {?} v
 * @return {?}
 */
function isNil(v) {
    return v === null || v === undefined;
}
/**
 * Check if entity exists
 * @template E
 * @param {?} id
 * @param {?} entities
 * @return {?}
 */
function entityExists(id, entities) {
    return entities.hasOwnProperty(id);
}
/**
 * Observable that emits empty value and complete
 * @template T
 * @return {?}
 */
function noop() {
    return new Observable(function (observer) {
        observer.next();
        observer.complete();
    });
}
/**
 * @param {?} value
 * @return {?}
 */
function isObservable(value) {
    return toBoolean(value) && isFunction(value.subscribe);
}
/**
 * @param {?} val
 * @return {?}
 */
function isString(val) {
    return typeof val === 'string';
}
/**
 * @param {?} value
 * @return {?}
 */
function isNumber(value) {
    return typeof value === 'number';
}
/**
 * @param {?} val
 * @return {?}
 */
function isDefined(val) {
    return val !== null && typeof val !== 'undefined';
}
/**
 * Check if the active entity exist
 * @template E
 * @param {?} state
 * @return {?}
 */
function resetActive(state) {
    return isActiveState(state) && entityExists(((/** @type {?} */ (state))).active, state.entities) === false;
}
/**
 * Check if the store supports active entity
 * @template E
 * @param {?} state
 * @return {?}
 */
function isActiveState(state) {
    return ((/** @type {?} */ (state))).hasOwnProperty('active');
}
/**
 * setValue(state, 'todos.ui', { filter: {}})
 * @type {?}
 */
var setValue = function (obj, prop, val) {
    /** @type {?} */
    var split = prop.split('.');
    if (split.length === 1)
        return val;
    obj = __assign({}, obj);
    /** @type {?} */
    var lastIndex = split.length - 2;
    /** @type {?} */
    var removeStoreName = prop.split('.').slice(1);
    removeStoreName.reduce(function (acc, part, index) {
        if (index === lastIndex) {
            acc[part] = val;
        }
        else {
            acc[part] = __assign({}, acc[part]);
        }
        return acc && acc[part];
    }, obj);
    return obj;
};
/**
 * getValue(state, 'todos.ui')
 * @type {?}
 */
var getValue = function (obj, prop) {
    /** return the whole state  */
    if (prop.split('.').length === 1) {
        return obj;
    }
    /** @type {?} */
    var removeStoreName = prop
        .split('.')
        .slice(1)
        .join('.');
    return removeStoreName.split('.').reduce(function (acc, part) { return acc && acc[part]; }, obj);
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
var AkitaError = /** @class */ (function (_super) {
    __extends(AkitaError, _super);
    function AkitaError(message) {
        return _super.call(this, message) || this;
    }
    return AkitaError;
}(Error));
var AkitaImmutabilityError = /** @class */ (function (_super) {
    __extends(AkitaImmutabilityError, _super);
    function AkitaImmutabilityError(storeName) {
        return _super.call(this, "The new state should be immutable. Make sure to return a new immutable state. \n store: \n " + storeName) || this;
    }
    return AkitaImmutabilityError;
}(AkitaError));
var AkitaEntityNotExistsError = /** @class */ (function (_super) {
    __extends(AkitaEntityNotExistsError, _super);
    function AkitaEntityNotExistsError(id) {
        return _super.call(this, "Entity " + id + " does not exists") || this;
    }
    return AkitaEntityNotExistsError;
}(AkitaError));
var AkitaNoActiveError = /** @class */ (function (_super) {
    __extends(AkitaNoActiveError, _super);
    function AkitaNoActiveError() {
        return _super.call(this, "Active is null/undefined") || this;
    }
    return AkitaNoActiveError;
}(AkitaError));
var AkitaInvalidEntityState = /** @class */ (function (_super) {
    __extends(AkitaInvalidEntityState, _super);
    function AkitaInvalidEntityState() {
        return _super.call(this, "Entity state is invalid") || this;
    }
    return AkitaInvalidEntityState;
}(AkitaError));
var AkitaUpdateIdKeyError = /** @class */ (function (_super) {
    __extends(AkitaUpdateIdKeyError, _super);
    function AkitaUpdateIdKeyError() {
        return _super.call(this, "Updating entity id is not permitted when updating many entities") || this;
    }
    return AkitaUpdateIdKeyError;
}(AkitaError));
/**
 * @param {?} id
 * @param {?} entities
 * @return {?}
 */
function assertEntityExists(id, entities) {
    if (!entityExists(id, entities)) {
        throw new AkitaEntityNotExistsError(id);
    }
}
/**
 * @param {?} store
 * @return {?}
 */
function assertActive(store) {
    if (!toBoolean(store.active)) {
        throw new AkitaNoActiveError();
    }
}
/**
 * @param {?} state
 * @return {?}
 */
function assertEntityState(state) {
    /** @type {?} */
    var assertEntities = isObject(state);
    if (!assertEntities) {
        throw new AkitaInvalidEntityState();
    }
}
/**
 * @param {?} name
 * @param {?} className
 * @return {?}
 */
function assertDecorator(name, className) {
    if (!name) {
        console.error("@StoreConfig({ name }) is missing in " + className);
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
var CRUD = /** @class */ (function () {
    function CRUD() {
    }
    /**
     * @template S, E
     * @param {?} state
     * @param {?} entities
     * @param {?} entityClass
     * @param {?} idKey
     * @return {?}
     */
    CRUD.prototype._set = /**
     * @template S, E
     * @param {?} state
     * @param {?} entities
     * @param {?} entityClass
     * @param {?} idKey
     * @return {?}
     */
    function (state, entities, entityClass, idKey) {
        /** @type {?} */
        var ids;
        /** @type {?} */
        var normalized;
        if (((/** @type {?} */ (entities))).ids && ((/** @type {?} */ (entities))).entities) {
            ids = ((/** @type {?} */ (entities))).ids;
            normalized = ((/** @type {?} */ (entities))).entities;
        }
        else {
            /** @type {?} */
            var isArray = Array.isArray(entities);
            normalized = entities;
            if (isArray) {
                normalized = (/** @type {?} */ (this.keyBy((/** @type {?} */ (entities)), entityClass, idKey)));
            }
            else {
                assertEntityState(entities);
            }
            ids = isArray ? ((/** @type {?} */ (entities))).map(function (entity) { return entity[idKey]; }) : Object.keys((/** @type {?} */ (normalized))).map(function (id) { return entities[id][idKey]; });
        }
        /** @type {?} */
        var newState = __assign({}, ((/** @type {?} */ (state))), { entities: normalized, ids: ids, loading: false });
        if (resetActive(newState)) {
            newState.active = null;
        }
        return newState;
    };
    /**
     * @template T
     * @param {?} state
     * @param {?} id
     * @param {?} entity
     * @return {?}
     */
    CRUD.prototype._replaceEntity = /**
     * @template T
     * @param {?} state
     * @param {?} id
     * @param {?} entity
     * @return {?}
     */
    function (state, id, entity) {
        var _a;
        return __assign({}, ((/** @type {?} */ (state))), { entities: __assign({}, state.entities, (_a = {}, _a[id] = entity, _a)) });
    };
    /**
     * @template S, E
     * @param {?} state
     * @param {?} entities
     * @param {?} idKey
     * @param {?=} options
     * @return {?}
     */
    CRUD.prototype._add = /**
     * @template S, E
     * @param {?} state
     * @param {?} entities
     * @param {?} idKey
     * @param {?=} options
     * @return {?}
     */
    function (state, entities, idKey, options) {
        if (options === void 0) { options = {}; }
        /** @type {?} */
        var addedEntities = {};
        /** @type {?} */
        var addedIds = [];
        for (var i = 0; i < entities.length; i++) {
            /** @type {?} */
            var entity = entities[i];
            /** @type {?} */
            var entityId = entity[idKey];
            if (!entityExists(entityId, state.entities)) {
                addedEntities[entityId] = entity;
                if (options.prepend)
                    addedIds.unshift(entityId);
                else
                    addedIds.push(entityId);
            }
        }
        return __assign({}, ((/** @type {?} */ (state))), { entities: __assign({}, state.entities, addedEntities), ids: options.prepend ? __spread(addedIds, state.ids) : __spread(state.ids, addedIds) });
    };
    /**
     * @template T
     * @param {?} state
     * @param {?} ids
     * @param {?} newStateOrFn
     * @param {?} idKey
     * @return {?}
     */
    CRUD.prototype._update = /**
     * @template T
     * @param {?} state
     * @param {?} ids
     * @param {?} newStateOrFn
     * @param {?} idKey
     * @return {?}
     */
    function (state, ids, newStateOrFn, idKey) {
        /** @type {?} */
        var updatedEntities = {};
        /** @type {?} */
        var isUpdatingIdKey = false;
        /** @type {?} */
        var idToUpdate;
        for (var i = 0; i < ids.length; i++) {
            /** @type {?} */
            var id = ids[i];
            idToUpdate = id;
            assertEntityExists(id, state.entities);
            /** @type {?} */
            var oldEntity = state.entities[id];
            /** @type {?} */
            var newState = isFunction(newStateOrFn) ? newStateOrFn(oldEntity) : newStateOrFn;
            if (newState.hasOwnProperty(idKey) && newState[idKey] !== oldEntity[idKey]) {
                if (ids.length > 1) {
                    throw new AkitaUpdateIdKeyError();
                }
                isUpdatingIdKey = true;
                idToUpdate = newState[idKey];
            }
            /** @type {?} */
            var newEntity = void 0;
            /** @type {?} */
            var merged = __assign({}, oldEntity, newState);
            if (isPlainObject(oldEntity)) {
                newEntity = merged;
            }
            else {
                /**
                 * In case that new state is class of it's own, there's
                 * a possibility that it will be different than the old
                 * class.
                 * For example, Old state is an instance of animal class
                 * and new state is instance of person class.
                 * To avoid run over new person class with the old animal
                 * class we check if the new state is a class of it's own.
                 * If so, use it. Otherwise, use the old state class
                 */
                if (isPlainObject(newState)) {
                    newEntity = new oldEntity.constructor(merged);
                }
                else {
                    newEntity = new ((/** @type {?} */ (newState))).constructor(merged);
                }
            }
            updatedEntities[idToUpdate] = newEntity;
        }
        /** @type {?} */
        var updatedIds = state.ids;
        /** @type {?} */
        var stateEntities = state.entities;
        if (isUpdatingIdKey) {
            var _a = __read(ids, 1), id_1 = _a[0];
            var _b = state.entities, _c = id_1, deletedEntity = _b[_c], rest = __rest(_b, [typeof _c === "symbol" ? _c : _c + ""]);
            stateEntities = rest;
            updatedIds = state.ids.map(function (current) { return (current === id_1 ? idToUpdate : current); });
        }
        return __assign({}, ((/** @type {?} */ (state))), { entities: __assign({}, stateEntities, updatedEntities), ids: updatedIds });
    };
    /**
     * @template T
     * @param {?} state
     * @param {?} ids
     * @return {?}
     */
    CRUD.prototype._remove = /**
     * @template T
     * @param {?} state
     * @param {?} ids
     * @return {?}
     */
    function (state, ids) {
        if (!ids)
            return this._removeAll(state);
        /** @type {?} */
        var removed = ids.reduce(function (acc, id) {
            var _a = id, entity = acc[_a], rest = __rest(acc, [typeof _a === "symbol" ? _a : _a + ""]);
            return rest;
        }, state.entities);
        /** @type {?} */
        var newState = __assign({}, ((/** @type {?} */ (state))), { entities: removed, ids: state.ids.filter(function (current) { return ids.indexOf(current) === -1; }) });
        if (resetActive(newState)) {
            newState.active = null;
        }
        return newState;
    };
    /**
     * @template T
     * @param {?} state
     * @return {?}
     */
    CRUD.prototype._removeAll = /**
     * @template T
     * @param {?} state
     * @return {?}
     */
    function (state) {
        /** @type {?} */
        var newState = __assign({}, ((/** @type {?} */ (state))), { entities: {}, ids: [], active: null });
        return newState;
    };
    /**
     * @param {?} entities
     * @param {?=} entityClass
     * @param {?=} id
     * @return {?}
     */
    CRUD.prototype.keyBy = /**
     * @param {?} entities
     * @param {?=} entityClass
     * @param {?=} id
     * @return {?}
     */
    function (entities, entityClass, id) {
        if (id === void 0) { id = 'id'; }
        /** @type {?} */
        var acc = {};
        for (var i = 0, len = entities.length; i < len; i++) {
            /** @type {?} */
            var entity = entities[i];
            acc[entity[id]] = entityClass ? new entityClass(entity) : entity;
        }
        return acc;
    };
    return CRUD;
}());
/** @type {?} */
var _crud = new CRUD();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
var AkitaGlobals = /** @class */ (function () {
    function AkitaGlobals() {
        this.skipAction = false;
        this.skipTransactionMsg = false;
        this.currentT = [];
        this.activeTransactions = 0;
    }
    /**
     * @param {?} _action
     * @return {?}
     */
    AkitaGlobals.prototype.setAction = /**
     * @param {?} _action
     * @return {?}
     */
    function (_action) {
        if (this.customAction) {
            this.currentAction = this.customAction;
            this.customAction = null;
            this.skipTransactionMsg = false;
        }
        else {
            if (this.activeTransactions === 0) {
                this.currentAction = _action;
            }
        }
        if (this.activeTransactions > 0) {
            this.currentT.push(_action);
        }
    };
    /**
     * @param {?} action
     * @param {?=} skipTransactionMsg
     * @return {?}
     */
    AkitaGlobals.prototype.setCustomAction = /**
     * @param {?} action
     * @param {?=} skipTransactionMsg
     * @return {?}
     */
    function (action, skipTransactionMsg) {
        if (skipTransactionMsg === void 0) { skipTransactionMsg = false; }
        this.currentAction = this.customAction = action;
        this.skipTransactionMsg = skipTransactionMsg;
    };
    /**
     * @param {?=} skip
     * @return {?}
     */
    AkitaGlobals.prototype.setSkipAction = /**
     * @param {?=} skip
     * @return {?}
     */
    function (skip$$1) {
        if (skip$$1 === void 0) { skip$$1 = true; }
        this.skipAction = skip$$1;
    };
    return AkitaGlobals;
}());
/** @type {?} */
var __globalState = new AkitaGlobals();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
/**
 * Start a new transaction batch
 * @return {?}
 */
function startBatch() {
    if (!isTransactionInProcess()) {
        __globalState.batchTransaction = new Subject();
    }
    __globalState.activeTransactions++;
}
/**
 * End the transaction
 * @return {?}
 */
function endBatch() {
    if (--__globalState.activeTransactions === 0) {
        __globalState.batchTransaction.next(true);
        __globalState.batchTransaction.complete();
    }
}
/**
 * Whether we're inside batch
 * @return {?}
 */
function isTransactionInProcess() {
    return __globalState.activeTransactions > 0;
}
/**
 *
 * @return {?}
 */
function commit() {
    return __globalState.batchTransaction ? __globalState.batchTransaction.asObservable() : of(true);
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
/**
 * @param {?} o
 * @return {?}
 */
function deepFreeze(o) {
    Object.freeze(o);
    /** @type {?} */
    var oIsFunction = typeof o === 'function';
    /** @type {?} */
    var hasOwnProp = Object.prototype.hasOwnProperty;
    Object.getOwnPropertyNames(o).forEach(function (prop) {
        if (hasOwnProp.call(o, prop) &&
            (oIsFunction ? prop !== 'caller' && prop !== 'callee' && prop !== 'arguments' : true) &&
            o[prop] !== null &&
            (typeof o[prop] === 'object' || typeof o[prop] === 'function') &&
            !Object.isFrozen(o[prop])) {
            deepFreeze(o[prop]);
        }
    });
    return o;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
/** @type {?} */
var configKey = 'akitaConfig';
/**
 * @param {?} metadata
 * @return {?}
 */
function StoreConfig(metadata) {
    return function (constructor) {
        constructor[configKey] = { idKey: 'id' };
        for (var i = 0, keys = Object.keys(metadata); i < keys.length; i++) {
            /** @type {?} */
            var key = keys[i];
            /* name is preserved read only key */
            if (key === 'name') {
                constructor[configKey]['storeName'] = metadata[key];
            }
            else {
                constructor[configKey][key] = metadata[key];
            }
        }
    };
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
/** @type {?} */
var CONFIG = {
    resettable: false
};
/**
 * @param {?} config
 * @return {?}
 */
function akitaConfig(config) {
    CONFIG = __assign({}, CONFIG, config);
}
/**
 * @return {?}
 */
function getAkitaConfig() {
    return CONFIG;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
/** @type {?} */
var __DEV__ = true;
/** @type {?} */
var isNotBrowser = typeof window === 'undefined';
/** @type {?} */
var __stores__ = {};
/** @type {?} */
var rootDispatcher = new ReplaySubject();
/**
 * @param {?} storeName
 * @param {?=} initialState
 * @return {?}
 */
function nextState(storeName, initialState) {
    if (initialState === void 0) { initialState = false; }
    return {
        type: 2 /* NEW_STATE */,
        payload: {
            name: storeName,
            initialState: initialState
        }
    };
}
/**
 * Enable production mode to disable objectFreeze
 * @return {?}
 */
function enableAkitaProdMode() {
    __DEV__ = false;
}
/**
 * @return {?}
 */
function isDev() {
    return __DEV__;
}
/**
 * The Root Store that every sub store needs to inherit and
 * invoke `super` with the initial state.
 * @template S
 */
var  /**
 * The Root Store that every sub store needs to inherit and
 * invoke `super` with the initial state.
 * @template S
 */
Store = /** @class */ (function () {
    /**
     *
     * Initial the store with the state
     */
    function Store(initialState, options) {
        if (options === void 0) { options = {}; }
        this.options = options;
        /**
         * Whether we are inside transaction *
         */
        this.inTransaction = false;
        this._isPristine = true;
        this.destroy = this.ngOnDestroy;
        __globalState.setAction({ type: '@@INIT' });
        __stores__[this.storeName] = this;
        this.setState(function () { return initialState; });
        rootDispatcher.next({
            type: 0 /* NEW_STORE */,
            payload: { store: this }
        });
        isDev() && assertDecorator(this.storeName, this.constructor.name);
        if (this.isRessetable()) {
            this._initialState = initialState;
        }
    }
    /**
     * @param {?=} loading
     * @return {?}
     */
    Store.prototype.setLoading = /**
     * @param {?=} loading
     * @return {?}
     */
    function (loading) {
        if (loading === void 0) { loading = false; }
        if (loading !== ((/** @type {?} */ (this._value()))).loading) {
            isDev() && __globalState.setAction({ type: 'Set Loading' });
            this.setState(function (s) { return ((/** @type {?} */ (__assign({}, ((/** @type {?} */ (s))), { loading: loading })))); });
        }
    };
    /**
     * Update the store's error state.
     */
    /**
     * Update the store's error state.
     * @template T
     * @param {?} error
     * @return {?}
     */
    Store.prototype.setError = /**
     * Update the store's error state.
     * @template T
     * @param {?} error
     * @return {?}
     */
    function (error) {
        if (error !== ((/** @type {?} */ (this._value()))).error) {
            isDev() && __globalState.setAction({ type: 'Set Error' });
            this.setState(function (s) { return ((/** @type {?} */ (__assign({}, ((/** @type {?} */ (s))), { error: error })))); });
        }
    };
    /**
     * Select a slice from the store
     *
     * @example
     * this.store.select(state => state.entities)
     *
     */
    /**
     * Select a slice from the store
     *
     * \@example
     * this.store.select(state => state.entities)
     *
     * @template R
     * @param {?} project
     * @return {?}
     */
    Store.prototype._select = /**
     * Select a slice from the store
     *
     * \@example
     * this.store.select(state => state.entities)
     *
     * @template R
     * @param {?} project
     * @return {?}
     */
    function (project) {
        return this.store$.pipe(map(project), distinctUntilChanged());
    };
    /**
     * @return {?}
     */
    Store.prototype._value = /**
     * @return {?}
     */
    function () {
        return this.storeValue;
    };
    Object.defineProperty(Store.prototype, "config", {
        get: /**
         * @return {?}
         */
        function () {
            return this.constructor[configKey];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Store.prototype, "storeName", {
        get: /**
         * @return {?}
         */
        function () {
            return this.options.storeName || (this.config && this.config['storeName']);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Store.prototype, "idKey", {
        get: /**
         * @return {?}
         */
        function () {
            /**
             * backward compatibility
             * @type {?}
             */
            var newIdKey = this.config && this.config.idKey;
            if (!newIdKey) {
                return this.options.idKey || 'id';
            }
            return newIdKey;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Store.prototype, "isPristine", {
        get: /**
         * @return {?}
         */
        function () {
            return this._isPristine;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * `setState()` is the only way to update a store; It receives a callback function,
     * which gets the current state, and returns a new immutable state,
     * which will be the new value of the store.
     */
    /**
     * `setState()` is the only way to update a store; It receives a callback function,
     * which gets the current state, and returns a new immutable state,
     * which will be the new value of the store.
     * @param {?} newStateFn
     * @param {?=} _rootDispatcher
     * @return {?}
     */
    Store.prototype.setState = /**
     * `setState()` is the only way to update a store; It receives a callback function,
     * which gets the current state, and returns a new immutable state,
     * which will be the new value of the store.
     * @param {?} newStateFn
     * @param {?=} _rootDispatcher
     * @return {?}
     */
    function (newStateFn, _rootDispatcher) {
        if (_rootDispatcher === void 0) { _rootDispatcher = true; }
        /** @type {?} */
        var prevState = this._value();
        this.storeValue = __DEV__ ? deepFreeze(newStateFn(this._value())) : newStateFn(this._value());
        if (prevState === this.storeValue) {
            throw new AkitaImmutabilityError(this.storeName);
        }
        if (!this.store) {
            this.store = new BehaviorSubject(this.storeValue);
            rootDispatcher.next(nextState(this.storeName, true));
            return;
        }
        if (isTransactionInProcess()) {
            this.handleTransaction();
            return;
        }
        this.dispatch(this.storeValue, _rootDispatcher);
    };
    /**
     * Resets the store to it's initial state and set the store to a pristine state.
     */
    /**
     * Resets the store to it's initial state and set the store to a pristine state.
     * @return {?}
     */
    Store.prototype.reset = /**
     * Resets the store to it's initial state and set the store to a pristine state.
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.isRessetable()) {
            __globalState.setAction({ type: 'Reset Store' });
            this.setState(function () { return Object.assign({}, _this._initialState); });
            this.setPristine();
        }
        else {
            throw new AkitaError("You need to enable the reset functionality");
        }
    };
    /**
     * @param {?} newStateOrId
     * @param {?=} newState
     * @return {?}
     */
    Store.prototype.update = /**
     * @param {?} newStateOrId
     * @param {?=} newState
     * @return {?}
     */
    function (newStateOrId, newState) {
        __globalState.setAction({ type: 'Update Store' });
        this.setState(function (state) {
            /** @type {?} */
            var value = isFunction(newStateOrId) ? newStateOrId(state) : newStateOrId;
            /** @type {?} */
            var merged = Object.assign({}, state, value);
            return isPlainObject(state) ? merged : new ((/** @type {?} */ (state))).constructor(merged);
        });
        this.setDirty();
    };
    /**
     * Sets the store to a pristine state.
     */
    /**
     * Sets the store to a pristine state.
     * @return {?}
     */
    Store.prototype.setPristine = /**
     * Sets the store to a pristine state.
     * @return {?}
     */
    function () {
        this._isPristine = true;
    };
    /**
     * Sets the store to a dirty state, indicating that it is not pristine.
     */
    /**
     * Sets the store to a dirty state, indicating that it is not pristine.
     * @return {?}
     */
    Store.prototype.setDirty = /**
     * Sets the store to a dirty state, indicating that it is not pristine.
     * @return {?}
     */
    function () {
        this._isPristine = false;
    };
    /**
     * @param {?} state
     * @param {?=} _rootDispatcher
     * @return {?}
     */
    Store.prototype.dispatch = /**
     * @param {?} state
     * @param {?=} _rootDispatcher
     * @return {?}
     */
    function (state, _rootDispatcher) {
        if (_rootDispatcher === void 0) { _rootDispatcher = true; }
        this.store.next(state);
        if (_rootDispatcher) {
            rootDispatcher.next(nextState(this.storeName));
            isDev() && __globalState.setAction({ type: 'Set State' });
        }
    };
    Object.defineProperty(Store.prototype, "store$", {
        get: /**
         * @return {?}
         */
        function () {
            return this.store.asObservable();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * When the transaction ends dispatch the final value once
     */
    /**
     * When the transaction ends dispatch the final value once
     * @return {?}
     */
    Store.prototype.watchTransaction = /**
     * When the transaction ends dispatch the final value once
     * @return {?}
     */
    function () {
        var _this = this;
        commit().subscribe(function () {
            _this.inTransaction = false;
            if (isDev() && !__globalState.skipTransactionMsg) {
                __globalState.setAction({ type: '@Transaction' });
            }
            _this.dispatch(_this._value());
            __globalState.currentT = [];
            __globalState.skipTransactionMsg = false;
        });
    };
    /**
     * @return {?}
     */
    Store.prototype.isRessetable = /**
     * @return {?}
     */
    function () {
        return this.config.resettable || getAkitaConfig().resettable;
    };
    /**
     * Listen to the transaction stream
     */
    /**
     * Listen to the transaction stream
     * @return {?}
     */
    Store.prototype.handleTransaction = /**
     * Listen to the transaction stream
     * @return {?}
     */
    function () {
        if (!this.inTransaction) {
            this.watchTransaction();
            this.inTransaction = true;
        }
    };
    /**
     * @return {?}
     */
    Store.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (isNotBrowser)
            return;
        if (!((/** @type {?} */ (window))).hmrEnabled && this === __stores__[this.storeName]) {
            delete __stores__[this.storeName];
            rootDispatcher.next({
                type: 1 /* DELETE_STORE */,
                payload: { storeName: this.storeName }
            });
        }
    };
    return Store;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
/**
 * The Root Store that every sub store needs to inherit and
 * invoke `super` with the initial state.
 * @template S, E, ActiveEntity
 */
var  /**
 * The Root Store that every sub store needs to inherit and
 * invoke `super` with the initial state.
 * @template S, E, ActiveEntity
 */
EntityStore = /** @class */ (function (_super) {
    __extends(EntityStore, _super);
    /**
     *
     * Initiate the store with the state
     */
    function EntityStore(initialState, options) {
        if (initialState === void 0) { initialState = {}; }
        if (options === void 0) { options = {}; }
        return _super.call(this, __assign({}, getInitialEntitiesState(), initialState), options) || this;
    }
    Object.defineProperty(EntityStore.prototype, "entities", {
        get: /**
         * @return {?}
         */
        function () {
            return this._value().entities;
        },
        enumerable: true,
        configurable: true
    });
    /**
     *
     * Replace current collection with provided collection
     *
     * @example
     * this.store.set([Entity, Entity]);
     * this.store.set({1: Entity, 2: Entity});
     * this.store.set([{id: 1}, {id: 2}], { entityClass: Product });
     *
     */
    /**
     *
     * Replace current collection with provided collection
     *
     * \@example
     * this.store.set([Entity, Entity]);
     * this.store.set({1: Entity, 2: Entity});
     * this.store.set([{id: 1}, {id: 2}], { entityClass: Product });
     *
     * @param {?} entities
     * @param {?=} options
     * @return {?}
     */
    EntityStore.prototype.set = /**
     *
     * Replace current collection with provided collection
     *
     * \@example
     * this.store.set([Entity, Entity]);
     * this.store.set({1: Entity, 2: Entity});
     * this.store.set([{id: 1}, {id: 2}], { entityClass: Product });
     *
     * @param {?} entities
     * @param {?=} options
     * @return {?}
     */
    function (entities, options) {
        var _this = this;
        if (options === void 0) { options = {}; }
        isDev() && __globalState.setAction({ type: 'Set Entities' });
        this.setState(function (state) { return _crud._set(state, isNil(entities) ? [] : entities, options.entityClass, _this.idKey); });
        this.setDirty();
    };
    /**
     * Create or replace an entity in the store.
     *
     * @example
     * this.store.createOrReplace(3, Entity);
     *
     */
    /**
     * Create or replace an entity in the store.
     *
     * \@example
     * this.store.createOrReplace(3, Entity);
     *
     * @param {?} id
     * @param {?} entity
     * @return {?}
     */
    EntityStore.prototype.createOrReplace = /**
     * Create or replace an entity in the store.
     *
     * \@example
     * this.store.createOrReplace(3, Entity);
     *
     * @param {?} id
     * @param {?} entity
     * @return {?}
     */
    function (id, entity) {
        if (!entityExists(id, this._value().entities)) {
            this.addWhenNotExists(id, entity);
        }
        else {
            isDev() && __globalState.setAction({ type: 'Create or Replace Entity', entityId: [id] });
            this.setState(function (state) { return _crud._replaceEntity(state, id, entity); });
        }
    };
    /**
     *
     * Insert or Update
     */
    /**
     *
     * Insert or Update
     * @param {?} id
     * @param {?} entityOrFn
     * @return {?}
     */
    EntityStore.prototype.upsert = /**
     *
     * Insert or Update
     * @param {?} id
     * @param {?} entityOrFn
     * @return {?}
     */
    function (id, entityOrFn) {
        if (!entityExists(id, this._value().entities)) {
            /** @type {?} */
            var resolve = isFunction(entityOrFn) ? ((/** @type {?} */ (entityOrFn)))({}) : entityOrFn;
            this.addWhenNotExists(id, resolve);
        }
        else {
            this.update(id, (/** @type {?} */ (entityOrFn)));
        }
    };
    /**
     * Add an entity or entities to the store.
     *
     * @example
     * this.store.add([Entity, Entity]);
     * this.store.add(Entity);
     * this.store.add(Entity, { prepend: true });
     */
    /**
     * Add an entity or entities to the store.
     *
     * \@example
     * this.store.add([Entity, Entity]);
     * this.store.add(Entity);
     * this.store.add(Entity, { prepend: true });
     * @param {?} entities
     * @param {?=} options
     * @return {?}
     */
    EntityStore.prototype.add = /**
     * Add an entity or entities to the store.
     *
     * \@example
     * this.store.add([Entity, Entity]);
     * this.store.add(Entity);
     * this.store.add(Entity, { prepend: true });
     * @param {?} entities
     * @param {?=} options
     * @return {?}
     */
    function (entities, options) {
        var _this = this;
        /** @type {?} */
        var toArray = coerceArray(entities);
        if (toArray.length === 0)
            return;
        /**
         * If we pass entities that already exist, we should ignore them
         * @type {?}
         */
        var allExists = toArray.every(function (entity) { return _this._value().ids.indexOf(entity[_this.idKey]) > -1; });
        if (allExists)
            return;
        isDev() && __globalState.setAction({ type: 'Add Entity' });
        this.setState(function (state) { return _crud._add(state, toArray, _this.idKey, options); });
    };
    /**
     * @param {?} idsOrFn
     * @param {?=} newStateOrFn
     * @return {?}
     */
    EntityStore.prototype.update = /**
     * @param {?} idsOrFn
     * @param {?=} newStateOrFn
     * @return {?}
     */
    function (idsOrFn, newStateOrFn) {
        var _this = this;
        /** @type {?} */
        var ids = [];
        /** @type {?} */
        var storeIds = this._value().ids;
        if (isFunction(idsOrFn)) {
            for (var i = 0, len = storeIds.length; i < len; i++) {
                /** @type {?} */
                var id = storeIds[i];
                /** @type {?} */
                var entity = this._value().entities[id];
                if (entity && ((/** @type {?} */ (idsOrFn)))(entity)) {
                    ids.push(id);
                }
            }
        }
        else {
            ids = toBoolean(idsOrFn) ? coerceArray(idsOrFn) : storeIds;
        }
        if (ids.length === 0)
            return;
        isDev() && __globalState.setAction({ type: 'Update Entity', entityId: ids });
        this.setState(function (state) {
            return _crud._update(state, ids, newStateOrFn, _this.idKey);
        });
    };
    /**
     * An alias to update all.
     */
    /**
     * An alias to update all.
     * @param {?} state
     * @return {?}
     */
    EntityStore.prototype.updateAll = /**
     * An alias to update all.
     * @param {?} state
     * @return {?}
     */
    function (state) {
        if (this._value().ids.length === 0)
            return;
        this.update(null, state);
    };
    /**
     * Update the root state (data which is external to the entities).
     *
     * @example
     * this.store.updateRoot({
     *   metadata: 'new metadata
     * });
     *
     *  this.store.updateRoot(state => {
     *    return {
     *      metadata: {
     *        ...state.metadata,
     *        key: 'new value'
     *      }
     *    }
     *  });
     */
    /**
     * Update the root state (data which is external to the entities).
     *
     * \@example
     * this.store.updateRoot({
     *   metadata: 'new metadata
     * });
     *
     *  this.store.updateRoot(state => {
     *    return {
     *      metadata: {
     *        ...state.metadata,
     *        key: 'new value'
     *      }
     *    }
     *  });
     * @param {?} newStateFn
     * @param {?=} action
     * @return {?}
     */
    EntityStore.prototype.updateRoot = /**
     * Update the root state (data which is external to the entities).
     *
     * \@example
     * this.store.updateRoot({
     *   metadata: 'new metadata
     * });
     *
     *  this.store.updateRoot(state => {
     *    return {
     *      metadata: {
     *        ...state.metadata,
     *        key: 'new value'
     *      }
     *    }
     *  });
     * @param {?} newStateFn
     * @param {?=} action
     * @return {?}
     */
    function (newStateFn, action) {
        /** @type {?} */
        var newState = isFunction(newStateFn) ? newStateFn(this._value()) : newStateFn;
        if (newState === this._value()) {
            throw new AkitaImmutabilityError(this.storeName);
        }
        isDev() && __globalState.setAction(action || { type: 'Update Root' });
        this.setState(function (state) {
            return __assign({}, ((/** @type {?} */ (state))), ((/** @type {?} */ (newState))));
        });
    };
    /**
     * @param {?=} idsOrFn
     * @return {?}
     */
    EntityStore.prototype.remove = /**
     * @param {?=} idsOrFn
     * @return {?}
     */
    function (idsOrFn) {
        /** @type {?} */
        var storeIds = this._value().ids;
        if (storeIds.length === 0)
            return;
        /** @type {?} */
        var idPassed = toBoolean(idsOrFn);
        if (!idPassed)
            this.setPristine();
        /** @type {?} */
        var ids = [];
        if (isFunction(idsOrFn)) {
            for (var i = 0, len = storeIds.length; i < len; i++) {
                /** @type {?} */
                var id = storeIds[i];
                /** @type {?} */
                var entity = this._value().entities[id];
                if (entity && idsOrFn(entity)) {
                    ids.push(id);
                }
            }
        }
        else {
            ids = idPassed ? coerceArray(idsOrFn) : null;
        }
        if (ids && ids.length === 0)
            return;
        isDev() && __globalState.setAction({ type: 'Remove Entity', entityId: ids });
        this.setState(function (state) {
            return _crud._remove(state, ids);
        });
    };
    /**
     *
     * Update the active entity.
     *
     * @example
     * this.store.updateActive(active => {
     *   return {
     *     config: {
     *      ..active.config,
     *      date
     *     }
     *   }
     * })
     */
    /**
     *
     * Update the active entity.
     *
     * \@example
     * this.store.updateActive(active => {
     *   return {
     *     config: {
     *      ..active.config,
     *      date
     *     }
     *   }
     * })
     * @param {?} newStateFn
     * @return {?}
     */
    EntityStore.prototype.updateActive = /**
     *
     * Update the active entity.
     *
     * \@example
     * this.store.updateActive(active => {
     *   return {
     *     config: {
     *      ..active.config,
     *      date
     *     }
     *   }
     * })
     * @param {?} newStateFn
     * @return {?}
     */
    function (newStateFn) {
        var _this = this;
        assertActive(this._value());
        isDev() && __globalState.setAction({ type: 'Update Active Entity', entityId: this._value().active });
        this.setState(function (state) {
            /** @type {?} */
            var activeId = (/** @type {?} */ (state.active));
            /** @type {?} */
            var newState = isFunction(newStateFn) ? newStateFn(state.entities[activeId]) : newStateFn;
            if (newState === state) {
                throw new AkitaImmutabilityError(_this.storeName);
            }
            return _crud._update(state, [activeId], newState, _this.idKey);
        });
    };
    /**
     * Set the given entity as active.
     */
    /**
     * Set the given entity as active.
     * @param {?} idOrOptions
     * @return {?}
     */
    EntityStore.prototype.setActive = /**
     * Set the given entity as active.
     * @param {?} idOrOptions
     * @return {?}
     */
    function (idOrOptions) {
        /** @type {?} */
        var activeId;
        if (isObject(idOrOptions)) {
            if (isNil(this._value().active))
                return;
            ((/** @type {?} */ (idOrOptions))) = Object.assign({ wrap: true }, idOrOptions);
            /** @type {?} */
            var ids = this._value().ids;
            /** @type {?} */
            var currentIdIndex = ids.indexOf(this._value().active);
            if (((/** @type {?} */ (idOrOptions))).prev) {
                /** @type {?} */
                var isFirst = currentIdIndex === 0;
                if (isFirst && !((/** @type {?} */ (idOrOptions))).wrap)
                    return;
                activeId = isFirst ? ids[ids.length - 1] : ((/** @type {?} */ (ids[currentIdIndex - 1])));
            }
            else if (((/** @type {?} */ (idOrOptions))).next) {
                /** @type {?} */
                var isLast = ids.length === currentIdIndex + 1;
                if (isLast && !((/** @type {?} */ (idOrOptions))).wrap)
                    return;
                activeId = isLast ? ids[0] : ((/** @type {?} */ (ids[currentIdIndex + 1])));
            }
        }
        else {
            if (idOrOptions === this._value().active)
                return;
            activeId = (/** @type {?} */ (idOrOptions));
        }
        isDev() && __globalState.setAction({ type: 'Set Active Entity', entityId: activeId });
        this.setState(function (state) {
            return __assign({}, ((/** @type {?} */ (state))), { active: activeId });
        });
    };
    /**
     * @param {?} id
     * @param {?} entity
     * @return {?}
     */
    EntityStore.prototype.addWhenNotExists = /**
     * @param {?} id
     * @param {?} entity
     * @return {?}
     */
    function (id, entity) {
        if (!entity[this.idKey]) {
            entity[this.idKey] = id;
        }
        this.add(entity);
    };
    return EntityStore;
}(Store));
/** @type {?} */
var getInitialEntitiesState = function () {
    return ((/** @type {?} */ ({
        entities: {},
        ids: [],
        loading: true,
        error: null
    })));
};
/** @type {?} */
var getInitialActiveState = function () {
    return ((/** @type {?} */ ({
        active: null
    })));
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
/** @enum {string} */
var Order = {
    ASC: 'asc',
    DESC: 'desc',
};
/**
 * @param {?} key
 * @param {?=} order
 * @return {?}
 */
function compareValues(key, order) {
    if (order === void 0) { order = Order.ASC; }
    return function (a, b) {
        if (!a.hasOwnProperty(key) || !b.hasOwnProperty(key)) {
            return 0;
        }
        /** @type {?} */
        var varA = typeof a[key] === 'string' ? a[key].toUpperCase() : a[key];
        /** @type {?} */
        var varB = typeof b[key] === 'string' ? b[key].toUpperCase() : b[key];
        /** @type {?} */
        var comparison = 0;
        if (varA > varB) {
            comparison = 1;
        }
        else if (varA < varB) {
            comparison = -1;
        }
        return order == Order.DESC ? comparison * -1 : comparison;
    };
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
/**
 * @param {?} fn
 * @return {?}
 */
function memoizeOne(fn) {
    /** @type {?} */
    var lastArgs;
    /** @type {?} */
    var changed = false;
    /** @type {?} */
    var firstInit = true;
    /** @type {?} */
    var lastResult;
    return function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        if (lastArgs) {
            /** If entities nor ids doesn't change return the last value */
            changed = lastArgs[1] !== args[1] || lastArgs[0] !== args[0];
        }
        if (firstInit || (changed && !firstInit)) {
            lastResult = fn.apply(this, args);
        }
        firstInit = false;
        lastArgs = args;
        return lastResult;
    };
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
/** @type {?} */
var queryConfigKey = 'akitaQueryConfig';
/**
 * @template E
 * @param {?} metadata
 * @return {?}
 */
function QueryConfig(metadata) {
    return function (constructor) {
        constructor[queryConfigKey] = {};
        for (var i = 0, keys = Object.keys(metadata); i < keys.length; i++) {
            /** @type {?} */
            var key = keys[i];
            constructor[queryConfigKey][key] = metadata[key];
        }
    };
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
/**
 * @template S
 */
var  /**
 * @template S
 */
Query = /** @class */ (function () {
    function Query(store) {
        this.store = store;
        this.__store__ = store;
    }
    /**
     * @template R
     * @param {?=} project
     * @return {?}
     */
    Query.prototype.select = /**
     * @template R
     * @param {?=} project
     * @return {?}
     */
    function (project) {
        /** @type {?} */
        var state = project ? project : function (state) { return state; };
        return this.store._select(state);
    };
    /**
     * Select once and complete.
     */
    /**
     * Select once and complete.
     * @template R
     * @param {?} project
     * @return {?}
     */
    Query.prototype.selectOnce = /**
     * Select once and complete.
     * @template R
     * @param {?} project
     * @return {?}
     */
    function (project) {
        return this.select(project).pipe(take(1));
    };
    /**
     * Select the store's loading state.
     */
    /**
     * Select the store's loading state.
     * @return {?}
     */
    Query.prototype.selectLoading = /**
     * Select the store's loading state.
     * @return {?}
     */
    function () {
        return this.select(function (state) { return ((/** @type {?} */ (state))).loading; });
    };
    /**
     * Select the store's error state.
     */
    /**
     * Select the store's error state.
     * @return {?}
     */
    Query.prototype.selectError = /**
     * Select the store's error state.
     * @return {?}
     */
    function () {
        return this.select(function (state) { return ((/** @type {?} */ (state))).error; });
    };
    /**
     * Get the raw value of the store.
     */
    /**
     * Get the raw value of the store.
     * @return {?}
     */
    Query.prototype.getSnapshot = /**
     * Get the raw value of the store.
     * @return {?}
     */
    function () {
        return this.store._value();
    };
    Object.defineProperty(Query.prototype, "isPristine", {
        /**
         *  Returns whether the state of the store is pristine (the set() method hasn't been explicitly called
         *  since the store creation, or the last time setPristine()was called).
         */
        get: /**
         *  Returns whether the state of the store is pristine (the set() method hasn't been explicitly called
         *  since the store creation, or the last time setPristine()was called).
         * @return {?}
         */
        function () {
            return this.store.isPristine;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Query.prototype, "isDirty", {
        /**
         * Returns whether the state of the store is dirty (the set() method
         * or the setDirty() method has been explicitly called since the store creation,
         * or the last time setPristine() was called).
         */
        get: /**
         * Returns whether the state of the store is dirty (the set() method
         * or the setDirty() method has been explicitly called since the store creation,
         * or the last time setPristine() was called).
         * @return {?}
         */
        function () {
            return !this.store.isPristine;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Query.prototype, "config", {
        get: /**
         * @return {?}
         */
        function () {
            return this.constructor[queryConfigKey];
        },
        enumerable: true,
        configurable: true
    });
    return Query;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
/**
 *  An abstraction for querying the entities from the store
 * @template S, E, ActiveEntity
 */
var  /**
 *  An abstraction for querying the entities from the store
 * @template S, E, ActiveEntity
 */
QueryEntity = /** @class */ (function (_super) {
    __extends(QueryEntity, _super);
    function QueryEntity(store) {
        var _this = _super.call(this, store) || this;
        _this.__store__ = store;
        return _this;
    }
    /**
     * @param {?=} options
     * @return {?}
     */
    QueryEntity.prototype.selectAll = /**
     * @param {?=} options
     * @return {?}
     */
    function (options) {
        var _this = this;
        if (options === void 0) { options = {
            asObject: false
        }; }
        /** @type {?} */
        var selectState$ = this.select(function (state) { return state; });
        /** @type {?} */
        var selectEntities$ = this.select(function (state) { return state.entities; });
        this.sortByOptions(options);
        return selectEntities$.pipe(withLatestFrom(selectState$, function (entities, state) {
            var ids = state.ids;
            if (options.asObject) {
                return toMap(ids, entities, options);
            }
            else {
                if (!options.filterBy && !options.sortBy) {
                    if (!_this.memoized) {
                        _this.memoized = memoizeOne(toArray);
                    }
                    return _this.memoized(state, options);
                }
                return toArray(state, options);
            }
        }));
    };
    /**
     * @param {?=} options
     * @return {?}
     */
    QueryEntity.prototype.getAll = /**
     * @param {?=} options
     * @return {?}
     */
    function (options) {
        if (options === void 0) { options = { asObject: false, filterBy: undefined, limitTo: undefined }; }
        /** @type {?} */
        var state = this.getSnapshot();
        if (options.asObject) {
            return toMap(state.ids, state.entities, options, true);
        }
        this.sortByOptions(options);
        return toArray(state, options);
    };
    /**
     * Select multiple entities from the store.
     *
     * @example
     * this.store.selectMany([1,2]);
     */
    /**
     * Select multiple entities from the store.
     *
     * \@example
     * this.store.selectMany([1,2]);
     * @param {?} ids
     * @param {?=} options
     * @return {?}
     */
    QueryEntity.prototype.selectMany = /**
     * Select multiple entities from the store.
     *
     * \@example
     * this.store.selectMany([1,2]);
     * @param {?} ids
     * @param {?=} options
     * @return {?}
     */
    function (ids, options) {
        var _this = this;
        if (options === void 0) { options = {}; }
        /** @type {?} */
        var filterUndefined = isUndefined(options.filterUndefined) ? true : options.filterUndefined;
        /** @type {?} */
        var entities = ids.map(function (id) { return _this.selectEntity(id); });
        return combineLatest(entities).pipe(map(function (entities) {
            return filterUndefined ? entities.filter(function (val) { return !isUndefined(val); }) : entities;
        }), auditTime(0));
    };
    /**
     * @template R
     * @param {?} id
     * @param {?=} project
     * @return {?}
     */
    QueryEntity.prototype.selectEntity = /**
     * @template R
     * @param {?} id
     * @param {?=} project
     * @return {?}
     */
    function (id, project) {
        var _this = this;
        if (!project) {
            return this._byId(id);
        }
        return this.select(function (state) {
            if (_this.hasEntity(id)) {
                return project(_this.getEntity(id));
            }
            return undefined;
        });
    };
    /**
     * Get an entity by id
     *
     * @example
     * this.store.getEntity(1);
     */
    /**
     * Get an entity by id
     *
     * \@example
     * this.store.getEntity(1);
     * @param {?} id
     * @return {?}
     */
    QueryEntity.prototype.getEntity = /**
     * Get an entity by id
     *
     * \@example
     * this.store.getEntity(1);
     * @param {?} id
     * @return {?}
     */
    function (id) {
        return this.getSnapshot().entities[(/** @type {?} */ (id))];
    };
    /**
     * Select the active entity's id.
     */
    /**
     * Select the active entity's id.
     * @return {?}
     */
    QueryEntity.prototype.selectActiveId = /**
     * Select the active entity's id.
     * @return {?}
     */
    function () {
        return this.select(function (state) { return ((/** @type {?} */ (state))).active; });
    };
    /**
     * Get the active id
     */
    /**
     * Get the active id
     * @return {?}
     */
    QueryEntity.prototype.getActiveId = /**
     * Get the active id
     * @return {?}
     */
    function () {
        return ((/** @type {?} */ (this.getSnapshot()))).active;
    };
    /**
     * @template R
     * @param {?=} project
     * @return {?}
     */
    QueryEntity.prototype.selectActive = /**
     * @template R
     * @param {?=} project
     * @return {?}
     */
    function (project) {
        var _this = this;
        return this.selectActiveId().pipe(switchMap(function (activeId) { return _this.selectEntity(activeId, project); }));
    };
    /**
     * Get the active entity.
     */
    /**
     * Get the active entity.
     * @return {?}
     */
    QueryEntity.prototype.getActive = /**
     * Get the active entity.
     * @return {?}
     */
    function () {
        /** @type {?} */
        var activeId = this.getActiveId();
        return toBoolean(activeId) ? this.getEntity(activeId) : undefined;
    };
    /**
     * Select the store's entity collection length.
     */
    /**
     * Select the store's entity collection length.
     * @param {?=} predicate
     * @return {?}
     */
    QueryEntity.prototype.selectCount = /**
     * Select the store's entity collection length.
     * @param {?=} predicate
     * @return {?}
     */
    function (predicate) {
        if (isFunction(predicate)) {
            return this.selectAll({
                filterBy: predicate
            }).pipe(map(function (entities) { return entities.length; }));
        }
        return this.select(function (store) { return store.ids.length; });
    };
    /**
     * Get the store's entity collection length.
     */
    /**
     * Get the store's entity collection length.
     * @param {?=} predicate
     * @return {?}
     */
    QueryEntity.prototype.getCount = /**
     * Get the store's entity collection length.
     * @param {?=} predicate
     * @return {?}
     */
    function (predicate) {
        if (isFunction(predicate)) {
            return this.getAll().filter(predicate).length;
        }
        return this.getSnapshot().ids.length;
    };
    /**
     * @param {?} projectOrIds
     * @return {?}
     */
    QueryEntity.prototype.hasEntity = /**
     * @param {?} projectOrIds
     * @return {?}
     */
    function (projectOrIds) {
        var _this = this;
        if (isFunction(projectOrIds)) {
            return this.getAll().some(projectOrIds);
        }
        if (Array.isArray(projectOrIds)) {
            return projectOrIds.every(function (id) { return ((/** @type {?} */ (id))) in _this.store.entities; });
        }
        return ((/** @type {?} */ (projectOrIds))) in this.store.entities;
    };
    /**
     * Returns whether entity store has an active entity.
     */
    /**
     * Returns whether entity store has an active entity.
     * @return {?}
     */
    QueryEntity.prototype.hasActive = /**
     * Returns whether entity store has an active entity.
     * @return {?}
     */
    function () {
        return this.getSnapshot().active != null;
    };
    /**
     * @return {?}
     */
    QueryEntity.prototype.isEmpty = /**
     * @return {?}
     */
    function () {
        return this.getSnapshot().ids.length === 0;
    };
    /**
     * @param {?} id
     * @return {?}
     */
    QueryEntity.prototype._byId = /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        var _this = this;
        return this.select(function (state) { return _this.getEntity(id); });
    };
    /**
     * @param {?} options
     * @return {?}
     */
    QueryEntity.prototype.sortByOptions = /**
     * @param {?} options
     * @return {?}
     */
    function (options) {
        options.sortBy = options.sortBy || (this.config && ((/** @type {?} */ (this.config.sortBy))));
        options.sortByOrder = options.sortByOrder || (this.config && this.config.sortByOrder);
    };
    /**
     * @return {?}
     */
    QueryEntity.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.memoized = null;
    };
    return QueryEntity;
}(Query));
/**
 * @template E, S
 * @param {?} state
 * @param {?} options
 * @return {?}
 */
function toArray(state, options) {
    /** @type {?} */
    var arr = [];
    var ids = state.ids, entities = state.entities;
    var filterBy = options.filterBy, limitTo = options.limitTo, sortBy = options.sortBy, sortByOrder = options.sortByOrder;
    var _loop_1 = function (i) {
        /** @type {?} */
        var id = ids[i];
        if (!entityExists(id, entities)) {
            return "continue";
        }
        if (!filterBy) {
            arr.push(entities[id]);
            return "continue";
        }
        if (Array.isArray(filterBy)) {
            /** @type {?} */
            var allPass = filterBy.every(function (fn) { return fn(entities[id], i); });
            if (allPass) {
                arr.push(entities[id]);
            }
        }
        else {
            if (filterBy(entities[id], i)) {
                arr.push(entities[id]);
            }
        }
    };
    for (var i = 0; i < ids.length; i++) {
        _loop_1(i);
    }
    if (sortBy) {
        /** @type {?} */
        var _sortBy_1 = isFunction(sortBy) ? sortBy : compareValues(sortBy, sortByOrder);
        arr = arr.sort(function (a, b) { return _sortBy_1(a, b, state); });
    }
    /** @type {?} */
    var length = Math.min(limitTo || arr.length, arr.length);
    return length === arr.length ? arr : arr.slice(0, length);
}
/**
 * @template E
 * @param {?} ids
 * @param {?} entities
 * @param {?} options
 * @param {?=} get
 * @return {?}
 */
function toMap(ids, entities, options, get) {
    if (get === void 0) { get = false; }
    /** @type {?} */
    var map$$1 = {};
    var filterBy = options.filterBy, limitTo = options.limitTo;
    if (get && !filterBy && !limitTo) {
        return entities;
    }
    /** @type {?} */
    var length = Math.min(limitTo || ids.length, ids.length);
    if (filterBy && isUndefined(limitTo) === false) {
        /** @type {?} */
        var count = 0;
        var _loop_2 = function (i, length_1) {
            if (count === limitTo)
                return "break";
            /** @type {?} */
            var id = ids[i];
            if (!entityExists(id, entities)) {
                return "continue";
            }
            if (Array.isArray(filterBy)) {
                /** @type {?} */
                var allPass = filterBy.every(function (fn) { return fn(entities[id], i); });
                if (allPass) {
                    map$$1[id] = entities[id];
                    count++;
                }
            }
            else {
                if (filterBy(entities[id], i)) {
                    map$$1[id] = entities[id];
                    count++;
                }
            }
        };
        for (var i = 0, length_1 = ids.length; i < length_1; i++) {
            var state_1 = _loop_2(i, length_1);
            if (state_1 === "break")
                break;
        }
    }
    else {
        var _loop_3 = function (i) {
            /** @type {?} */
            var id = ids[i];
            if (!entityExists(id, entities)) {
                return "continue";
            }
            if (!filterBy) {
                map$$1[id] = entities[id];
                return "continue";
            }
            if (Array.isArray(filterBy)) {
                /** @type {?} */
                var allPass = filterBy.every(function (fn) { return fn(entities[id], i); });
                if (allPass) {
                    map$$1[id] = entities[id];
                }
            }
            else {
                if (filterBy(entities[id], i)) {
                    map$$1[id] = entities[id];
                }
            }
        };
        for (var i = 0; i < length; i++) {
            _loop_3(i);
        }
    }
    return map$$1;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
/**
 *  A logical transaction.
 *  Use this transaction to optimize the dispatch of all the stores.
 *  The following code will update the store, BUT  emits only once
 *
 * \@example
 *  applyTransaction(() => {
 *    this.todosStore.add(new Todo(1, title));
 *    this.todosStore.add(new Todo(2, title));
 *  });
 *
 * @template T
 * @param {?} action
 * @param {?=} thisArg
 * @return {?}
 */
function applyTransaction(action, thisArg) {
    if (thisArg === void 0) { thisArg = undefined; }
    startBatch();
    try {
        return action.apply(thisArg);
    }
    finally {
        endBatch();
    }
}
/**
 *  A logical transaction.
 *  Use this transaction to optimize the dispatch of all the stores.
 *
 *  The following code will update the store, BUT  emits only once.
 *
 * \@example
 * \@transaction
 *  addTodos() {
 *    this.todosStore.add(new Todo(1, title));
 *    this.todosStore.add(new Todo(2, title));
 *  }
 *
 *
 * @return {?}
 */
function transaction() {
    return function (target, propertyKey, descriptor) {
        /** @type {?} */
        var originalMethod = descriptor.value;
        descriptor.value = function () {
            var _this = this;
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            return applyTransaction(function () {
                return originalMethod.apply(_this, args);
            }, this);
        };
        return descriptor;
    };
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
// https://github.com/georapbox/immutable-arrays
/**
 * Adds one or more elements to the end of an array by returning
 * a new array instead of mutating the original one.
 *
 * \@example
 * const originalArray = ['a', 'b', 'c', 'd', 'e'];
 * const resultArray = push(originalArray, 'f', 'g');
 * // -> originalArray ['a', 'b', 'c', 'd', 'e']
 * // -> resultArray ['a', 'b', 'c', 'd', 'e', 'f', 'g']
 * @template T
 * @param {?} array
 * @param {...?} elementN
 * @return {?}
 */
function push(array) {
    var elementN = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        elementN[_i - 1] = arguments[_i];
    }
    return __spread(array, elementN);
}
/**
 * Deletes an element from an array by its index in the array.
 *
 * \@example
 * const originalArray = ['a', 'b', 'c', 'd', 'e'];
 * const resultArray = remove(originalArray, 2);
 * // -> originalArray ['a', 'b', 'c', 'd', 'e']
 * // -> resultArray ['a', 'b', 'd', 'e']
 * @template T
 * @param {?} array
 * @param {?} index
 * @return {?}
 */
function remove(array, index) {
    return index >= 0 ? __spread(array.slice(0, index), array.slice(index + 1)) : __spread(array);
}
/**
 * Removes the last element from an array by returning
 * a new array instead of mutating the original one.
 *
 * \@example
 * const originalArray = ['a', 'b', 'c', 'd', 'e'];
 * const resultArray = pop(originalArray);
 * // -> originalArray ['a', 'b', 'c', 'd', 'e']
 * // -> resultArray ['a', 'b', 'c', 'd']
 * @template T
 * @param {?} array
 * @return {?}
 */
function pop(array) {
    return array.slice(0, -1);
}
/**
 * Adds one or more elements to the beginning of an array.
 *
 * \@example
 * const originalArray = ['a', 'b', 'c', 'd', 'e'];
 * const resultArray = unshift(originalArray, 'f', 'g');
 * // -> originalArray ['a', 'b', 'c', 'd', 'e']
 * // -> resultArray ['f', 'g', 'a', 'b', 'c', 'd', 'e']
 * @template T
 * @param {?} array
 * @param {...?} elementN
 * @return {?}
 */
function unshift(array) {
    var elementN = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        elementN[_i - 1] = arguments[_i];
    }
    return __spread(elementN, array);
}
/**
 * Sorts the elements of an array (not in place) and returns a sorted array.
 *
 * \@example
 * const numberArray = [20, 3, 4, 10, -3, 1, 0, 5];
 * const stringArray = ['Blue', 'Humpback', 'Beluga'];
 *
 * const resultArray = sort(numberArray, (a, b) => a - b);
 * // -> numberArray [20, 3, 4, 10, -3, 1, 0, 5]
 * // -> resultArray [-3, 0, 1, 3, 4, 5, 10, 20]
 *
 * const resultArray = sort(numberArray, (a, b) => b - a);
 * // -> numberArray [20, 3, 4, 10, -3, 1, 0, 5]
 * // -> resultArray [20, 10, 5, 4, 3, 1, 0, -3]
 *
 * const resultArray = sort(stringArray);
 * // -> stringArray ['Blue', 'Humpback', 'Beluga']
 * // -> resultArray ['Beluga', 'Blue', 'Humpback']
 *
 * const resultArray = sort(stringArray, (a, b) => a.toLowerCase() < b.toLowerCase());
 * // -> stringArray ['Blue', 'Humpback', 'Beluga']
 * // -> resultArray ['Humpback', 'Blue', 'Beluga']
 * @template T
 * @param {?} array
 * @param {?=} compareFunction
 * @return {?}
 */
function sort(array, compareFunction) {
    return __spread(array).sort(compareFunction);
}
/**
 * Reverses an array (not in place).
 * The first array element becomes the last, and the last array element becomes the first.
 *
 * \@example
 * const originalArray = ['a', 'b', 'c', 'd', 'e'];
 * const resultArray = reverse(originalArray);
 * // -> originalArray ['a', 'b', 'c', 'd', 'e']
 * // -> resultArray ['e', 'd', 'c', 'b', 'a']
 * @template T
 * @param {?} array
 * @return {?}
 */
function reverse(array) {
    return __spread(array).reverse();
}
/**
 * Swap items in the array
 *
 * \@example
 * const originalArray = ['a', 'b', 'c', 'd', 'e'];
 * const resultArray = swap(originalArray, 1, 4);
 * // -> originalArray ['a', 'b', 'c', 'd', 'e']
 * // -> resultArray ['a', 'e', 'c', 'd', 'b']
 * @template T
 * @param {?} array
 * @param {?} firstIndex
 * @param {?} secondIndex
 * @return {?}
 */
function swap(array, firstIndex, secondIndex) {
    /** @type {?} */
    var results = array.slice();
    /** @type {?} */
    var firstItem = array[firstIndex];
    results[firstIndex] = array[secondIndex];
    results[secondIndex] = firstItem;
    return results;
}
/**
 * Update item in the array
 *
 * \@example
 * const originalArray = ['a', 'b', 'c', 'd', 'e'];
 * const resultArray = update(originalArray, 1, 'newItem');
 * // -> resultArray ['a', 'newItem', 'c', 'd', 'b']
 *
 * const originalArray = [{title: 1}, {title: 2}];
 * const resultArray = update(originalArray, originalArray[0], {title: 3});
 * // -> resultArray  [{title: 3}, {title: 2}];
 * @template T
 * @param {?} array
 * @param {?} indexOrItem
 * @param {?} updated
 * @return {?}
 */
function update(array, indexOrItem, updated) {
    return array.map(function (current, idx) {
        if (typeof indexOrItem === 'number' && idx === indexOrItem) {
            return updated;
        }
        if (isObject(indexOrItem) && ((/** @type {?} */ (indexOrItem))) === current) {
            return __assign({}, ((/** @type {?} */ (indexOrItem))), ((/** @type {?} */ (updated))));
        }
        return current;
    });
}
/**
 * Removes existing elements and/or adds new elements to an array.
 *
 * \@example
 * const originalArray = ['a', 'b', 'c', 'd', 'e'];
 * const resultArray = splice(originalArray, 0);
 * // -> originalArray ['a', 'b', 'c', 'd', 'e']
 * // -> resultArray []
 *
 * const originalArray = ['a', 'b', 'c', 'd', 'e'];
 * const resultArray = splice(originalArray, 0, 1);
 * // -> originalArray ['a', 'b', 'c', 'd', 'e']
 * // -> resultArray ['b', 'c', 'd', 'e']
 *
 * const originalArray = ['a', 'b', 'c', 'd', 'e'];
 * const resultArray = splice(originalArray, 0, 3);
 * // -> originalArray ['a', 'b', 'c', 'd', 'e']
 * // -> resultArray ['d', 'e']
 *
 * const originalArray = ['a', 'b', 'c', 'd', 'e'];
 * const resultArray = splice(originalArray, 0, originalArray.length);
 * // -> originalArray ['a', 'b', 'c', 'd', 'e']
 * // -> resultArray []
 *
 * const originalArray = ['a', 'b', 'c', 'd', 'e'];
 * const resultArray = splice(originalArray, 0, -3);
 * // -> originalArray ['a', 'b', 'c', 'd', 'e']
 * // -> resultArray ['a', 'b', 'c', 'd', 'e']
 *
 * const originalArray = ['a', 'b', 'c', 'd', 'e'];
 * const resultArray = splice(originalArray, 0, 0, 'lorem', 'ipsum');
 * // -> originalArray ['a', 'b', 'c', 'd', 'e']
 * // -> resultArray ['lorem', 'ipsum', 'a', 'b', 'c', 'd', 'e']
 *
 * const originalArray = ['a', 'b', 'c', 'd', 'e'];
 * const resultArray = splice(originalArray, originalArray.length, 0, 'lorem', 'ipsum');
 * // -> originalArray ['a', 'b', 'c', 'd', 'e']
 * // -> resultArray ['a', 'b', 'c', 'd', 'e', 'lorem', 'ipsum']
 *
 * const originalArray = ['a', 'b', 'c', 'd', 'e'];
 * const resultArray = splice(originalArray, 0, 2, 'lorem', 'ipsum');
 * // -> originalArray ['a', 'b', 'c', 'd', 'e']
 * // -> resultArray ['lorem', 'ipsum', 'c', 'd', 'e']
 *
 * const originalArray = ['a', 'b', 'c', 'd', 'e'];
 * const resultArray = splice(originalArray, originalArray.length - 2, 2, 'lorem', 'ipsum');
 * // -> originalArray ['a', 'b', 'c', 'd', 'e']
 * // -> resultArray ['a', 'b', 'c', 'lorem', 'ipsum']
 * @template T
 * @param {?} array
 * @param {?=} start
 * @param {?=} deleteCount
 * @param {...?} elementN
 * @return {?}
 */
function splice(array, start, deleteCount) {
    if (start === void 0) { start = array.length; }
    if (deleteCount === void 0) { deleteCount = array.length - start; }
    var elementN = [];
    for (var _i = 3; _i < arguments.length; _i++) {
        elementN[_i - 3] = arguments[_i];
    }
    return __spread(array.slice(0, start), elementN, array.slice(start + (deleteCount < 0 ? 0 : deleteCount)));
}
/**
 * @template T
 * @param {?} arr
 * @param {?} item
 * @return {?}
 */
function toggle(arr, item) {
    return arr.indexOf(item) > -1 ? arr.filter(function (current) { return item !== current; }) : push(arr, item);
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
/** @type {?} */
var filterNil = function (source) { return source.pipe(filter(function (value) { return value !== null && typeof value !== 'undefined'; })); };

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
/**
 * @template T
 * @param {?} func
 * @param {?} action
 * @param {?=} thisArg
 * @return {?}
 */
function applyAction(func, action, thisArg) {
    if (thisArg === void 0) { thisArg = undefined; }
    __globalState.setCustomAction(action, true);
    return func.apply(thisArg);
}
/**
 * @param {?} action
 * @param {?=} skipTransactionMsg
 * @return {?}
 */
function action(action, skipTransactionMsg) {
    if (skipTransactionMsg === void 0) { skipTransactionMsg = true; }
    return function (target, propertyKey, descriptor) {
        /** @type {?} */
        var originalMethod = descriptor.value;
        descriptor.value = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            __globalState.setCustomAction(action, skipTransactionMsg);
            return originalMethod.apply(this, args);
        };
        return descriptor;
    };
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
/**
 * @param {?} object
 * @return {?}
 */
function serialize(object) {
    return JSON.stringify(object, function (key, value) {
        if (typeof value === 'function') {
            return value.toString();
        }
        return value;
    });
}
/**
 * @return {?}
 */
function createWorker() {
    /** @type {?} */
    var blob = new Blob([
        "self.onmessage = function(e) {\n\n      function deserialize(str) {\n        return JSON.parse(str || '', function(key, value) {\n          if (value &&\n            typeof value === \"string\" &&\n            value.substr(0, 8) == \"function\") {\n            var startBody = value.indexOf('{') + 1;\n            var endBody = value.lastIndexOf('}');\n            var startArgs = value.indexOf('(') + 1;\n            var endArgs = value.indexOf(')');\n            return new Function(value.substring(startArgs, endArgs), value.substring(startBody, endBody));\n          }\n          return value;\n        });\n      }\n\n      var deserialized = deserialize(e.data);\n      var mapped = deserialized.data.map(function(d) {\n        return deserialized.factory(d);\n      });\n\n      self.postMessage(mapped);\n    }"
    ], {
        type: 'text/javascript'
    });
    /** @type {?} */
    var url = URL.createObjectURL(blob);
    return new Worker(url);
}
/**
 * \@example
 *   const mockTodos = Array.from({length: 10000}, (_, x) => ({id: x}));
 *
 *   of(mockTodos).pipe(mapInWorker<Todo>(createTodo))
 *   .subscribe(res => console.log(res));
 * @template T
 * @param {?} factoryFn
 * @return {?}
 */
function mapInWorker(factoryFn) {
    return function (source) {
        return new Observable(function (observer) {
            /** @type {?} */
            var worker = createWorker();
            worker.onmessage = function (e) {
                observer.next(e.data);
                observer.complete();
                worker.terminate();
            };
            worker.onerror = function (err) {
                observer.error(err);
                observer.complete();
                worker.terminate();
            };
            return source.subscribe(function (value) {
                /** @type {?} */
                var input = {
                    factory: factoryFn,
                    data: value
                };
                /** @type {?} */
                var serialized = serialize(input);
                worker.postMessage(serialized);
            });
        });
    };
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
var SnapshotManager = /** @class */ (function () {
    function SnapshotManager() {
    }
    /**
     * Get a snapshot of the whole state or a specific stores
     * Use it ONLY for things like saving the state in the server
     */
    /**
     * Get a snapshot of the whole state or a specific stores
     * Use it ONLY for things like saving the state in the server
     * @param {?=} stores
     * @return {?}
     */
    SnapshotManager.prototype.getStoresSnapshot = /**
     * Get a snapshot of the whole state or a specific stores
     * Use it ONLY for things like saving the state in the server
     * @param {?=} stores
     * @return {?}
     */
    function (stores) {
        if (stores === void 0) { stores = []; }
        /** @type {?} */
        var acc = {};
        /** @type {?} */
        var hasInclude = stores.length > 0;
        /** @type {?} */
        var keys = hasInclude ? stores : Object.keys(__stores__);
        for (var i = 0; i < keys.length; i++) {
            /** @type {?} */
            var storeName = keys[i];
            acc[storeName] = __stores__[storeName]._value();
        }
        return acc;
    };
    /**
     * Set snapshot we get from the server
     */
    /**
     * Set snapshot we get from the server
     * @param {?} stores
     * @return {?}
     */
    SnapshotManager.prototype.setStoresSnapshot = /**
     * Set snapshot we get from the server
     * @param {?} stores
     * @return {?}
     */
    function (stores) {
        /** @type {?} */
        var normalizedStores = stores;
        if (isString(stores)) {
            normalizedStores = JSON.parse((/** @type {?} */ (normalizedStores)));
        }
        var _loop_1 = function (i, keys) {
            /** @type {?} */
            var storeName = keys[i];
            if (__stores__[storeName]) {
                __stores__[storeName].setState(function () { return normalizedStores[storeName]; });
            }
        };
        for (var i = 0, keys = Object.keys(normalizedStores); i < keys.length; i++) {
            _loop_1(i, keys);
        }
    };
    return SnapshotManager;
}());
/** @type {?} */
var snapshotManager = new SnapshotManager();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
/**
 * @abstract
 * @template E, S
 */
var  /**
 * @abstract
 * @template E, S
 */
AkitaPlugin = /** @class */ (function () {
    function AkitaPlugin(query, config) {
        this.query = query;
        if (config && config.resetFn) {
            if (getAkitaConfig().resettable) {
                this.onReset(config.resetFn);
            }
        }
    }
    /** This method is responsible for getting access to the query. */
    /**
     * This method is responsible for getting access to the query.
     * @return {?}
     */
    AkitaPlugin.prototype.getQuery = /**
     * This method is responsible for getting access to the query.
     * @return {?}
     */
    function () {
        return this.query;
    };
    /** This method is responsible for getting access to the store. */
    /**
     * This method is responsible for getting access to the store.
     * @return {?}
     */
    AkitaPlugin.prototype.getStore = /**
     * This method is responsible for getting access to the store.
     * @return {?}
     */
    function () {
        return this.getQuery().__store__;
    };
    /** This method is responsible tells whether the plugin is entityBased or not.  */
    /**
     * This method is responsible tells whether the plugin is entityBased or not.
     * @param {?} entityId
     * @return {?}
     */
    AkitaPlugin.prototype.isEntityBased = /**
     * This method is responsible tells whether the plugin is entityBased or not.
     * @param {?} entityId
     * @return {?}
     */
    function (entityId) {
        return toBoolean(entityId);
    };
    /** This method is responsible for selecting the source; it can be the whole store or one entity. */
    /**
     * This method is responsible for selecting the source; it can be the whole store or one entity.
     * @param {?} entityId
     * @return {?}
     */
    AkitaPlugin.prototype.selectSource = /**
     * This method is responsible for selecting the source; it can be the whole store or one entity.
     * @param {?} entityId
     * @return {?}
     */
    function (entityId) {
        if (this.isEntityBased(entityId)) {
            return ((/** @type {?} */ (this.getQuery()))).selectEntity(entityId).pipe(filterNil);
        }
        return ((/** @type {?} */ (this.getQuery()))).select(function (state) { return state; });
    };
    /**
     * @param {?} entityId
     * @return {?}
     */
    AkitaPlugin.prototype.getSource = /**
     * @param {?} entityId
     * @return {?}
     */
    function (entityId) {
        if (this.isEntityBased(entityId)) {
            return ((/** @type {?} */ (this.getQuery()))).getEntity(entityId);
        }
        return this.getQuery().getSnapshot();
    };
    /** This method is responsible for updating the store or one entity; it can be the whole store or one entity. */
    /**
     * This method is responsible for updating the store or one entity; it can be the whole store or one entity.
     * @param {?} newState
     * @param {?=} entityId
     * @return {?}
     */
    AkitaPlugin.prototype.updateStore = /**
     * This method is responsible for updating the store or one entity; it can be the whole store or one entity.
     * @param {?} newState
     * @param {?=} entityId
     * @return {?}
     */
    function (newState, entityId) {
        if (this.isEntityBased(entityId)) {
            this.getStore().update(entityId, newState);
        }
        else {
            this.getStore().setState(function (state) { return (__assign({}, state, newState)); });
        }
    };
    /**
     * Function to invoke upon reset
     */
    /**
     * Function to invoke upon reset
     * @param {?} fn
     * @return {?}
     */
    AkitaPlugin.prototype.onReset = /**
     * Function to invoke upon reset
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        var _this = this;
        /** @type {?} */
        var original = this.getStore().reset;
        this.getStore().reset = function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            /** It should run after the plugin destroy method */
            setTimeout(function () {
                original.apply(_this.getStore(), params);
                fn();
            });
        };
    };
    return AkitaPlugin;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
/** @type {?} */
var paginatorDefaults = {
    pagesControls: false,
    range: false,
    startWith: 1,
    cacheTimeout: undefined
};
/**
 * @template E
 */
var PaginatorPlugin = /** @class */ (function (_super) {
    __extends(PaginatorPlugin, _super);
    function PaginatorPlugin(query, config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, query, {
            resetFn: function () {
                _this.initial = false;
                _this.destroy({ clearCache: true, currentPage: 1 });
            }
        }) || this;
        _this.query = query;
        _this.config = config;
        /**
         * Save current filters, sorting, etc. in cache
         */
        _this.metadata = new Map();
        _this.pages = new Map();
        _this.pagination = {
            currentPage: 1,
            perPage: 0,
            total: 0,
            lastPage: 0,
            data: []
        };
        /**
         * When the user navigates to a different page and return
         * we don't want to call `clearCache` on first time.
         */
        _this.initial = false;
        /**
         * Proxy to the query loading
         */
        _this.isLoading$ = _this.query.selectLoading().pipe(delay(0));
        _this.config = Object.assign(paginatorDefaults, config);
        var _a = _this.config, startWith = _a.startWith, cacheTimeout = _a.cacheTimeout;
        _this.page = new BehaviorSubject(startWith);
        if (isObservable(cacheTimeout)) {
            _this.clearCacheSubscription = cacheTimeout.subscribe(function (_) { return _this.clearCache(); });
        }
        return _this;
    }
    Object.defineProperty(PaginatorPlugin.prototype, "pageChanges", {
        /**
         * Listen to page changes
         */
        get: /**
         * Listen to page changes
         * @return {?}
         */
        function () {
            return this.page.asObservable();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PaginatorPlugin.prototype, "currentPage", {
        /**
         * Get the current page number
         */
        get: /**
         * Get the current page number
         * @return {?}
         */
        function () {
            return this.pagination.currentPage;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PaginatorPlugin.prototype, "isFirst", {
        /**
         * Check if current page is the first one
         */
        get: /**
         * Check if current page is the first one
         * @return {?}
         */
        function () {
            return this.currentPage === 1;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PaginatorPlugin.prototype, "isLast", {
        /**
         * Check if current page is the last one
         */
        get: /**
         * Check if current page is the last one
         * @return {?}
         */
        function () {
            return this.currentPage === this.pagination.lastPage;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Whether to generate an array of pages for *ngFor
     * [1, 2, 3, 4]
     */
    /**
     * Whether to generate an array of pages for *ngFor
     * [1, 2, 3, 4]
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    PaginatorPlugin.prototype.withControls = /**
     * Whether to generate an array of pages for *ngFor
     * [1, 2, 3, 4]
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    function () {
        (/** @type {?} */ (this)).config.pagesControls = true;
        return (/** @type {?} */ (this));
    };
    /**
     * Whether to generate the `from` and `to` keys
     * [1, 2, 3, 4]
     */
    /**
     * Whether to generate the `from` and `to` keys
     * [1, 2, 3, 4]
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    PaginatorPlugin.prototype.withRange = /**
     * Whether to generate the `from` and `to` keys
     * [1, 2, 3, 4]
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    function () {
        (/** @type {?} */ (this)).config.range = true;
        return (/** @type {?} */ (this));
    };
    /**
     * Set the loading state
     */
    /**
     * Set the loading state
     * @param {?=} value
     * @return {?}
     */
    PaginatorPlugin.prototype.setLoading = /**
     * Set the loading state
     * @param {?=} value
     * @return {?}
     */
    function (value) {
        if (value === void 0) { value = true; }
        this.getStore().setLoading(value);
    };
    /**
     * Update the pagination object and add the page
     */
    /**
     * Update the pagination object and add the page
     * @param {?} response
     * @return {?}
     */
    PaginatorPlugin.prototype.update = /**
     * Update the pagination object and add the page
     * @param {?} response
     * @return {?}
     */
    function (response) {
        this.pagination = response;
        this.addPage(response.data);
    };
    /**
     *
     * Set the ids and add the page to store
     */
    /**
     *
     * Set the ids and add the page to store
     * @param {?} data
     * @return {?}
     */
    PaginatorPlugin.prototype.addPage = /**
     *
     * Set the ids and add the page to store
     * @param {?} data
     * @return {?}
     */
    function (data) {
        var _this = this;
        this.pages.set(this.currentPage, { ids: data.map(function (entity) { return entity[_this.getStore().idKey]; }) });
        this.getStore().add(data);
    };
    /**
     * Clear the cache.
     */
    /**
     * Clear the cache.
     * @return {?}
     */
    PaginatorPlugin.prototype.clearCache = /**
     * Clear the cache.
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this.initial) {
            applyAction(function () {
                _this.getStore().remove();
            }, { type: '@Pagination - Clear Cache' });
            this.pages = new Map();
            this.metadata = new Map();
        }
        this.initial = false;
    };
    /**
     * @param {?} page
     * @return {?}
     */
    PaginatorPlugin.prototype.clearPage = /**
     * @param {?} page
     * @return {?}
     */
    function (page) {
        this.pages.delete(page);
    };
    /**
     * Clear the cache timeout and optionally the pages
     */
    /**
     * Clear the cache timeout and optionally the pages
     * @param {?=} __0
     * @return {?}
     */
    PaginatorPlugin.prototype.destroy = /**
     * Clear the cache timeout and optionally the pages
     * @param {?=} __0
     * @return {?}
     */
    function (_a) {
        var _b = _a === void 0 ? {} : _a, clearCache = _b.clearCache, currentPage = _b.currentPage;
        if (this.clearCacheSubscription) {
            this.clearCacheSubscription.unsubscribe();
        }
        if (clearCache) {
            this.clearCache();
        }
        if (!isUndefined(currentPage)) {
            this.setPage(currentPage);
        }
        this.initial = true;
    };
    /**
     * Whether the provided page is active
     */
    /**
     * Whether the provided page is active
     * @param {?} page
     * @return {?}
     */
    PaginatorPlugin.prototype.isPageActive = /**
     * Whether the provided page is active
     * @param {?} page
     * @return {?}
     */
    function (page) {
        return this.currentPage === page;
    };
    /**
     * Set the current page
     */
    /**
     * Set the current page
     * @param {?} page
     * @return {?}
     */
    PaginatorPlugin.prototype.setPage = /**
     * Set the current page
     * @param {?} page
     * @return {?}
     */
    function (page) {
        if (page !== this.currentPage || !this.hasPage(page)) {
            this.page.next((this.pagination.currentPage = page));
        }
    };
    /**
     * Increment current page
     */
    /**
     * Increment current page
     * @return {?}
     */
    PaginatorPlugin.prototype.nextPage = /**
     * Increment current page
     * @return {?}
     */
    function () {
        if (this.currentPage !== this.pagination.lastPage) {
            this.setPage(this.pagination.currentPage + 1);
        }
    };
    /**
     * Decrement current page
     */
    /**
     * Decrement current page
     * @return {?}
     */
    PaginatorPlugin.prototype.prevPage = /**
     * Decrement current page
     * @return {?}
     */
    function () {
        if (this.pagination.currentPage > 1) {
            this.setPage(this.pagination.currentPage - 1);
        }
    };
    /**
     * Set current page to last
     */
    /**
     * Set current page to last
     * @return {?}
     */
    PaginatorPlugin.prototype.setLastPage = /**
     * Set current page to last
     * @return {?}
     */
    function () {
        this.setPage(this.pagination.lastPage);
    };
    /**
     * Set current page to first
     */
    /**
     * Set current page to first
     * @return {?}
     */
    PaginatorPlugin.prototype.setFirstPage = /**
     * Set current page to first
     * @return {?}
     */
    function () {
        this.setPage(1);
    };
    /**
     * Check if page exists in cache
     */
    /**
     * Check if page exists in cache
     * @param {?} page
     * @return {?}
     */
    PaginatorPlugin.prototype.hasPage = /**
     * Check if page exists in cache
     * @param {?} page
     * @return {?}
     */
    function (page) {
        return this.pages.has(page);
    };
    /**
     * Get the current page if it's in cache, otherwise invoke the request
     */
    /**
     * Get the current page if it's in cache, otherwise invoke the request
     * @param {?} req
     * @return {?}
     */
    PaginatorPlugin.prototype.getPage = /**
     * Get the current page if it's in cache, otherwise invoke the request
     * @param {?} req
     * @return {?}
     */
    function (req) {
        var _this = this;
        /** @type {?} */
        var page = this.pagination.currentPage;
        if (this.hasPage(page)) {
            return this.selectPage(page);
        }
        else {
            this.setLoading(true);
            return from(req()).pipe(switchMap(function (config) {
                applyTransaction(function () {
                    _this.setLoading(false);
                    _this.update(config);
                });
                return _this.selectPage(page);
            }));
        }
    };
    /**
     * @return {?}
     */
    PaginatorPlugin.prototype.getQuery = /**
     * @return {?}
     */
    function () {
        return this.query;
    };
    /**
     * @return {?}
     */
    PaginatorPlugin.prototype.getFrom = /**
     * @return {?}
     */
    function () {
        if (this.isFirst) {
            return 1;
        }
        return (this.currentPage - 1) * this.pagination.perPage + 1;
    };
    /**
     * @return {?}
     */
    PaginatorPlugin.prototype.getTo = /**
     * @return {?}
     */
    function () {
        return this.currentPage * this.pagination.perPage;
    };
    /**
     * Select the page
     */
    /**
     * Select the page
     * @param {?} page
     * @return {?}
     */
    PaginatorPlugin.prototype.selectPage = /**
     * Select the page
     * @param {?} page
     * @return {?}
     */
    function (page) {
        var _this = this;
        return this.query.selectAll({ asObject: true }).pipe(take(1), map(function (entities) {
            /** @type {?} */
            var response = __assign({}, _this.pagination, { data: _this.pages.get(page).ids.map(function (id) { return entities[id]; }) });
            var _a = _this.config, range = _a.range, pagesControls = _a.pagesControls;
            /** If no total - calc it */
            if (isNaN(_this.pagination.total)) {
                if (response.lastPage === 1) {
                    response.total = response.data ? response.data.length : 0;
                }
                else {
                    response.total = response.perPage * response.lastPage;
                }
                _this.pagination.total = response.total;
            }
            if (range) {
                response.from = _this.getFrom();
                response.to = _this.getTo();
            }
            if (pagesControls) {
                response.pageControls = generatePages(_this.pagination.total, _this.pagination.perPage);
            }
            return response;
        }));
    };
    __decorate([
        action({ type: '@Pagination - New Page' }, true),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", void 0)
    ], PaginatorPlugin.prototype, "update", null);
    return PaginatorPlugin;
}(AkitaPlugin));
/**
 * Generate an array so we can ngFor them to navigate between pages
 * @param {?} total
 * @param {?} perPage
 * @return {?}
 */
function generatePages(total, perPage) {
    /** @type {?} */
    var len = Math.ceil(total / perPage);
    /** @type {?} */
    var arr = [];
    for (var i = 0; i < len; i++) {
        arr.push(i + 1);
    }
    return arr;
}
/**
 * backward compatibility
 * @type {?}
 */
var Paginator = PaginatorPlugin;

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
// Todo: Return  AbstractControl interface
/**
 * @template T
 */
var  
// Todo: Return  AbstractControl interface
/**
 * @template T
 */
PersistNgFormPlugin = /** @class */ (function (_super) {
    __extends(PersistNgFormPlugin, _super);
    function PersistNgFormPlugin(query, factoryFnOrPath, params) {
        if (params === void 0) { params = {}; }
        var _this = _super.call(this, query) || this;
        _this.query = query;
        _this.factoryFnOrPath = factoryFnOrPath;
        _this.params = params;
        _this.params = __assign({ debounceTime: 300, formKey: 'akitaForm', emitEvent: false, arrControlFactory: function (v) { return _this.builder.control(v); } }, params);
        _this.isRootKeys = toBoolean(factoryFnOrPath) === false;
        _this.isKeyBased = isString(factoryFnOrPath) || _this.isRootKeys;
        return _this;
    }
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} form
     * @param {?=} builder
     * @return {THIS}
     */
    PersistNgFormPlugin.prototype.setForm = /**
     * @template THIS
     * @this {THIS}
     * @param {?} form
     * @param {?=} builder
     * @return {THIS}
     */
    function (form, builder) {
        (/** @type {?} */ (this)).form = form;
        (/** @type {?} */ (this)).builder = builder;
        (/** @type {?} */ (this)).activate();
        return (/** @type {?} */ (this));
    };
    /**
     * @param {?=} initialState
     * @return {?}
     */
    PersistNgFormPlugin.prototype.reset = /**
     * @param {?=} initialState
     * @return {?}
     */
    function (initialState) {
        var _this = this;
        var _a;
        /** @type {?} */
        var value;
        if (initialState) {
            value = initialState;
        }
        else {
            value = this.isKeyBased ? this.initialValue : ((/** @type {?} */ (this))).factoryFnOrPath();
        }
        if (this.isKeyBased) {
            Object.keys(this.initialValue).forEach(function (stateKey) {
                /** @type {?} */
                var value = _this.initialValue[stateKey];
                if (Array.isArray(value) && _this.builder) {
                    /** @type {?} */
                    var formArray = _this.form.controls[stateKey];
                    _this.cleanArray(formArray);
                    value.forEach(function (v, i) {
                        _this.form.get(stateKey).insert(i, ((/** @type {?} */ (_this.params.arrControlFactory)))(v));
                    });
                }
            });
        }
        this.form.patchValue(value, { emitEvent: this.params.emitEvent });
        /** @type {?} */
        var storeValue = this.isKeyBased ? setValue(this.getQuery().getSnapshot(), this.getStore().storeName + "." + this.factoryFnOrPath, value) : (_a = {}, _a[this.params.formKey] = value, _a);
        this.updateStore(storeValue);
    };
    /**
     * @param {?} control
     * @return {?}
     */
    PersistNgFormPlugin.prototype.cleanArray = /**
     * @param {?} control
     * @return {?}
     */
    function (control) {
        while (control.length !== 0) {
            control.removeAt(0);
        }
    };
    /**
     * @param {?} formValue
     * @param {?} root
     * @return {?}
     */
    PersistNgFormPlugin.prototype.resolveInitialValue = /**
     * @param {?} formValue
     * @param {?} root
     * @return {?}
     */
    function (formValue, root) {
        var _this = this;
        if (!formValue)
            return;
        return Object.keys(formValue).reduce(function (acc, stateKey) {
            /** @type {?} */
            var value = root[stateKey];
            if (Array.isArray(value) && _this.builder) {
                /** @type {?} */
                var factory_1 = _this.params.arrControlFactory;
                _this.cleanArray(_this.form.get(stateKey));
                value.forEach(function (v, i) {
                    _this.form.get(stateKey).insert(i, ((/** @type {?} */ (factory_1)))(v));
                });
            }
            acc[stateKey] = root[stateKey];
            return acc;
        }, {});
    };
    /**
     * @return {?}
     */
    PersistNgFormPlugin.prototype.activate = /**
     * @return {?}
     */
    function () {
        var _this = this;
        var _a;
        /** @type {?} */
        var path;
        if (this.isKeyBased) {
            if (this.isRootKeys) {
                this.initialValue = this.resolveInitialValue(this.form.value, this.getQuery().getSnapshot());
                this.form.patchValue(this.initialValue, { emitEvent: this.params.emitEvent });
            }
            else {
                path = this.getStore().storeName + "." + this.factoryFnOrPath;
                /** @type {?} */
                var root = getValue(this.getQuery().getSnapshot(), path);
                this.initialValue = this.resolveInitialValue(root, root);
                this.form.patchValue(this.initialValue, { emitEvent: this.params.emitEvent });
            }
        }
        else {
            if (!((/** @type {?} */ (this.getQuery().getSnapshot())))[this.params.formKey]) {
                __globalState.setAction({ type: '@PersistNgFormPlugin activate' });
                this.updateStore((_a = {}, _a[this.params.formKey] = ((/** @type {?} */ (this))).factoryFnOrPath(), _a));
            }
            /** @type {?} */
            var value = this.getQuery().getSnapshot()[this.params.formKey];
            this.form.patchValue(value);
        }
        this.formChanges = this.form.valueChanges.pipe(debounceTime(this.params.debounceTime)).subscribe(function (value) {
            __globalState.setAction({ type: '@PersistForm - Update' });
            /** @type {?} */
            var newState;
            if (_this.isKeyBased) {
                if (_this.isRootKeys) {
                    newState = function (state) { return (__assign({}, state, value)); };
                }
                else {
                    newState = function (state) { return setValue(state, path, value); };
                }
            }
            else {
                newState = function () {
                    var _a;
                    return (_a = {}, _a[_this.params.formKey] = value, _a);
                };
            }
            _this.updateStore(newState(_this.getQuery().getSnapshot()));
        });
    };
    /**
     * @return {?}
     */
    PersistNgFormPlugin.prototype.destroy = /**
     * @return {?}
     */
    function () {
        this.formChanges && this.formChanges.unsubscribe();
        this.form = null;
        this.builder = null;
    };
    return PersistNgFormPlugin;
}(AkitaPlugin));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
/** @type {?} */
var notBs = typeof localStorage === 'undefined';
/**
 * @param {?=} params
 * @return {?}
 */
function persistState(params) {
    if (notBs)
        return;
    /** @type {?} */
    var defaults = {
        key: 'AkitaStores',
        storage: localStorage,
        deserialize: JSON.parse,
        serialize: JSON.stringify,
        include: [],
        exclude: []
    };
    var _a = Object.assign({}, defaults, params), storage = _a.storage, deserialize = _a.deserialize, serialize = _a.serialize, include = _a.include, exclude = _a.exclude, key = _a.key;
    /** @type {?} */
    var hasInclude = include.length > 0;
    /** @type {?} */
    var hasExclude = exclude.length > 0;
    /** @type {?} */
    var includeStores;
    if (hasInclude && hasExclude) {
        throw new AkitaError("You can't use both include and exclude");
    }
    if (hasInclude) {
        includeStores = include.reduce(function (acc, path) {
            /** @type {?} */
            var storeName = path.split('.')[0];
            acc[storeName] = path;
            return acc;
        }, {});
    }
    /** @type {?} */
    var storageState = deserialize(storage.getItem(key) || '{}');
    /** @type {?} */
    var stores = {};
    /** @type {?} */
    var acc = {};
    /**
     * @return {?}
     */
    function save() {
        storage.setItem(key, serialize(Object.assign({}, storageState, acc)));
    }
    /**
     * @param {?} storeName
     * @param {?} path
     * @return {?}
     */
    function subscribe(storeName, path) {
        stores[storeName] = __stores__[storeName]
            ._select(function (state) { return getValue(state, path); })
            .pipe(skip(1))
            .subscribe(function (data) {
            acc[storeName] = data;
            save();
        });
    }
    /**
     * @param {?} storeName
     * @param {?} store
     * @param {?} path
     * @return {?}
     */
    function setInitial(storeName, store, path) {
        if (storageState[storeName]) {
            __globalState.setAction({ type: '@PersistState' });
            store.setState(function (state) {
                return setValue(state, path, storageState[storeName]);
            });
            if (store.setDirty) {
                store.setDirty();
            }
        }
    }
    /** @type {?} */
    var subscription = rootDispatcher.pipe(filter(function (action) { return action.type === 0 /* NEW_STORE */; })).subscribe(function (action) {
        /** @type {?} */
        var currentStoreName = action.payload.store.storeName;
        if (hasExclude && exclude.includes(currentStoreName)) {
            return;
        }
        if (hasInclude) {
            /** @type {?} */
            var path = includeStores[currentStoreName];
            if (!path) {
                return;
            }
            setInitial(currentStoreName, action.payload.store, path);
            subscribe(currentStoreName, path);
        }
        else {
            setInitial(currentStoreName, action.payload.store, currentStoreName);
            subscribe(currentStoreName, currentStoreName);
        }
    });
    return {
        destroy: /**
         * @return {?}
         */
        function () {
            subscription.unsubscribe();
            for (var i = 0, keys = Object.keys(stores); i < keys.length; i++) {
                /** @type {?} */
                var storeName = keys[i];
                stores[storeName].unsubscribe();
            }
            stores = {};
        },
        clear: /**
         * @return {?}
         */
        function () {
            storage.clear();
        },
        clearStore: /**
         * @param {?} storeName
         * @return {?}
         */
        function (storeName) {
            /** @type {?} */
            var storageState = deserialize(storage.getItem(key) || '{}');
            if (storageState[storeName]) {
                delete storageState[storeName];
                storage.setItem(key, serialize(storageState));
            }
        }
    };
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
/** @type {?} */
var rootDispatcherSub;
/** @type {?} */
var devtoolsSub;
/**
 * @param {?=} ngZoneOrOptions
 * @param {?=} options
 * @return {?}
 */
function akitaDevtools(ngZoneOrOptions, options) {
    if (options === void 0) { options = {}; }
    if (!((/** @type {?} */ (window))).__REDUX_DEVTOOLS_EXTENSION__) {
        return;
    }
    rootDispatcherSub && rootDispatcherSub.unsubscribe();
    devtoolsSub && devtoolsSub();
    /** @type {?} */
    var isAngular = ngZoneOrOptions && ngZoneOrOptions['run'];
    if (!isAngular) {
        ngZoneOrOptions = ngZoneOrOptions || {};
        ((/** @type {?} */ (ngZoneOrOptions))).run = function (cb) { return cb(); };
        options = (/** @type {?} */ (ngZoneOrOptions));
    }
    /** @type {?} */
    var defaultOptions = { name: 'Akita' };
    /** @type {?} */
    var merged = Object.assign({}, defaultOptions, options);
    /** @type {?} */
    var devTools = ((/** @type {?} */ (window))).__REDUX_DEVTOOLS_EXTENSION__.connect(merged);
    /** @type {?} */
    var appState = {};
    rootDispatcherSub = rootDispatcher.subscribe(function (action) {
        var _a;
        if (action.type === 1 /* DELETE_STORE */) {
            /** @type {?} */
            var storeName = action.payload.storeName;
            delete appState[storeName];
            devTools.send({ type: "[" + storeName + "] - Delete Store" }, appState);
        }
        if (action.type === 2 /* NEW_STATE */) {
            if (__globalState.skipAction) {
                __globalState.setSkipAction(false);
                return;
            }
            appState = __assign({}, appState, (_a = {}, _a[action.payload.name] = __stores__[action.payload.name]._value(), _a));
            var _b = __globalState.currentAction, type = _b.type, entityId = _b.entityId;
            /** @type {?} */
            var storeName = capitalize(action.payload.name);
            /** @type {?} */
            var msg = isDefined(entityId) ? "[" + storeName + "] - " + type + " (ids: " + entityId + ")" : "[" + storeName + "] - " + type;
            if (options.logTrace) {
                console.group(msg);
                console.trace();
                console.groupEnd();
            }
            devTools.send({ type: msg, transaction: __globalState.currentT.map(function (t) { return t.type; }) }, appState);
        }
    });
    devtoolsSub = devTools.subscribe(function (message) {
        if (message.type === 'ACTION') {
            var _a = __read(message.payload.split('.'), 1), storeName_1 = _a[0];
            if (__stores__[storeName_1]) {
                ((/** @type {?} */ (ngZoneOrOptions))).run(function () {
                    /** @type {?} */
                    var funcCall = message.payload.replace(storeName_1, "this['" + storeName_1 + "']");
                    try {
                        new Function("" + funcCall).call(__stores__);
                    }
                    catch (e) {
                        console.warn('Unknown Method ☹️');
                    }
                });
            }
        }
        if (message.type === 'DISPATCH') {
            /** @type {?} */
            var payloadType = message.payload.type;
            if (payloadType === 'COMMIT') {
                devTools.init(appState);
                return;
            }
            if (message.state) {
                /** @type {?} */
                var rootState_1 = JSON.parse(message.state);
                var _loop_1 = function (i, keys) {
                    /** @type {?} */
                    var storeName = keys[i];
                    if (__stores__[storeName]) {
                        ((/** @type {?} */ (ngZoneOrOptions))).run(function () {
                            __stores__[storeName].setState(function () { return rootState_1[storeName]; }, false);
                        });
                    }
                };
                for (var i = 0, keys = Object.keys(rootState_1); i < keys.length; i++) {
                    _loop_1(i, keys);
                }
            }
        }
    });
}
/**
 * @param {?} string
 * @return {?}
 */
function capitalize(string) {
    return string && string.charAt(0).toUpperCase() + string.slice(1);
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
var ɵ0 = function (plugin) { return plugin.destroy(); };
/** @type {?} */
var defaultActions = { beforeRemove: ɵ0 };
/**
 * @abstract
 * @template E, P
 */
var  /**
 * @abstract
 * @template E, P
 */
EntityCollectionPlugin = /** @class */ (function () {
    function EntityCollectionPlugin(query, entityIds) {
        this.query = query;
        this.entityIds = entityIds;
        this.entities = new Map();
    }
    /**
     * Get the entity plugin instance.
     */
    /**
     * Get the entity plugin instance.
     * @param {?} id
     * @return {?}
     */
    EntityCollectionPlugin.prototype.getEntity = /**
     * Get the entity plugin instance.
     * @param {?} id
     * @return {?}
     */
    function (id) {
        return this.entities.get(id);
    };
    /**
     * Whether the entity plugin exist.
     */
    /**
     * Whether the entity plugin exist.
     * @param {?} id
     * @return {?}
     */
    EntityCollectionPlugin.prototype.hasEntity = /**
     * Whether the entity plugin exist.
     * @param {?} id
     * @return {?}
     */
    function (id) {
        return this.entities.has(id);
    };
    /**
     * Remove the entity plugin instance.
     */
    /**
     * Remove the entity plugin instance.
     * @param {?} id
     * @return {?}
     */
    EntityCollectionPlugin.prototype.removeEntity = /**
     * Remove the entity plugin instance.
     * @param {?} id
     * @return {?}
     */
    function (id) {
        return this.entities.delete(id);
    };
    /**
     * Set the entity plugin instance.
     */
    /**
     * Set the entity plugin instance.
     * @param {?} id
     * @param {?} plugin
     * @return {?}
     */
    EntityCollectionPlugin.prototype.createEntity = /**
     * Set the entity plugin instance.
     * @param {?} id
     * @param {?} plugin
     * @return {?}
     */
    function (id, plugin) {
        return this.entities.set(id, plugin);
    };
    /**
     * If the user passes `entityIds` we take them; otherwise, we take all.
     */
    /**
     * If the user passes `entityIds` we take them; otherwise, we take all.
     * @return {?}
     */
    EntityCollectionPlugin.prototype.getIds = /**
     * If the user passes `entityIds` we take them; otherwise, we take all.
     * @return {?}
     */
    function () {
        return isUndefined(this.entityIds) ? this.query.getSnapshot().ids : coerceArray(this.entityIds);
    };
    /**
     * When you call one of the plugin methods, you can pass id/ids or undefined which means all.
     */
    /**
     * When you call one of the plugin methods, you can pass id/ids or undefined which means all.
     * @param {?=} ids
     * @return {?}
     */
    EntityCollectionPlugin.prototype.resolvedIds = /**
     * When you call one of the plugin methods, you can pass id/ids or undefined which means all.
     * @param {?=} ids
     * @return {?}
     */
    function (ids) {
        return isUndefined(ids) ? this.getIds() : coerceArray(ids);
    };
    /**
     * Call this method when you want to activate the plugin on init or when you need to listen to add/remove of entities dynamically.
     *
     * For example in your plugin you may do the following:
     *
     * this.query.select(state => state.ids).pipe(skip(1)).subscribe(ids => this.activate(ids));
     */
    /**
     * Call this method when you want to activate the plugin on init or when you need to listen to add/remove of entities dynamically.
     *
     * For example in your plugin you may do the following:
     *
     * this.query.select(state => state.ids).pipe(skip(1)).subscribe(ids => this.activate(ids));
     * @param {?} ids
     * @param {?=} actions
     * @return {?}
     */
    EntityCollectionPlugin.prototype.rebase = /**
     * Call this method when you want to activate the plugin on init or when you need to listen to add/remove of entities dynamically.
     *
     * For example in your plugin you may do the following:
     *
     * this.query.select(state => state.ids).pipe(skip(1)).subscribe(ids => this.activate(ids));
     * @param {?} ids
     * @param {?=} actions
     * @return {?}
     */
    function (ids, actions) {
        var _this = this;
        if (actions === void 0) { actions = defaultActions; }
        /**
         *
         * If the user passes `entityIds` & we have new ids check if we need to add/remove instances.
         *
         * This phase will be called only upon update.
         */
        if (toBoolean(ids)) {
            /**
             * Which means all
             */
            if (isUndefined(this.entityIds)) {
                for (var i = 0, len = ids.length; i < len; i++) {
                    /** @type {?} */
                    var entityId = ids[i];
                    if (this.hasEntity(entityId) === false) {
                        isFunction(actions.beforeAdd) && actions.beforeAdd(entityId);
                        /** @type {?} */
                        var plugin = this.instantiatePlugin(entityId);
                        this.entities.set(entityId, plugin);
                        isFunction(actions.afterAdd) && actions.afterAdd(plugin);
                    }
                }
                this.entities.forEach(function (plugin, entityId) {
                    if (ids.indexOf(entityId) === -1) {
                        isFunction(actions.beforeRemove) && actions.beforeRemove(plugin);
                        _this.removeEntity(entityId);
                    }
                });
            }
            else {
                /**
                 * Which means the user passes specific ids
                 * @type {?}
                 */
                var _ids = coerceArray(this.entityIds);
                for (var i = 0, len = _ids.length; i < len; i++) {
                    /** @type {?} */
                    var entityId = _ids[i];
                    /** The Entity in current ids and doesn't exist, add it. */
                    if (ids.indexOf(entityId) > -1 && this.hasEntity(entityId) === false) {
                        isFunction(actions.beforeAdd) && actions.beforeAdd(entityId);
                        /** @type {?} */
                        var plugin = this.instantiatePlugin(entityId);
                        this.entities.set(entityId, plugin);
                        isFunction(actions.afterAdd) && actions.afterAdd(plugin);
                    }
                    else {
                        this.entities.forEach(function (plugin, entityId) {
                            /** The Entity not in current ids and exists, remove it. */
                            if (ids.indexOf(entityId) === -1 && _this.hasEntity(entityId) === true) {
                                isFunction(actions.beforeRemove) && actions.beforeRemove(plugin);
                                _this.removeEntity(entityId);
                            }
                        });
                    }
                }
            }
        }
        else {
            /**
             * Otherwise, start with the provided ids or all.
             */
            this.getIds().forEach(function (id) {
                if (!_this.hasEntity(id))
                    _this.createEntity(id, _this.instantiatePlugin(id));
            });
        }
    };
    /**
     * Listen for add/remove entities.
     */
    /**
     * Listen for add/remove entities.
     * @return {?}
     */
    EntityCollectionPlugin.prototype.selectIds = /**
     * Listen for add/remove entities.
     * @return {?}
     */
    function () {
        return this.query.select(function (state) { return state.ids; });
    };
    /**
     * Base method for activation, you can override it if you need to.
     */
    /**
     * Base method for activation, you can override it if you need to.
     * @param {?=} ids
     * @return {?}
     */
    EntityCollectionPlugin.prototype.activate = /**
     * Base method for activation, you can override it if you need to.
     * @param {?=} ids
     * @return {?}
     */
    function (ids) {
        this.rebase(ids);
    };
    /**
     * Loop over each id and invoke the plugin method.
     */
    /**
     * Loop over each id and invoke the plugin method.
     * @param {?} ids
     * @param {?} cb
     * @return {?}
     */
    EntityCollectionPlugin.prototype.forEachId = /**
     * Loop over each id and invoke the plugin method.
     * @param {?} ids
     * @param {?} cb
     * @return {?}
     */
    function (ids, cb) {
        /** @type {?} */
        var _ids = this.resolvedIds(ids);
        for (var i = 0, len = _ids.length; i < len; i++) {
            /** @type {?} */
            var id = _ids[i];
            if (this.hasEntity(id)) {
                cb(this.getEntity(id));
            }
        }
    };
    return EntityCollectionPlugin;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
/**
 * @template E, S
 */
var  /**
 * @template E, S
 */
StateHistoryPlugin = /** @class */ (function (_super) {
    __extends(StateHistoryPlugin, _super);
    function StateHistoryPlugin(query, params, _entityId) {
        if (params === void 0) { params = {}; }
        var _this = _super.call(this, query, {
            resetFn: function () { return _this.clear(); }
        }) || this;
        _this.query = query;
        _this.params = params;
        _this._entityId = _entityId;
        /**
         * Allow skipping an update from outside
         */
        _this.skip = false;
        _this.history = {
            past: [],
            present: null,
            future: []
        };
        /**
         * Skip the update when redo/undo
         */
        _this.skipUpdate = false;
        params.maxAge = toBoolean(params.maxAge) ? params.maxAge : 10;
        _this.activate();
        return _this;
    }
    Object.defineProperty(StateHistoryPlugin.prototype, "hasPast", {
        get: /**
         * @return {?}
         */
        function () {
            return this.history.past.length > 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StateHistoryPlugin.prototype, "hasFuture", {
        get: /**
         * @return {?}
         */
        function () {
            return this.history.future.length > 0;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    StateHistoryPlugin.prototype.activate = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.history.present = this.getSource(this._entityId);
        this.subscription = this.selectSource(this._entityId)
            .pipe(pairwise())
            .subscribe(function (_a) {
            var _b = __read(_a, 2), past = _b[0], present = _b[1];
            if (_this.skip) {
                _this.skip = false;
                return;
            }
            if (!_this.skipUpdate) {
                if (_this.history.past.length === _this.params.maxAge) {
                    _this.history.past = _this.history.past.slice(1);
                }
                _this.history.past = __spread(_this.history.past, [past]);
                _this.history.present = present;
            }
        });
    };
    /**
     * @return {?}
     */
    StateHistoryPlugin.prototype.undo = /**
     * @return {?}
     */
    function () {
        if (this.history.past.length > 0) {
            var _a = this.history, past = _a.past, present = _a.present, future = _a.future;
            /** @type {?} */
            var previous = past[past.length - 1];
            /** @type {?} */
            var newPast = past.slice(0, past.length - 1);
            this.history.past = newPast;
            this.history.present = previous;
            this.history.future = __spread([present], this.history.future);
            this.update();
        }
    };
    /**
     * @return {?}
     */
    StateHistoryPlugin.prototype.redo = /**
     * @return {?}
     */
    function () {
        if (this.history.future.length > 0) {
            var _a = this.history, past = _a.past, present = _a.present, future = _a.future;
            /** @type {?} */
            var next = this.history.future[0];
            /** @type {?} */
            var newFuture = this.history.future.slice(1);
            this.history.past = __spread(past, [present]);
            this.history.present = next;
            this.history.future = newFuture;
            this.update('Redo');
        }
    };
    /**
     * @param {?} index
     * @return {?}
     */
    StateHistoryPlugin.prototype.jumpToPast = /**
     * @param {?} index
     * @return {?}
     */
    function (index) {
        if (index < 0 || index >= this.history.past.length)
            return;
        var _a = this.history, past = _a.past, future = _a.future;
        /**
         *
         * const past = [1, 2, 3, 4, 5];
         *
         * newPast = past.slice(0, 2) = [1, 2];
         * present = past[index] = 3;
         * [...past.slice(2 + 1), ...future] = [4, 5];
         *
         * @type {?}
         */
        var newPast = past.slice(0, index);
        /** @type {?} */
        var newFuture = __spread(past.slice(index + 1), future);
        /** @type {?} */
        var newPresent = past[index];
        this.history.past = newPast;
        this.history.present = newPresent;
        this.history.future = newFuture;
        this.update();
    };
    /**
     * @param {?} index
     * @return {?}
     */
    StateHistoryPlugin.prototype.jumpToFuture = /**
     * @param {?} index
     * @return {?}
     */
    function (index) {
        if (index < 0 || index >= this.history.future.length)
            return;
        var _a = this.history, past = _a.past, future = _a.future;
        /** @type {?} */
        var newPast = __spread(past, future.slice(0, index));
        /** @type {?} */
        var newPresent = future[index];
        /** @type {?} */
        var newFuture = future.slice(index + 1);
        this.history.past = newPast;
        this.history.present = newPresent;
        this.history.future = newFuture;
        this.update('Redo');
    };
    /**
     * @return {?}
     */
    StateHistoryPlugin.prototype.clear = /**
     * @return {?}
     */
    function () {
        this.history = {
            past: [],
            present: null,
            future: []
        };
    };
    /**
     * @param {?=} clearHistory
     * @return {?}
     */
    StateHistoryPlugin.prototype.destroy = /**
     * @param {?=} clearHistory
     * @return {?}
     */
    function (clearHistory) {
        if (clearHistory === void 0) { clearHistory = false; }
        if (clearHistory) {
            this.clear();
        }
        this.subscription.unsubscribe();
    };
    /**
     * @return {?}
     */
    StateHistoryPlugin.prototype.ignoreNext = /**
     * @return {?}
     */
    function () {
        this.skip = true;
    };
    /**
     * @param {?=} action
     * @return {?}
     */
    StateHistoryPlugin.prototype.update = /**
     * @param {?=} action
     * @return {?}
     */
    function (action) {
        if (action === void 0) { action = 'Undo'; }
        this.skipUpdate = true;
        __globalState.setCustomAction({ type: "@StateHistory - " + action });
        this.updateStore(this.history.present, this._entityId);
        this.skipUpdate = false;
    };
    return StateHistoryPlugin;
}(AkitaPlugin));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
/**
 * @template E, P
 */
var  /**
 * @template E, P
 */
EntityStateHistoryPlugin = /** @class */ (function (_super) {
    __extends(EntityStateHistoryPlugin, _super);
    function EntityStateHistoryPlugin(query, params) {
        if (params === void 0) { params = {}; }
        var _this = _super.call(this, query, params.entityIds) || this;
        _this.query = query;
        _this.params = params;
        params.maxAge = toBoolean(params.maxAge) ? params.maxAge : 10;
        _this.activate();
        _this.selectIds()
            .pipe(skip(1))
            .subscribe(function (ids) { return _this.activate(ids); });
        return _this;
    }
    /**
     * @param {?=} ids
     * @return {?}
     */
    EntityStateHistoryPlugin.prototype.redo = /**
     * @param {?=} ids
     * @return {?}
     */
    function (ids) {
        this.forEachId(ids, function (e) { return e.redo(); });
    };
    /**
     * @param {?=} ids
     * @return {?}
     */
    EntityStateHistoryPlugin.prototype.undo = /**
     * @param {?=} ids
     * @return {?}
     */
    function (ids) {
        this.forEachId(ids, function (e) { return e.undo(); });
    };
    /**
     * @param {?} id
     * @return {?}
     */
    EntityStateHistoryPlugin.prototype.hasPast = /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        if (this.hasEntity(id)) {
            return this.getEntity(id).hasPast;
        }
    };
    /**
     * @param {?} id
     * @return {?}
     */
    EntityStateHistoryPlugin.prototype.hasFuture = /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        if (this.hasEntity(id)) {
            return this.getEntity(id).hasFuture;
        }
    };
    /**
     * @param {?} ids
     * @param {?} index
     * @return {?}
     */
    EntityStateHistoryPlugin.prototype.jumpToFuture = /**
     * @param {?} ids
     * @param {?} index
     * @return {?}
     */
    function (ids, index) {
        this.forEachId(ids, function (e) { return e.jumpToFuture(index); });
    };
    /**
     * @param {?} ids
     * @param {?} index
     * @return {?}
     */
    EntityStateHistoryPlugin.prototype.jumpToPast = /**
     * @param {?} ids
     * @param {?} index
     * @return {?}
     */
    function (ids, index) {
        this.forEachId(ids, function (e) { return e.jumpToPast(index); });
    };
    /**
     * @param {?=} ids
     * @return {?}
     */
    EntityStateHistoryPlugin.prototype.clear = /**
     * @param {?=} ids
     * @return {?}
     */
    function (ids) {
        this.forEachId(ids, function (e) { return e.clear(); });
    };
    /**
     * @param {?=} ids
     * @param {?=} clearHistory
     * @return {?}
     */
    EntityStateHistoryPlugin.prototype.destroy = /**
     * @param {?=} ids
     * @param {?=} clearHistory
     * @return {?}
     */
    function (ids, clearHistory) {
        if (clearHistory === void 0) { clearHistory = false; }
        this.forEachId(ids, function (e) { return e.destroy(clearHistory); });
    };
    /**
     * @param {?=} ids
     * @return {?}
     */
    EntityStateHistoryPlugin.prototype.ignoreNext = /**
     * @param {?=} ids
     * @return {?}
     */
    function (ids) {
        this.forEachId(ids, function (e) { return e.ignoreNext(); });
    };
    /**
     * @param {?} id
     * @return {?}
     */
    EntityStateHistoryPlugin.prototype.instantiatePlugin = /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        return (/** @type {?} */ (new StateHistoryPlugin(this.query, this.params, id)));
    };
    return EntityStateHistoryPlugin;
}(EntityCollectionPlugin));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
/** @type {?} */
var dirtyCheckDefaultParams = {
    comparator: function (head, current) { return JSON.stringify(head) !== JSON.stringify(current); }
};
/**
 * @param {?} nestedObj
 * @param {?} path
 * @return {?}
 */
function getNestedPath(nestedObj, path) {
    /** @type {?} */
    var pathAsArray = path.split('.');
    return pathAsArray.reduce(function (obj, key) { return (obj && obj[key] !== 'undefined' ? obj[key] : undefined); }, nestedObj);
}
/**
 * @template Entity, StoreState
 */
var  /**
 * @template Entity, StoreState
 */
DirtyCheckPlugin = /** @class */ (function (_super) {
    __extends(DirtyCheckPlugin, _super);
    function DirtyCheckPlugin(query, params, _entityId) {
        var _this = _super.call(this, query) || this;
        _this.query = query;
        _this.params = params;
        _this._entityId = _entityId;
        _this.dirty = new BehaviorSubject(false);
        _this.active = false;
        _this._reset = new Subject();
        _this.isDirty$ = _this.dirty.asObservable().pipe(distinctUntilChanged());
        _this.reset$ = _this._reset.asObservable();
        _this.params = __assign({}, dirtyCheckDefaultParams, params);
        if (_this.params.watchProperty) {
            /** @type {?} */
            var watchProp = (/** @type {?} */ (coerceArray(_this.params.watchProperty)));
            if (query instanceof QueryEntity && watchProp.includes('entities') && !watchProp.includes('ids')) {
                watchProp.push('ids');
            }
            _this.params.watchProperty = watchProp;
        }
        return _this;
    }
    /**
     * @param {?=} params
     * @return {?}
     */
    DirtyCheckPlugin.prototype.reset = /**
     * @param {?=} params
     * @return {?}
     */
    function (params) {
        if (params === void 0) { params = {}; }
        /** @type {?} */
        var currentValue = this.head;
        if (isFunction(params.updateFn)) {
            if (this.isEntityBased(this._entityId)) {
                currentValue = params.updateFn(this.head, ((/** @type {?} */ (this.getQuery()))).getEntity(this._entityId));
            }
            else {
                currentValue = params.updateFn(this.head, ((/** @type {?} */ (this.getQuery()))).getSnapshot());
            }
        }
        __globalState.setCustomAction({ type: "@DirtyCheck - Revert" });
        this.updateStore(currentValue, this._entityId);
        this._reset.next();
    };
    /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    DirtyCheckPlugin.prototype.setHead = /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    function () {
        if (!(/** @type {?} */ (this)).active) {
            (/** @type {?} */ (this)).activate();
            (/** @type {?} */ (this)).active = true;
        }
        else {
            (/** @type {?} */ (this)).head = (/** @type {?} */ (this))._getHead();
        }
        (/** @type {?} */ (this)).updateDirtiness(false);
        return (/** @type {?} */ (this));
    };
    /**
     * @return {?}
     */
    DirtyCheckPlugin.prototype.isDirty = /**
     * @return {?}
     */
    function () {
        return toBoolean(this.dirty.value);
    };
    /**
     * @return {?}
     */
    DirtyCheckPlugin.prototype.hasHead = /**
     * @return {?}
     */
    function () {
        return toBoolean(this.getHead());
    };
    /**
     * @return {?}
     */
    DirtyCheckPlugin.prototype.destroy = /**
     * @return {?}
     */
    function () {
        this.head = null;
        this.subscription && this.subscription.unsubscribe();
        this._reset && this._reset.complete();
    };
    /**
     * @param {?} path
     * @return {?}
     */
    DirtyCheckPlugin.prototype.isPathDirty = /**
     * @param {?} path
     * @return {?}
     */
    function (path) {
        /** @type {?} */
        var head = this.getHead();
        /** @type {?} */
        var current = ((/** @type {?} */ (this.getQuery()))).getSnapshot();
        /** @type {?} */
        var currentPathValue = getNestedPath(current, path);
        /** @type {?} */
        var headPathValue = getNestedPath(head, path);
        return this.params.comparator(currentPathValue, headPathValue);
    };
    /**
     * @return {?}
     */
    DirtyCheckPlugin.prototype.getHead = /**
     * @return {?}
     */
    function () {
        return this.head;
    };
    /**
     * @return {?}
     */
    DirtyCheckPlugin.prototype.activate = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.head = this._getHead();
        /**
         * if we are tracking specific properties select only the relevant ones
         * @type {?}
         */
        var source = this.params.watchProperty
            ? ((/** @type {?} */ (this.params.watchProperty))).map(function (prop) {
                return _this.query.select(function (state) { return state[prop]; }).pipe(map(function (val) { return ({
                    val: val,
                    __akitaKey: prop
                }); }));
            })
            : [this.selectSource(this._entityId)];
        this.subscription = combineLatest.apply(void 0, __spread(source)).pipe(skip(1))
            .subscribe(function (currentState) {
            if (isUndefined(_this.head))
                return;
            /**
             * __akitaKey is used to determine if we are tracking a specific property or a store change
             * @type {?}
             */
            var isChange = currentState.some(function (state) {
                /** @type {?} */
                var head = state.__akitaKey ? _this.head[(/** @type {?} */ (state.__akitaKey))] : _this.head;
                /** @type {?} */
                var compareTo = state.__akitaKey ? state.val : state;
                return _this.params.comparator(head, compareTo);
            });
            _this.updateDirtiness(isChange);
        });
    };
    /**
     * @param {?} isDirty
     * @return {?}
     */
    DirtyCheckPlugin.prototype.updateDirtiness = /**
     * @param {?} isDirty
     * @return {?}
     */
    function (isDirty) {
        this.dirty.next(isDirty);
    };
    /**
     * @return {?}
     */
    DirtyCheckPlugin.prototype._getHead = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var head = this.getSource(this._entityId);
        if (this.params.watchProperty) {
            head = this.getWatchedValues((/** @type {?} */ (head)));
        }
        return head;
    };
    /**
     * @param {?} source
     * @return {?}
     */
    DirtyCheckPlugin.prototype.getWatchedValues = /**
     * @param {?} source
     * @return {?}
     */
    function (source) {
        return ((/** @type {?} */ (this.params.watchProperty))).reduce(function (watched, prop) {
            watched[prop] = source[prop];
            return watched;
        }, (/** @type {?} */ ({})));
    };
    return DirtyCheckPlugin;
}(AkitaPlugin));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
/**
 * @template E, P
 */
var  /**
 * @template E, P
 */
EntityDirtyCheckPlugin = /** @class */ (function (_super) {
    __extends(EntityDirtyCheckPlugin, _super);
    function EntityDirtyCheckPlugin(query, params) {
        if (params === void 0) { params = {}; }
        var _this = _super.call(this, query, params.entityIds) || this;
        _this.query = query;
        _this.params = params;
        /**
         * @deprecated Use someDirty$ instead
         */
        _this.isSomeDirty$ = _this.query.select(function (state) { return state.entities; }).pipe(map(function (entities) { return _this.checkSomeDirty(entities); }));
        _this.someDirty$ = _this.isSomeDirty$;
        _this.someDirty = _this.isSomeDirty;
        _this.params = __assign({}, dirtyCheckDefaultParams, params);
        _this.activate();
        _this.selectIds()
            .pipe(skip(1))
            .subscribe(function (ids) {
            _this.rebase(ids, { afterAdd: function (plugin) { return plugin.setHead(); } });
        });
        return _this;
    }
    /**
     * @template THIS
     * @this {THIS}
     * @param {?=} ids
     * @return {THIS}
     */
    EntityDirtyCheckPlugin.prototype.setHead = /**
     * @template THIS
     * @this {THIS}
     * @param {?=} ids
     * @return {THIS}
     */
    function (ids) {
        (/** @type {?} */ (this)).forEachId(ids, function (e) { return e.setHead(); });
        return (/** @type {?} */ (this));
    };
    /**
     * @param {?} id
     * @return {?}
     */
    EntityDirtyCheckPlugin.prototype.hasHead = /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        if (this.entities.has(id)) {
            /** @type {?} */
            var entity = this.getEntity(id);
            return entity.hasHead();
        }
        return false;
    };
    /**
     * @param {?=} ids
     * @param {?=} params
     * @return {?}
     */
    EntityDirtyCheckPlugin.prototype.reset = /**
     * @param {?=} ids
     * @param {?=} params
     * @return {?}
     */
    function (ids, params) {
        if (params === void 0) { params = {}; }
        this.forEachId(ids, function (e) { return e.reset(params); });
    };
    /**
     * @param {?} id
     * @param {?=} asObservable
     * @return {?}
     */
    EntityDirtyCheckPlugin.prototype.isDirty = /**
     * @param {?} id
     * @param {?=} asObservable
     * @return {?}
     */
    function (id, asObservable) {
        if (asObservable === void 0) { asObservable = true; }
        if (this.entities.has(id)) {
            /** @type {?} */
            var entity = this.getEntity(id);
            return asObservable ? entity.isDirty$ : entity.isDirty();
        }
        return false;
    };
    /**
     * @deprecated Use someDirty() instead
     */
    /**
     * @deprecated Use someDirty() instead
     * @return {?}
     */
    EntityDirtyCheckPlugin.prototype.isSomeDirty = /**
     * @deprecated Use someDirty() instead
     * @return {?}
     */
    function () {
        /** @type {?} */
        var entities = this.query.getAll({ asObject: true });
        return this.checkSomeDirty(entities);
    };
    /**
     * @param {?} id
     * @param {?} path
     * @return {?}
     */
    EntityDirtyCheckPlugin.prototype.isPathDirty = /**
     * @param {?} id
     * @param {?} path
     * @return {?}
     */
    function (id, path) {
        if (this.entities.has(id)) {
            /** @type {?} */
            var head = ((/** @type {?} */ (this.getEntity(id)))).getHead();
            /** @type {?} */
            var current = this.query.getEntity(id);
            /** @type {?} */
            var currentPathValue = getNestedPath(current, path);
            /** @type {?} */
            var headPathValue = getNestedPath(head, path);
            return this.params.comparator(currentPathValue, headPathValue);
        }
        return null;
    };
    /**
     * @param {?=} ids
     * @return {?}
     */
    EntityDirtyCheckPlugin.prototype.destroy = /**
     * @param {?=} ids
     * @return {?}
     */
    function (ids) {
        this.forEachId(ids, function (e) { return e.destroy(); });
    };
    /**
     * @param {?} id
     * @return {?}
     */
    EntityDirtyCheckPlugin.prototype.instantiatePlugin = /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        return (/** @type {?} */ (new DirtyCheckPlugin(this.query, this.params, id)));
    };
    /**
     * @param {?} entities
     * @return {?}
     */
    EntityDirtyCheckPlugin.prototype.checkSomeDirty = /**
     * @param {?} entities
     * @return {?}
     */
    function (entities) {
        var e_1, _a;
        /** @type {?} */
        var entitiesIds = this.resolvedIds();
        try {
            for (var entitiesIds_1 = __values(entitiesIds), entitiesIds_1_1 = entitiesIds_1.next(); !entitiesIds_1_1.done; entitiesIds_1_1 = entitiesIds_1.next()) {
                var id = entitiesIds_1_1.value;
                /** @type {?} */
                var dirty = this.params.comparator(((/** @type {?} */ (this.getEntity(id)))).getHead(), entities[id]);
                if (dirty) {
                    return true;
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (entitiesIds_1_1 && !entitiesIds_1_1.done && (_a = entitiesIds_1.return)) _a.call(entitiesIds_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return false;
    };
    return EntityDirtyCheckPlugin;
}(EntityCollectionPlugin));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
/**
 * \@example
 *
 * this.peopleStore.update(id, person => ({
 *   guests: increment(person.guests)
 * }));
 * @param {?} value
 * @param {?=} params
 * @return {?}
 */
function increment(value, params) {
    if (params === void 0) { params = { maxValue: undefined }; }
    if (isNumber(value) === false)
        return;
    if (params.maxValue && value === params.maxValue)
        return value;
    return value + 1;
}
/**
 * \@example
 *
 * this.peopleStore.update(id, person => ({
 *   guests: decrement(person.guests)
 * }));
 * @param {?} value
 * @param {?=} params
 * @return {?}
 */
function decrement(value, params) {
    if (params === void 0) { params = { allowNegative: false }; }
    if (isNumber(value) === false)
        return;
    if (params.allowNegative === false && value === 0) {
        return value;
    }
    return value - 1;
}
/**
 * Generate random guid
 * @return {?}
 */
function guid() {
    return 'xxxxxx4xyx'.replace(/[xy]/g, function (c) {
        /** @type {?} */
        var r = (Math.random() * 16) | 0;
        /** @type {?} */
        var v = c == 'x' ? r : (r & 0x3) | 0x8;
        return v.toString(16);
    });
}
/**
 *
 * @param {?=} options
 * @return {?}
 */
function resetStores(options) {
    /** @type {?} */
    var defaults = {
        exclude: []
    };
    options = Object.assign({}, defaults, options);
    /** @type {?} */
    var stores = Object.keys(__stores__);
    applyTransaction(function () {
        var e_1, _a;
        try {
            for (var stores_1 = __values(stores), stores_1_1 = stores_1.next(); !stores_1_1.done; stores_1_1 = stores_1.next()) {
                var store = stores_1_1.value;
                /** @type {?} */
                var s = __stores__[store];
                if (!options.exclude) {
                    s.reset();
                }
                else {
                    if (options.exclude.indexOf(s.storeName) === -1) {
                        s.reset();
                    }
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (stores_1_1 && !stores_1_1.done && (_a = stores_1.return)) _a.call(stores_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
    });
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */

export { __globalState, EntityStore, getInitialEntitiesState, getInitialActiveState, QueryEntity, Query, enableAkitaProdMode, isDev, __stores__, rootDispatcher, Store, applyTransaction, transaction, push, remove, pop, unshift, sort, reverse, swap, update, splice, toggle, filterNil, coerceArray, isObject, isPlainObject, isFunction, toBoolean, isUndefined, isNil, entityExists, noop, isObservable, isString, isNumber, isDefined, resetActive, isActiveState, setValue, getValue, applyAction, action, mapInWorker, memoizeOne, SnapshotManager, snapshotManager, StoreConfig, configKey, QueryConfig, queryConfigKey, akitaConfig, getAkitaConfig, compareValues, Order, AkitaPlugin, PaginatorPlugin, Paginator, PersistNgFormPlugin, persistState, akitaDevtools, EntityCollectionPlugin, StateHistoryPlugin, EntityStateHistoryPlugin, getNestedPath, dirtyCheckDefaultParams, DirtyCheckPlugin, EntityDirtyCheckPlugin, increment, decrement, guid, resetStores, AkitaGlobals as ɵa };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,