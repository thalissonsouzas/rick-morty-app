/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { __stores__, rootDispatcher } from '../api/store';
import { __globalState } from '../internal/global-state';
import { isDefined } from '../internal/utils';
/** @type {?} */
var rootDispatcherSub;
/** @type {?} */
var devtoolsSub;
/**
 * @param {?=} ngZoneOrOptions
 * @param {?=} options
 * @return {?}
 */
export function akitaDevtools(ngZoneOrOptions, options) {
    if (options === void 0) { options = {}; }
    if (!((/** @type {?} */ (window))).__REDUX_DEVTOOLS_EXTENSION__) {
        return;
    }
    rootDispatcherSub && rootDispatcherSub.unsubscribe();
    devtoolsSub && devtoolsSub();
    /** @type {?} */
    var isAngular = ngZoneOrOptions && ngZoneOrOptions['run'];
    if (!isAngular) {
        ngZoneOrOptions = ngZoneOrOptions || {};
        ((/** @type {?} */ (ngZoneOrOptions))).run = function (cb) { return cb(); };
        options = (/** @type {?} */ (ngZoneOrOptions));
    }
    /** @type {?} */
    var defaultOptions = { name: 'Akita' };
    /** @type {?} */
    var merged = Object.assign({}, defaultOptions, options);
    /** @type {?} */
    var devTools = ((/** @type {?} */ (window))).__REDUX_DEVTOOLS_EXTENSION__.connect(merged);
    /** @type {?} */
    var appState = {};
    rootDispatcherSub = rootDispatcher.subscribe(function (action) {
        var _a;
        if (action.type === 1 /* DELETE_STORE */) {
            /** @type {?} */
            var storeName = action.payload.storeName;
            delete appState[storeName];
            devTools.send({ type: "[" + storeName + "] - Delete Store" }, appState);
        }
        if (action.type === 2 /* NEW_STATE */) {
            if (__globalState.skipAction) {
                __globalState.setSkipAction(false);
                return;
            }
            appState = tslib_1.__assign({}, appState, (_a = {}, _a[action.payload.name] = __stores__[action.payload.name]._value(), _a));
            var _b = __globalState.currentAction, type = _b.type, entityId = _b.entityId;
            /** @type {?} */
            var storeName = capitalize(action.payload.name);
            /** @type {?} */
            var msg = isDefined(entityId) ? "[" + storeName + "] - " + type + " (ids: " + entityId + ")" : "[" + storeName + "] - " + type;
            if (options.logTrace) {
                console.group(msg);
                console.trace();
                console.groupEnd();
            }
            devTools.send({ type: msg, transaction: __globalState.currentT.map(function (t) { return t.type; }) }, appState);
        }
    });
    devtoolsSub = devTools.subscribe(function (message) {
        if (message.type === 'ACTION') {
            var _a = tslib_1.__read(message.payload.split('.'), 1), storeName_1 = _a[0];
            if (__stores__[storeName_1]) {
                ((/** @type {?} */ (ngZoneOrOptions))).run(function () {
                    /** @type {?} */
                    var funcCall = message.payload.replace(storeName_1, "this['" + storeName_1 + "']");
                    try {
                        new Function("" + funcCall).call(__stores__);
                    }
                    catch (e) {
                        console.warn('Unknown Method ☹️');
                    }
                });
            }
        }
        if (message.type === 'DISPATCH') {
            /** @type {?} */
            var payloadType = message.payload.type;
            if (payloadType === 'COMMIT') {
                devTools.init(appState);
                return;
            }
            if (message.state) {
                /** @type {?} */
                var rootState_1 = JSON.parse(message.state);
                var _loop_1 = function (i, keys) {
                    /** @type {?} */
                    var storeName = keys[i];
                    if (__stores__[storeName]) {
                        ((/** @type {?} */ (ngZoneOrOptions))).run(function () {
                            __stores__[storeName].setState(function () { return rootState_1[storeName]; }, false);
                        });
                    }
                };
                for (var i = 0, keys = Object.keys(rootState_1); i < keys.length; i++) {
                    _loop_1(i, keys);
                }
            }
        }
    });
}
/**
 * @param {?} string
 * @return {?}
 */
function capitalize(string) {
    return string && string.charAt(0).toUpperCase() + string.slice(1);
}
//# sourceMappingURL=data:application/json;base64,