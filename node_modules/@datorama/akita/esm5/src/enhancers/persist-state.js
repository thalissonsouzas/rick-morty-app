/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
import { AkitaError } from '../internal/error';
import { __stores__, rootDispatcher } from '../api/store';
import { skip, filter } from 'rxjs/operators';
import { getValue, setValue } from '../internal/utils';
import { __globalState } from '../internal/global-state';
/** @type {?} */
var notBs = typeof localStorage === 'undefined';
/**
 * @record
 */
export function PersistStateParams() { }
if (false) {
    /**
     * The storage key
     * @type {?}
     */
    PersistStateParams.prototype.key;
    /**
     * Storage strategy to use. This defaults to LocalStorage but you can pass SessionStorage or anything that implements the StorageEngine API.
     * @type {?}
     */
    PersistStateParams.prototype.storage;
    /**
     * Custom deserializer. Defaults to JSON.parse
     * @type {?}
     */
    PersistStateParams.prototype.deserialize;
    /**
     * Custom serializer, defaults to JSON.stringify
     * @type {?}
     */
    PersistStateParams.prototype.serialize;
    /**
     * By default the whole state is saved to storage, use this param to include only the stores you need.
     * Pay attention that you can't use both include and exclude
     * @type {?}
     */
    PersistStateParams.prototype.include;
    /**
     *  By default the whole state is saved to storage, use this param to exclude stores that you don't need.
     *  Pay attention that you can't use both include and exclude
     * @type {?}
     */
    PersistStateParams.prototype.exclude;
}
/**
 * @param {?=} params
 * @return {?}
 */
export function persistState(params) {
    if (notBs)
        return;
    /** @type {?} */
    var defaults = {
        key: 'AkitaStores',
        storage: localStorage,
        deserialize: JSON.parse,
        serialize: JSON.stringify,
        include: [],
        exclude: []
    };
    var _a = Object.assign({}, defaults, params), storage = _a.storage, deserialize = _a.deserialize, serialize = _a.serialize, include = _a.include, exclude = _a.exclude, key = _a.key;
    /** @type {?} */
    var hasInclude = include.length > 0;
    /** @type {?} */
    var hasExclude = exclude.length > 0;
    /** @type {?} */
    var includeStores;
    if (hasInclude && hasExclude) {
        throw new AkitaError("You can't use both include and exclude");
    }
    if (hasInclude) {
        includeStores = include.reduce(function (acc, path) {
            /** @type {?} */
            var storeName = path.split('.')[0];
            acc[storeName] = path;
            return acc;
        }, {});
    }
    /** @type {?} */
    var storageState = deserialize(storage.getItem(key) || '{}');
    /** @type {?} */
    var stores = {};
    /** @type {?} */
    var acc = {};
    /**
     * @return {?}
     */
    function save() {
        storage.setItem(key, serialize(Object.assign({}, storageState, acc)));
    }
    /**
     * @param {?} storeName
     * @param {?} path
     * @return {?}
     */
    function subscribe(storeName, path) {
        stores[storeName] = __stores__[storeName]
            ._select(function (state) { return getValue(state, path); })
            .pipe(skip(1))
            .subscribe(function (data) {
            acc[storeName] = data;
            save();
        });
    }
    /**
     * @param {?} storeName
     * @param {?} store
     * @param {?} path
     * @return {?}
     */
    function setInitial(storeName, store, path) {
        if (storageState[storeName]) {
            __globalState.setAction({ type: '@PersistState' });
            store.setState(function (state) {
                return setValue(state, path, storageState[storeName]);
            });
            if (store.setDirty) {
                store.setDirty();
            }
        }
    }
    /** @type {?} */
    var subscription = rootDispatcher.pipe(filter(function (action) { return action.type === 0 /* NEW_STORE */; })).subscribe(function (action) {
        /** @type {?} */
        var currentStoreName = action.payload.store.storeName;
        if (hasExclude && exclude.includes(currentStoreName)) {
            return;
        }
        if (hasInclude) {
            /** @type {?} */
            var path = includeStores[currentStoreName];
            if (!path) {
                return;
            }
            setInitial(currentStoreName, action.payload.store, path);
            subscribe(currentStoreName, path);
        }
        else {
            setInitial(currentStoreName, action.payload.store, currentStoreName);
            subscribe(currentStoreName, currentStoreName);
        }
    });
    return {
        destroy: /**
         * @return {?}
         */
        function () {
            subscription.unsubscribe();
            for (var i = 0, keys = Object.keys(stores); i < keys.length; i++) {
                /** @type {?} */
                var storeName = keys[i];
                stores[storeName].unsubscribe();
            }
            stores = {};
        },
        clear: /**
         * @return {?}
         */
        function () {
            storage.clear();
        },
        clearStore: /**
         * @param {?} storeName
         * @return {?}
         */
        function (storeName) {
            /** @type {?} */
            var storageState = deserialize(storage.getItem(key) || '{}');
            if (storageState[storeName]) {
                delete storageState[storeName];
                storage.setItem(key, serialize(storageState));
            }
        }
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGVyc2lzdC1zdGF0ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BkYXRvcmFtYS9ha2l0YS8iLCJzb3VyY2VzIjpbInNyYy9lbmhhbmNlcnMvcGVyc2lzdC1zdGF0ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQy9DLE9BQU8sRUFBRSxVQUFVLEVBQVcsY0FBYyxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBQ25FLE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDOUMsT0FBTyxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUN2RCxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sMEJBQTBCLENBQUM7O0lBRW5ELEtBQUssR0FBRyxPQUFPLFlBQVksS0FBSyxXQUFXOzs7O0FBRWpELHdDQW1CQzs7Ozs7O0lBakJDLGlDQUFZOzs7OztJQUVaLHFDQUFpQjs7Ozs7SUFFakIseUNBQXNCOzs7OztJQUV0Qix1Q0FBb0I7Ozs7OztJQUtwQixxQ0FBa0I7Ozs7OztJQUtsQixxQ0FBa0I7Ozs7OztBQUdwQixNQUFNLFVBQVUsWUFBWSxDQUFDLE1BQW9DO0lBQy9ELElBQUksS0FBSztRQUFFLE9BQU87O1FBRVosUUFBUSxHQUF1QjtRQUNuQyxHQUFHLEVBQUUsYUFBYTtRQUNsQixPQUFPLEVBQUUsWUFBWTtRQUNyQixXQUFXLEVBQUUsSUFBSSxDQUFDLEtBQUs7UUFDdkIsU0FBUyxFQUFFLElBQUksQ0FBQyxTQUFTO1FBQ3pCLE9BQU8sRUFBRSxFQUFFO1FBQ1gsT0FBTyxFQUFFLEVBQUU7S0FDWjtJQUNLLElBQUEsd0NBQWdHLEVBQTlGLG9CQUFPLEVBQUUsNEJBQVcsRUFBRSx3QkFBUyxFQUFFLG9CQUFPLEVBQUUsb0JBQU8sRUFBRSxZQUEyQzs7UUFFaEcsVUFBVSxHQUFHLE9BQU8sQ0FBQyxNQUFNLEdBQUcsQ0FB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YUFBTTtZQUNMLFVBQVUsQ0FBQyxnQkFBZ0IsRUFBRSxNQUFNLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDO1lBQ3JFLFNBQVMsQ0FBQyxnQkFBZ0IsRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDO1NBQy9DO0lBQ0gsQ0FBQyxDQUFDO0lBRUYsT0FBTztRQUNMLE9BQU87Ozs7WUFDTCxZQUFZLENBQUMsV0FBVyxFQUFFLENBQUM7WUFDM0IsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7O29CQUMxRCxTQUFTLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQztnQkFDekIsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDO2FBQ2pDO1lBQ0QsTUFBTSxHQUFHLEVBQUUsQ0FBQztRQUNkLENBQUM7UUFDRCxLQUFLOzs7O1lBQ0gsT0FBTyxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQ2xCLENBQUM7UUFDRCxVQUFVOzs7O2tCQUFDLFNBQWlCOztnQkFDcEIsWUFBWSxHQUFHLFdBQVcsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLElBQUksQ0FBQztZQUU5RCxJQUFJLFlBQVksQ0FBQyxTQUFTLENBQUMsRUFBRTtnQkFDM0IsT0FBTyxZQUFZLENBQUMsU0FBUyxDQUFDLENBQUM7Z0JBQy9CLE9BQU8sQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLFNBQVMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDO2FBQy9DO1FBQ0gsQ0FBQztLQUNGLENBQUM7QUFDSixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWtpdGFFcnJvciB9IGZyb20gJy4uL2ludGVybmFsL2Vycm9yJztcbmltcG9ydCB7IF9fc3RvcmVzX18sIEFjdGlvbnMsIHJvb3REaXNwYXRjaGVyIH0gZnJvbSAnLi4vYXBpL3N0b3JlJztcbmltcG9ydCB7IHNraXAsIGZpbHRlciB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IGdldFZhbHVlLCBzZXRWYWx1ZSB9IGZyb20gJy4uL2ludGVybmFsL3V0aWxzJztcbmltcG9ydCB7IF9fZ2xvYmFsU3RhdGUgfSBmcm9tICcuLi9pbnRlcm5hbC9nbG9iYWwtc3RhdGUnO1xuXG5jb25zdCBub3RCcyA9IHR5cGVvZiBsb2NhbFN0b3JhZ2UgPT09ICd1bmRlZmluZWQnO1xuXG5leHBvcnQgaW50ZXJmYWNlIFBlcnNpc3RTdGF0ZVBhcmFtcyB7XG4gIC8qKiBUaGUgc3RvcmFnZSBrZXkgKi9cbiAga2V5OiBzdHJpbmc7XG4gIC8qKiBTdG9yYWdlIHN0cmF0ZWd5IHRvIHVzZS4gVGhpcyBkZWZhdWx0cyB0byBMb2NhbFN0b3JhZ2UgYnV0IHlvdSBjYW4gcGFzcyBTZXNzaW9uU3RvcmFnZSBvciBhbnl0aGluZyB0aGF0IGltcGxlbWVudHMgdGhlIFN0b3JhZ2VFbmdpbmUgQVBJLiAqL1xuICBzdG9yYWdlOiBTdG9yYWdlO1xuICAvKiogQ3VzdG9tIGRlc2VyaWFsaXplci4gRGVmYXVsdHMgdG8gSlNPTi5wYXJzZSAqL1xuICBkZXNlcmlhbGl6ZTogRnVuY3Rpb247XG4gIC8qKiBDdXN0b20gc2VyaWFsaXplciwgZGVmYXVsdHMgdG8gSlNPTi5zdHJpbmdpZnkgKi9cbiAgc2VyaWFsaXplOiBGdW5jdGlvbjtcbiAgLyoqXG4gICAqIEJ5IGRlZmF1bHQgdGhlIHdob2xlIHN0YXRlIGlzIHNhdmVkIHRvIHN0b3JhZ2UsIHVzZSB0aGlzIHBhcmFtIHRvIGluY2x1ZGUgb25seSB0aGUgc3RvcmVzIHlvdSBuZWVkLlxuICAgKiBQYXkgYXR0ZW50aW9uIHRoYXQgeW91IGNhbid0IHVzZSBib3RoIGluY2x1ZGUgYW5kIGV4Y2x1ZGVcbiAgICovXG4gIGluY2x1ZGU6IHN0cmluZ1tdO1xuICAvKipcbiAgICogIEJ5IGRlZmF1bHQgdGhlIHdob2xlIHN0YXRlIGlzIHNhdmVkIHRvIHN0b3JhZ2UsIHVzZSB0aGlzIHBhcmFtIHRvIGV4Y2x1ZGUgc3RvcmVzIHRoYXQgeW91IGRvbid0IG5lZWQuXG4gICAqICBQYXkgYXR0ZW50aW9uIHRoYXQgeW91IGNhbid0IHVzZSBib3RoIGluY2x1ZGUgYW5kIGV4Y2x1ZGVcbiAgICovXG4gIGV4Y2x1ZGU6IHN0cmluZ1tdO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcGVyc2lzdFN0YXRlKHBhcmFtcz86IFBhcnRpYWw8UGVyc2lzdFN0YXRlUGFyYW1zPikge1xuICBpZiAobm90QnMpIHJldHVybjtcblxuICBjb25zdCBkZWZhdWx0czogUGVyc2lzdFN0YXRlUGFyYW1zID0ge1xuICAgIGtleTogJ0FraXRhU3RvcmVzJyxcbiAgICBzdG9yYWdlOiBsb2NhbFN0b3JhZ2UsXG4gICAgZGVzZXJpYWxpemU6IEpTT04ucGFyc2UsXG4gICAgc2VyaWFsaXplOiBKU09OLnN0cmluZ2lmeSxcbiAgICBpbmNsdWRlOiBbXSxcbiAgICBleGNsdWRlOiBbXVxuICB9O1xuICBjb25zdCB7IHN0b3JhZ2UsIGRlc2VyaWFsaXplLCBzZXJpYWxpemUsIGluY2x1ZGUsIGV4Y2x1ZGUsIGtleSB9ID0gT2JqZWN0LmFzc2lnbih7fSwgZGVmYXVsdHMsIHBhcmFtcyk7XG5cbiAgY29uc3QgaGFzSW5jbHVkZSA9IGluY2x1ZGUubGVuZ3RoID4gMDtcbiAgY29uc3QgaGFzRXhjbHVkZSA9IGV4Y2x1ZGUubGVuZ3RoID4gMDtcbiAgbGV0IGluY2x1ZGVTdG9yZXM7XG5cbiAgaWYgKGhhc0luY2x1ZGUgJiYgaGFzRXhjbHVkZSkge1xuICAgIHRocm93IG5ldyBBa2l0YUVycm9yKFwiWW91IGNhbid0IHVzZSBib3RoIGluY2x1ZGUgYW5kIGV4Y2x1ZGVcIik7XG4gIH1cblxuICBpZiAoaGFzSW5jbHVkZSkge1xuICAgIGluY2x1ZGVTdG9yZXMgPSBpbmNsdWRlLnJlZHVjZSgoYWNjLCBwYXRoKSA9PiB7XG4gICAgICBjb25zdCBzdG9yZU5hbWUgPSBwYXRoLnNwbGl0KCcuJylbMF07XG4gICAgICBhY2Nbc3RvcmVOYW1lXSA9IHBhdGg7XG4gICAgICByZXR1cm4gYWNjO1xuICAgIH0sIHt9KTtcbiAgfVxuXG4gIGNvbnN0IHN0b3JhZ2VTdGF0ZSA9IGRlc2VyaWFsaXplKHN0b3JhZ2UuZ2V0SXRlbShrZXkpIHx8ICd7fScpO1xuXG4gIGxldCBzdG9yZXMgPSB7fTtcbiAgbGV0IGFjYyA9IHt9O1xuXG4gIGZ1bmN0aW9uIHNhdmUoKSB7XG4gICAgc3RvcmFnZS5zZXRJdGVtKGtleSwgc2VyaWFsaXplKE9iamVjdC5hc3NpZ24oe30sIHN0b3JhZ2VTdGF0ZSwgYWNjKSkpO1xuICB9XG5cbiAgZnVuY3Rpb24gc3Vic2NyaWJlKHN0b3JlTmFtZSwgcGF0aCkge1xuICAgIHN0b3Jlc1tzdG9yZU5hbWVdID0gX19zdG9yZXNfX1tzdG9yZU5hbWVdXG4gICAgICAuX3NlbGVjdChzdGF0ZSA9PiBnZXRWYWx1ZShzdGF0ZSwgcGF0aCkpXG4gICAgICAucGlwZShza2lwKDEpKVxuICAgICAgLnN1YnNjcmliZShkYXRhID0+IHtcbiAgICAgICAgYWNjW3N0b3JlTmFtZV0gPSBkYXRhO1xuICAgICAgICBzYXZlKCk7XG4gICAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNldEluaXRpYWwoc3RvcmVOYW1lLCBzdG9yZSwgcGF0aCkge1xuICAgIGlmIChzdG9yYWdlU3RhdGVbc3RvcmVOYW1lXSkge1xuICAgICAgX19nbG9iYWxTdGF0ZS5zZXRBY3Rpb24oeyB0eXBlOiAnQFBlcnNpc3RTdGF0ZScgfSk7XG4gICAgICBzdG9yZS5zZXRTdGF0ZShzdGF0ZSA9PiB7XG4gICAgICAgIHJldHVybiBzZXRWYWx1ZShzdGF0ZSwgcGF0aCwgc3RvcmFnZVN0YXRlW3N0b3JlTmFtZV0pO1xuICAgICAgfSk7XG4gICAgICBpZiAoc3RvcmUuc2V0RGlydHkpIHtcbiAgICAgICAgc3RvcmUuc2V0RGlydHkoKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBjb25zdCBzdWJzY3JpcHRpb24gPSByb290RGlzcGF0Y2hlci5waXBlKGZpbHRlcihhY3Rpb24gPT4gYWN0aW9uLnR5cGUgPT09IEFjdGlvbnMuTkVXX1NUT1JFKSkuc3Vic2NyaWJlKGFjdGlvbiA9PiB7XG4gICAgbGV0IGN1cnJlbnRTdG9yZU5hbWUgPSBhY3Rpb24ucGF5bG9hZC5zdG9yZS5zdG9yZU5hbWU7XG5cbiAgICBpZiAoaGFzRXhjbHVkZSAmJiBleGNsdWRlLmluY2x1ZGVzKGN1cnJlbnRTdG9yZU5hbWUpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKGhhc0luY2x1ZGUpIHtcbiAgICAgIGNvbnN0IHBhdGggPSBpbmNsdWRlU3RvcmVzW2N1cnJlbnRTdG9yZU5hbWVdO1xuICAgICAgaWYgKCFwYXRoKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHNldEluaXRpYWwoY3VycmVudFN0b3JlTmFtZSwgYWN0aW9uLnBheWxvYWQuc3RvcmUsIHBhdGgpO1xuICAgICAgc3Vic2NyaWJlKGN1cnJlbnRTdG9yZU5hbWUsIHBhdGgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzZXRJbml0aWFsKGN1cnJlbnRTdG9yZU5hbWUsIGFjdGlvbi5wYXlsb2FkLnN0b3JlLCBjdXJyZW50U3RvcmVOYW1lKTtcbiAgICAgIHN1YnNjcmliZShjdXJyZW50U3RvcmVOYW1lLCBjdXJyZW50U3RvcmVOYW1lKTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiB7XG4gICAgZGVzdHJveSgpIHtcbiAgICAgIHN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgICAgZm9yIChsZXQgaSA9IDAsIGtleXMgPSBPYmplY3Qua2V5cyhzdG9yZXMpOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCBzdG9yZU5hbWUgPSBrZXlzW2ldO1xuICAgICAgICBzdG9yZXNbc3RvcmVOYW1lXS51bnN1YnNjcmliZSgpO1xuICAgICAgfVxuICAgICAgc3RvcmVzID0ge307XG4gICAgfSxcbiAgICBjbGVhcigpIHtcbiAgICAgIHN0b3JhZ2UuY2xlYXIoKTtcbiAgICB9LFxuICAgIGNsZWFyU3RvcmUoc3RvcmVOYW1lOiBzdHJpbmcpIHtcbiAgICAgIGNvbnN0IHN0b3JhZ2VTdGF0ZSA9IGRlc2VyaWFsaXplKHN0b3JhZ2UuZ2V0SXRlbShrZXkpIHx8ICd7fScpO1xuXG4gICAgICBpZiAoc3RvcmFnZVN0YXRlW3N0b3JlTmFtZV0pIHtcbiAgICAgICAgZGVsZXRlIHN0b3JhZ2VTdGF0ZVtzdG9yZU5hbWVdO1xuICAgICAgICBzdG9yYWdlLnNldEl0ZW0oa2V5LCBzZXJpYWxpemUoc3RvcmFnZVN0YXRlKSk7XG4gICAgICB9XG4gICAgfVxuICB9O1xufVxuIl19