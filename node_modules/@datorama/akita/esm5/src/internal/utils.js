/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Observable } from 'rxjs';
/**
 * Wraps the provided value in an array, unless the provided _value is an array.
 * @template T
 * @param {?} value
 * @return {?}
 */
export function coerceArray(value) {
    return Array.isArray(value) ? value : [value];
}
/**
 * Check if a value is an object
 * @param {?} value
 * @return {?}
 */
export function isObject(value) {
    return Object.prototype.toString.call(value) === '[object Object]';
}
/**
 * @param {?} value
 * @return {?}
 */
export function isPlainObject(value) {
    return toBoolean(value) && value.constructor.name === 'Object';
}
/**
 * @param {?} value
 * @return {?}
 */
export function isFunction(value) {
    return typeof value === 'function';
}
/**
 * @param {?} value
 * @return {?}
 */
export function toBoolean(value) {
    return value != null && "" + value !== 'false';
}
/**
 * @param {?} value
 * @return {?}
 */
export function isUndefined(value) {
    return value === undefined;
}
/**
 * @param {?} v
 * @return {?}
 */
export function isNil(v) {
    return v === null || v === undefined;
}
/**
 * Check if entity exists
 * @template E
 * @param {?} id
 * @param {?} entities
 * @return {?}
 */
export function entityExists(id, entities) {
    return entities.hasOwnProperty(id);
}
/**
 * Observable that emits empty value and complete
 * @template T
 * @return {?}
 */
export function noop() {
    return new Observable(function (observer) {
        observer.next();
        observer.complete();
    });
}
/**
 * @param {?} value
 * @return {?}
 */
export function isObservable(value) {
    return toBoolean(value) && isFunction(value.subscribe);
}
/**
 * @param {?} val
 * @return {?}
 */
export function isString(val) {
    return typeof val === 'string';
}
/**
 * @param {?} value
 * @return {?}
 */
export function isNumber(value) {
    return typeof value === 'number';
}
/**
 * @param {?} val
 * @return {?}
 */
export function isDefined(val) {
    return val !== null && typeof val !== 'undefined';
}
/**
 * Check if the active entity exist
 * @template E
 * @param {?} state
 * @return {?}
 */
export function resetActive(state) {
    return isActiveState(state) && entityExists(((/** @type {?} */ (state))).active, state.entities) === false;
}
/**
 * Check if the store supports active entity
 * @template E
 * @param {?} state
 * @return {?}
 */
export function isActiveState(state) {
    return ((/** @type {?} */ (state))).hasOwnProperty('active');
}
/**
 * setValue(state, 'todos.ui', { filter: {}})
 * @type {?}
 */
export var setValue = function (obj, prop, val) {
    /** @type {?} */
    var split = prop.split('.');
    if (split.length === 1)
        return val;
    obj = tslib_1.__assign({}, obj);
    /** @type {?} */
    var lastIndex = split.length - 2;
    /** @type {?} */
    var removeStoreName = prop.split('.').slice(1);
    removeStoreName.reduce(function (acc, part, index) {
        if (index === lastIndex) {
            acc[part] = val;
        }
        else {
            acc[part] = tslib_1.__assign({}, acc[part]);
        }
        return acc && acc[part];
    }, obj);
    return obj;
};
/**
 * getValue(state, 'todos.ui')
 * @type {?}
 */
export var getValue = function (obj, prop) {
    /** return the whole state  */
    if (prop.split('.').length === 1) {
        return obj;
    }
    /** @type {?} */
    var removeStoreName = prop
        .split('.')
        .slice(1)
        .join('.');
    return removeStoreName.split('.').reduce(function (acc, part) { return acc && acc[part]; }, obj);
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZGF0b3JhbWEvYWtpdGEvIiwic291cmNlcyI6WyJzcmMvaW50ZXJuYWwvdXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sTUFBTSxDQUFDOzs7Ozs7O0FBSWxDLE1BQU0sVUFBVSxXQUFXLENBQUksS0FBYztJQUMzQyxPQUFPLEtBQUssQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUNoRCxDQUFDOzs7Ozs7QUFHRCxNQUFNLFVBQVUsUUFBUSxDQUFDLEtBQVU7SUFDakMsT0FBTyxNQUFNLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssaUJBQWlCLENBQUM7QUFDckUsQ0FBQzs7Ozs7QUFFRCxNQUFNLFVBQVUsYUFBYSxDQUFDLEtBQUs7SUFDakMsT0FBTyxTQUFTLENBQUMsS0FBSyxDQUFDLElBQUksS0FBSyxDQUFDLFdBQVcsQ0FBQyxJQUFJLEtBQUssUUFBUSxDQUFDO0FBQ2pFLENBQUM7Ozs7O0FBRUQsTUFBTSxVQUFVLFVBQVUsQ0FBQyxLQUFLO0lBQzlCLE9BQU8sT0FBTyxLQUFLLEtBQUssVUFBVSxDQUFDO0FBQ3JDLENBQUM7Ozs7O0FBRUQsTUFBTSxVQUFVLFNBQVMsQ0FBQyxLQUFVO0lBQ2xDLE9BQU8sS0FBSyxJQUFJLElBQUksSUFBSSxLQUFHLEtBQU8sS0FBSyxPQUFPLENBQUM7QUFDakQsQ0FBQzs7Ozs7QUFFRCxNQUFNLFVBQVUsV0FBVyxDQUFDLEtBQUs7SUFDL0IsT0FBTyxLQUFLLEtBQUssU0FBUyxDQUFDO0FBQzdCLENBQUM7Ozs7O0FBRUQsTUFBTSxVQUFVLEtBQUssQ0FBQyxDQUFDO0lBQ3JCLE9BQU8sQ0FBQyxLQUFLLElBQUksSUFBSSxDQUFDLEtBQUssU0FBUyxD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QUFHLENBQUM7SUFDWixPQUFPLGVBQWUsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLFVBQUMsR0FBUSxFQUFFLElBQVksSUFBSyxPQUFBLEdBQUcsSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQWhCLENBQWdCLEVBQUUsR0FBRyxDQUFDLENBQUM7QUFDOUYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IEFjdGl2ZVN0YXRlLCBFbnRpdHlTdGF0ZSwgSGFzaE1hcCwgSUQgfSBmcm9tICcuLi9hcGkvdHlwZXMnO1xuXG4vKiogV3JhcHMgdGhlIHByb3ZpZGVkIHZhbHVlIGluIGFuIGFycmF5LCB1bmxlc3MgdGhlIHByb3ZpZGVkIF92YWx1ZSBpcyBhbiBhcnJheS4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjb2VyY2VBcnJheTxUPih2YWx1ZTogVCB8IFRbXSk6IFRbXSB7XG4gIHJldHVybiBBcnJheS5pc0FycmF5KHZhbHVlKSA/IHZhbHVlIDogW3ZhbHVlXTtcbn1cblxuLyoqIENoZWNrIGlmIGEgdmFsdWUgaXMgYW4gb2JqZWN0ICovXG5leHBvcnQgZnVuY3Rpb24gaXNPYmplY3QodmFsdWU6IGFueSkge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKSA9PT0gJ1tvYmplY3QgT2JqZWN0XSc7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1BsYWluT2JqZWN0KHZhbHVlKSB7XG4gIHJldHVybiB0b0Jvb2xlYW4odmFsdWUpICYmIHZhbHVlLmNvbnN0cnVjdG9yLm5hbWUgPT09ICdPYmplY3QnO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNGdW5jdGlvbih2YWx1ZSk6IHZhbHVlIGlzIEZ1bmN0aW9uIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRvQm9vbGVhbih2YWx1ZTogYW55KTogYm9vbGVhbiB7XG4gIHJldHVybiB2YWx1ZSAhPSBudWxsICYmIGAke3ZhbHVlfWAgIT09ICdmYWxzZSc7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1VuZGVmaW5lZCh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzTmlsKHYpIHtcbiAgcmV0dXJuIHYgPT09IG51bGwgfHwgdiA9PT0gdW5kZWZpbmVkO1xufVxuXG4vKipcbiAqIENoZWNrIGlmIGVudGl0eSBleGlzdHNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGVudGl0eUV4aXN0czxFPihpZDogSUQsIGVudGl0aWVzOiBIYXNoTWFwPEU+KSB7XG4gIHJldHVybiBlbnRpdGllcy5oYXNPd25Qcm9wZXJ0eShpZCk7XG59XG5cbi8qKlxuICogT2JzZXJ2YWJsZSB0aGF0IGVtaXRzIGVtcHR5IHZhbHVlIGFuZCBjb21wbGV0ZVxuICovXG5leHBvcnQgZnVuY3Rpb24gbm9vcDxUPigpOiBPYnNlcnZhYmxlPFQ+IHtcbiAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlKG9ic2VydmVyID0+IHtcbiAgICBvYnNlcnZlci5uZXh0KCk7XG4gICAgb2JzZXJ2ZXIuY29tcGxldGUoKTtcbiAgfSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc09ic2VydmFibGUodmFsdWUpIHtcbiAgcmV0dXJuIHRvQm9vbGVhbih2YWx1ZSkgJiYgaXNGdW5jdGlvbih2YWx1ZS5zdWJzY3JpYmUpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNTdHJpbmcodmFsOiBzdHJpbmcgfCBhbnkpOiB2YWwgaXMgc3RyaW5nIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNOdW1iZXIodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcic7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0RlZmluZWQodmFsKSB7XG4gIHJldHVybiB2YWwgIT09IG51bGwgJiYgdHlwZW9mIHZhbCAhPT0gJ3VuZGVmaW5lZCc7XG59XG5cbi8qKlxuICogQ2hlY2sgaWYgdGhlIGFjdGl2ZSBlbnRpdHkgZXhpc3RcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlc2V0QWN0aXZlPEU+KHN0YXRlOiBFbnRpdHlTdGF0ZTxFPikge1xuICByZXR1cm4gaXNBY3RpdmVTdGF0ZShzdGF0ZSkgJiYgZW50aXR5RXhpc3RzKChzdGF0ZSBhcyBBY3RpdmVTdGF0ZSkuYWN0aXZlLCBzdGF0ZS5lbnRpdGllcykgPT09IGZhbHNlO1xufVxuXG4vKipcbiAqIENoZWNrIGlmIHRoZSBzdG9yZSBzdXBwb3J0cyBhY3RpdmUgZW50aXR5XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc0FjdGl2ZVN0YXRlPEU+KHN0YXRlOiBFbnRpdHlTdGF0ZTxFPikge1xuICByZXR1cm4gKHN0YXRlIGFzIEFjdGl2ZVN0YXRlKS5oYXNPd25Qcm9wZXJ0eSgnYWN0aXZlJyk7XG59XG5cbi8qKlxuICogc2V0VmFsdWUoc3RhdGUsICd0b2Rvcy51aScsIHsgZmlsdGVyOiB7fX0pXG4gKi9cbmV4cG9ydCBjb25zdCBzZXRWYWx1ZSA9IChvYmo6IGFueSwgcHJvcDogc3RyaW5nLCB2YWw6IGFueSkgPT4ge1xuICBjb25zdCBzcGxpdCA9IHByb3Auc3BsaXQoJy4nKTtcblxuICBpZiAoc3BsaXQubGVuZ3RoID09PSAxKSByZXR1cm4gdmFsO1xuXG4gIG9iaiA9IHsgLi4ub2JqIH07XG5cbiAgY29uc3QgbGFzdEluZGV4ID0gc3BsaXQubGVuZ3RoIC0gMjtcbiAgY29uc3QgcmVtb3ZlU3RvcmVOYW1lID0gcHJvcC5zcGxpdCgnLicpLnNsaWNlKDEpO1xuXG4gIHJlbW92ZVN0b3JlTmFtZS5yZWR1Y2UoKGFjYywgcGFydCwgaW5kZXgpID0+IHtcbiAgICBpZiAoaW5kZXggPT09IGxhc3RJbmRleCkge1xuICAgICAgYWNjW3BhcnRdID0gdmFsO1xuICAgIH0gZWxzZSB7XG4gICAgICBhY2NbcGFydF0gPSB7IC4uLmFjY1twYXJ0XSB9O1xuICAgIH1cblxuICAgIHJldHVybiBhY2MgJiYgYWNjW3BhcnRdO1xuICB9LCBvYmopO1xuXG4gIHJldHVybiBvYmo7XG59O1xuXG4vKipcbiAqIGdldFZhbHVlKHN0YXRlLCAndG9kb3MudWknKVxuICovXG5leHBvcnQgY29uc3QgZ2V0VmFsdWUgPSAob2JqOiBhbnksIHByb3A6IHN0cmluZykgPT4ge1xuICAvKiogcmV0dXJuIHRoZSB3aG9sZSBzdGF0ZSAgKi9cbiAgaWYgKHByb3Auc3BsaXQoJy4nKS5sZW5ndGggPT09IDEpIHtcbiAgICByZXR1cm4gb2JqO1xuICB9XG4gIGNvbnN0IHJlbW92ZVN0b3JlTmFtZSA9IHByb3BcbiAgICAuc3BsaXQoJy4nKVxuICAgIC5zbGljZSgxKVxuICAgIC5qb2luKCcuJyk7XG4gIHJldHVybiByZW1vdmVTdG9yZU5hbWUuc3BsaXQoJy4nKS5yZWR1Y2UoKGFjYzogYW55LCBwYXJ0OiBzdHJpbmcpID0+IGFjYyAmJiBhY2NbcGFydF0sIG9iaik7XG59O1xuIl19