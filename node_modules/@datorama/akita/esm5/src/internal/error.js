/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { entityExists, isObject, toBoolean } from './utils';
var AkitaError = /** @class */ (function (_super) {
    tslib_1.__extends(AkitaError, _super);
    function AkitaError(message) {
        return _super.call(this, message) || this;
    }
    return AkitaError;
}(Error));
export { AkitaError };
var AkitaImmutabilityError = /** @class */ (function (_super) {
    tslib_1.__extends(AkitaImmutabilityError, _super);
    function AkitaImmutabilityError(storeName) {
        return _super.call(this, "The new state should be immutable. Make sure to return a new immutable state. \n store: \n " + storeName) || this;
    }
    return AkitaImmutabilityError;
}(AkitaError));
export { AkitaImmutabilityError };
var AkitaEntityNotExistsError = /** @class */ (function (_super) {
    tslib_1.__extends(AkitaEntityNotExistsError, _super);
    function AkitaEntityNotExistsError(id) {
        return _super.call(this, "Entity " + id + " does not exists") || this;
    }
    return AkitaEntityNotExistsError;
}(AkitaError));
export { AkitaEntityNotExistsError };
var AkitaNoActiveError = /** @class */ (function (_super) {
    tslib_1.__extends(AkitaNoActiveError, _super);
    function AkitaNoActiveError() {
        return _super.call(this, "Active is null/undefined") || this;
    }
    return AkitaNoActiveError;
}(AkitaError));
export { AkitaNoActiveError };
var AkitaInvalidEntityState = /** @class */ (function (_super) {
    tslib_1.__extends(AkitaInvalidEntityState, _super);
    function AkitaInvalidEntityState() {
        return _super.call(this, "Entity state is invalid") || this;
    }
    return AkitaInvalidEntityState;
}(AkitaError));
export { AkitaInvalidEntityState };
var AkitaUpdateIdKeyError = /** @class */ (function (_super) {
    tslib_1.__extends(AkitaUpdateIdKeyError, _super);
    function AkitaUpdateIdKeyError() {
        return _super.call(this, "Updating entity id is not permitted when updating many entities") || this;
    }
    return AkitaUpdateIdKeyError;
}(AkitaError));
export { AkitaUpdateIdKeyError };
/**
 * @param {?} id
 * @param {?} entities
 * @return {?}
 */
export function assertEntityExists(id, entities) {
    if (!entityExists(id, entities)) {
        throw new AkitaEntityNotExistsError(id);
    }
}
/**
 * @param {?} store
 * @return {?}
 */
export function assertActive(store) {
    if (!toBoolean(store.active)) {
        throw new AkitaNoActiveError();
    }
}
/**
 * @param {?} state
 * @return {?}
 */
export function assertEntityState(state) {
    /** @type {?} */
    var assertEntities = isObject(state);
    if (!assertEntities) {
        throw new AkitaInvalidEntityState();
    }
}
/**
 * @param {?} name
 * @param {?} className
 * @return {?}
 */
export function assertDecorator(name, className) {
    if (!name) {
        console.error("@StoreConfig({ name }) is missing in " + className);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXJyb3IuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZGF0b3JhbWEvYWtpdGEvIiwic291cmNlcyI6WyJzcmMvaW50ZXJuYWwvZXJyb3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsWUFBWSxFQUFFLFFBQVEsRUFBRSxTQUFTLEVBQUUsTUFBTSxTQUFTLENBQUM7QUFHNUQ7SUFBZ0Msc0NBQUs7SUFDbkMsb0JBQVksT0FBZTtlQUN6QixrQkFBTSxPQUFPLENBQUM7SUFDaEIsQ0FBQztJQUNILGlCQUFDO0FBQUQsQ0FBQyxBQUpELENBQWdDLEtBQUssR0FJcEM7O0FBRUQ7SUFBNEMsa0RBQVU7SUFDcEQsZ0NBQVksU0FBUztlQUNuQixrQkFBTSxnR0FBOEYsU0FBVyxDQUFDO0lBQ2xILENBQUM7SUFDSCw2QkFBQztBQUFELENBQUMsQUFKRCxDQUE0QyxVQUFVLEdBSXJEOztBQUVEO0lBQStDLHFEQUFVO0lBQ3ZELG1DQUFZLEVBQUU7ZUFDWixrQkFBTSxZQUFVLEVBQUUscUJBQWtCLENBQUM7SUFDdkMsQ0FBQztJQUNILGdDQUFDO0FBQUQsQ0FBQyxBQUpELENBQStDLFVBQVUsR0FJeEQ7O0FBRUQ7SUFBd0MsOENBQVU7SUFDaEQ7ZUFDRSxrQkFBTSwwQkFBMEIsQ0FBQztJQUNuQyxDQUFDO0lBQ0gseUJBQUM7QUFBRCxDQUFDLEFBSkQsQ0FBd0MsVUFBVSxHQUlqRDs7QUFFRDtJQUE2QyxtREFBVTtJQUNyRDtlQUNFLGtCQUFNLHlCQUF5QixDQUFDO0lBQ2xDLENBQUM7SUFDSCw4QkFBQztBQUFELENBQUMsQUFKRCxDQUE2QyxVQUFVLEdBSXREOztBQUVEO0lBQTJDLGlEQUFVO0lBQ25EO2VBQ0Usa0JBQU0saUVBQWlFLENBQUM7SUFDMUUsQ0FBQztJQUNILDRCQUFDO0FBQUQsQ0FBQyxBQUpELENBQTJDLFVBQVUsR0FJcEQ7Ozs7Ozs7QUFFRCxNQUFNLFVBQVUsa0JBQWtCLENBQUMsRUFBTSxFQUFFLFFBQVE7SUFDakQsSUFBSSxDQUFDLFlBQVksQ0FBQyxFQUFFLEVBQUUsUUFBUSxDQUFDLEVBQUU7UUFDL0IsTUFBTSxJQUFJLHlCQUF5QixDQUFDLEVBQUUsQ0FBQyxDQUFDO0tBQ3pDO0FBQ0gsQ0FBQzs7Ozs7QUFFRCxNQUFNLFVBQVUsWUFBWSxDQUFDLEtBQUs7SUFDaEMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLEVBQUU7UUFDNUIsTUFBTSxJQUFJLGtCQUFrQixFQUFFLENBQUM7S0FDaEM7QUFDSCxDQUFDOzs7OztBQUVELE1BQU0sVUFBVSxpQkFBaUIsQ0FBQyxLQUF1Qjs7UUFDakQsY0FBYyxHQUFHLFFBQVEsQ0FBQyxLQUFLLENBQUM7SUFFdEMsSUFBSSxDQUFDLGNBQWMsRUFBRTtRQUNuQixNQUFNLElBQUksdUJBQXVCLEVBQUUsQ0FBQztLQUNyQztBQUNILENBQUM7Ozs7OztBQUVELE1BQU0sVUFBVSxlQUFlLENBQUMsSUFBWSxFQUFFLFNBQWlCO0lBQzdELElBQUksQ0FBQyxJQUFJLEVBQUU7UUFDVCxPQUFPLENBQUMsS0FBSyxDQUFDLDBDQUF3QyxTQUFXLENBQUMsQ0FBQztLQUNwRTtBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBlbnRpdHlFeGlzdHMsIGlzT2JqZWN0LCB0b0Jvb2xlYW4gfSBmcm9tICcuL3V0aWxzJztcbmltcG9ydCB7IEVudGl0eVN0YXRlLCBJRCB9IGZyb20gJy4uL2FwaS90eXBlcyc7XG5cbmV4cG9ydCBjbGFzcyBBa2l0YUVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICBjb25zdHJ1Y3RvcihtZXNzYWdlOiBzdHJpbmcpIHtcbiAgICBzdXBlcihtZXNzYWdlKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgQWtpdGFJbW11dGFiaWxpdHlFcnJvciBleHRlbmRzIEFraXRhRXJyb3Ige1xuICBjb25zdHJ1Y3RvcihzdG9yZU5hbWUpIHtcbiAgICBzdXBlcihgVGhlIG5ldyBzdGF0ZSBzaG91bGQgYmUgaW1tdXRhYmxlLiBNYWtlIHN1cmUgdG8gcmV0dXJuIGEgbmV3IGltbXV0YWJsZSBzdGF0ZS4gXFxuIHN0b3JlOiBcXG4gJHtzdG9yZU5hbWV9YCk7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIEFraXRhRW50aXR5Tm90RXhpc3RzRXJyb3IgZXh0ZW5kcyBBa2l0YUVycm9yIHtcbiAgY29uc3RydWN0b3IoaWQpIHtcbiAgICBzdXBlcihgRW50aXR5ICR7aWR9IGRvZXMgbm90IGV4aXN0c2ApO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBBa2l0YU5vQWN0aXZlRXJyb3IgZXh0ZW5kcyBBa2l0YUVycm9yIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoYEFjdGl2ZSBpcyBudWxsL3VuZGVmaW5lZGApO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBBa2l0YUludmFsaWRFbnRpdHlTdGF0ZSBleHRlbmRzIEFraXRhRXJyb3Ige1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcihgRW50aXR5IHN0YXRlIGlzIGludmFsaWRgKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgQWtpdGFVcGRhdGVJZEtleUVycm9yIGV4dGVuZHMgQWtpdGFFcnJvciB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKGBVcGRhdGluZyBlbnRpdHkgaWQgaXMgbm90IHBlcm1pdHRlZCB3aGVuIHVwZGF0aW5nIG1hbnkgZW50aXRpZXNgKTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gYXNzZXJ0RW50aXR5RXhpc3RzKGlkOiBJRCwgZW50aXRpZXMpIHtcbiAgaWYgKCFlbnRpdHlFeGlzdHMoaWQsIGVudGl0aWVzKSkge1xuICAgIHRocm93IG5ldyBBa2l0YUVudGl0eU5vdEV4aXN0c0Vycm9yKGlkKTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gYXNzZXJ0QWN0aXZlKHN0b3JlKSB7XG4gIGlmICghdG9Cb29sZWFuKHN0b3JlLmFjdGl2ZSkpIHtcbiAgICB0aHJvdyBuZXcgQWtpdGFOb0FjdGl2ZUVycm9yKCk7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFzc2VydEVudGl0eVN0YXRlKHN0YXRlOiBFbnRpdHlTdGF0ZTxhbnk+KSB7XG4gIGNvbnN0IGFzc2VydEVudGl0aWVzID0gaXNPYmplY3Qoc3RhdGUpO1xuXG4gIGlmICghYXNzZXJ0RW50aXRpZXMpIHtcbiAgICB0aHJvdyBuZXcgQWtpdGFJbnZhbGlkRW50aXR5U3RhdGUoKTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gYXNzZXJ0RGVjb3JhdG9yKG5hbWU6IHN0cmluZywgY2xhc3NOYW1lOiBzdHJpbmcpIHtcbiAgaWYgKCFuYW1lKSB7XG4gICAgY29uc29sZS5lcnJvcihgQFN0b3JlQ29uZmlnKHsgbmFtZSB9KSBpcyBtaXNzaW5nIGluICR7Y2xhc3NOYW1lfWApO1xuICB9XG59XG4iXX0=