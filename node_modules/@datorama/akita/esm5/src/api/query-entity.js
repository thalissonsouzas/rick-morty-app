/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { combineLatest } from 'rxjs';
import { auditTime, map, switchMap, withLatestFrom } from 'rxjs/operators';
import { compareValues } from '../internal/sort';
import { entityExists, isFunction, isUndefined, toBoolean } from '../internal/utils';
import { memoizeOne } from './memoize';
import { Query } from './query';
/**
 * @record
 * @template E
 */
export function SelectOptions() { }
if (false) {
    /** @type {?|undefined} */
    SelectOptions.prototype.asObject;
    /** @type {?|undefined} */
    SelectOptions.prototype.filterBy;
    /** @type {?|undefined} */
    SelectOptions.prototype.limitTo;
}
/**
 *  An abstraction for querying the entities from the store
 * @template S, E, ActiveEntity
 */
var /**
 *  An abstraction for querying the entities from the store
 * @template S, E, ActiveEntity
 */
QueryEntity = /** @class */ (function (_super) {
    tslib_1.__extends(QueryEntity, _super);
    function QueryEntity(store) {
        var _this = _super.call(this, store) || this;
        _this.__store__ = store;
        return _this;
    }
    /**
     * @param {?=} options
     * @return {?}
     */
    QueryEntity.prototype.selectAll = /**
     * @param {?=} options
     * @return {?}
     */
    function (options) {
        var _this = this;
        if (options === void 0) { options = {
            asObject: false
        }; }
        /** @type {?} */
        var selectState$ = this.select(function (state) { return state; });
        /** @type {?} */
        var selectEntities$ = this.select(function (state) { return state.entities; });
        this.sortByOptions(options);
        return selectEntities$.pipe(withLatestFrom(selectState$, function (entities, state) {
            var ids = state.ids;
            if (options.asObject) {
                return toMap(ids, entities, options);
            }
            else {
                if (!options.filterBy && !options.sortBy) {
                    if (!_this.memoized) {
                        _this.memoized = memoizeOne(toArray);
                    }
                    return _this.memoized(state, options);
                }
                return toArray(state, options);
            }
        }));
    };
    /**
     * @param {?=} options
     * @return {?}
     */
    QueryEntity.prototype.getAll = /**
     * @param {?=} options
     * @return {?}
     */
    function (options) {
        if (options === void 0) { options = { asObject: false, filterBy: undefined, limitTo: undefined }; }
        /** @type {?} */
        var state = this.getSnapshot();
        if (options.asObject) {
            return toMap(state.ids, state.entities, options, true);
        }
        this.sortByOptions(options);
        return toArray(state, options);
    };
    /**
     * Select multiple entities from the store.
     *
     * @example
     * this.store.selectMany([1,2]);
     */
    /**
     * Select multiple entities from the store.
     *
     * \@example
     * this.store.selectMany([1,2]);
     * @param {?} ids
     * @param {?=} options
     * @return {?}
     */
    QueryEntity.prototype.selectMany = /**
     * Select multiple entities from the store.
     *
     * \@example
     * this.store.selectMany([1,2]);
     * @param {?} ids
     * @param {?=} options
     * @return {?}
     */
    function (ids, options) {
        var _this = this;
        if (options === void 0) { options = {}; }
        /** @type {?} */
        var filterUndefined = isUndefined(options.filterUndefined) ? true : options.filterUndefined;
        /** @type {?} */
        var entities = ids.map(function (id) { return _this.selectEntity(id); });
        return combineLatest(entities).pipe(map(function (entities) {
            return filterUndefined ? entities.filter(function (val) { return !isUndefined(val); }) : entities;
        }), auditTime(0));
    };
    /**
     * @template R
     * @param {?} id
     * @param {?=} project
     * @return {?}
     */
    QueryEntity.prototype.selectEntity = /**
     * @template R
     * @param {?} id
     * @param {?=} project
     * @return {?}
     */
    function (id, project) {
        var _this = this;
        if (!project) {
            return this._byId(id);
        }
        return this.select(function (state) {
            if (_this.hasEntity(id)) {
                return project(_this.getEntity(id));
            }
            return undefined;
        });
    };
    /**
     * Get an entity by id
     *
     * @example
     * this.store.getEntity(1);
     */
    /**
     * Get an entity by id
     *
     * \@example
     * this.store.getEntity(1);
     * @param {?} id
     * @return {?}
     */
    QueryEntity.prototype.getEntity = /**
     * Get an entity by id
     *
     * \@example
     * this.store.getEntity(1);
     * @param {?} id
     * @return {?}
     */
    function (id) {
        return this.getSnapshot().entities[(/** @type {?} */ (id))];
    };
    /**
     * Select the active entity's id.
     */
    /**
     * Select the active entity's id.
     * @return {?}
     */
    QueryEntity.prototype.selectActiveId = /**
     * Select the active entity's id.
     * @return {?}
     */
    function () {
        return this.select(function (state) { return ((/** @type {?} */ (state))).active; });
    };
    /**
     * Get the active id
     */
    /**
     * Get the active id
     * @return {?}
     */
    QueryEntity.prototype.getActiveId = /**
     * Get the active id
     * @return {?}
     */
    function () {
        return ((/** @type {?} */ (this.getSnapshot()))).active;
    };
    /**
     * @template R
     * @param {?=} project
     * @return {?}
     */
    QueryEntity.prototype.selectActive = /**
     * @template R
     * @param {?=} project
     * @return {?}
     */
    function (project) {
        var _this = this;
        return this.selectActiveId().pipe(switchMap(function (activeId) { return _this.selectEntity(activeId, project); }));
    };
    /**
     * Get the active entity.
     */
    /**
     * Get the active entity.
     * @return {?}
     */
    QueryEntity.prototype.getActive = /**
     * Get the active entity.
     * @return {?}
     */
    function () {
        /** @type {?} */
        var activeId = this.getActiveId();
        return toBoolean(activeId) ? this.getEntity(activeId) : undefined;
    };
    /**
     * Select the store's entity collection length.
     */
    /**
     * Select the store's entity collection length.
     * @param {?=} predicate
     * @return {?}
     */
    QueryEntity.prototype.selectCount = /**
     * Select the store's entity collection length.
     * @param {?=} predicate
     * @return {?}
     */
    function (predicate) {
        if (isFunction(predicate)) {
            return this.selectAll({
                filterBy: predicate
            }).pipe(map(function (entities) { return entities.length; }));
        }
        return this.select(function (store) { return store.ids.length; });
    };
    /**
     * Get the store's entity collection length.
     */
    /**
     * Get the store's entity collection length.
     * @param {?=} predicate
     * @return {?}
     */
    QueryEntity.prototype.getCount = /**
     * Get the store's entity collection length.
     * @param {?=} predicate
     * @return {?}
     */
    function (predicate) {
        if (isFunction(predicate)) {
            return this.getAll().filter(predicate).length;
        }
        return this.getSnapshot().ids.length;
    };
    /**
     * @param {?} projectOrIds
     * @return {?}
     */
    QueryEntity.prototype.hasEntity = /**
     * @param {?} projectOrIds
     * @return {?}
     */
    function (projectOrIds) {
        var _this = this;
        if (isFunction(projectOrIds)) {
            return this.getAll().some(projectOrIds);
        }
        if (Array.isArray(projectOrIds)) {
            return projectOrIds.every(function (id) { return ((/** @type {?} */ (id))) in _this.store.entities; });
        }
        return ((/** @type {?} */ (projectOrIds))) in this.store.entities;
    };
    /**
     * Returns whether entity store has an active entity.
     */
    /**
     * Returns whether entity store has an active entity.
     * @return {?}
     */
    QueryEntity.prototype.hasActive = /**
     * Returns whether entity store has an active entity.
     * @return {?}
     */
    function () {
        return this.getSnapshot().active != null;
    };
    /**
     * @return {?}
     */
    QueryEntity.prototype.isEmpty = /**
     * @return {?}
     */
    function () {
        return this.getSnapshot().ids.length === 0;
    };
    /**
     * @param {?} id
     * @return {?}
     */
    QueryEntity.prototype._byId = /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        var _this = this;
        return this.select(function (state) { return _this.getEntity(id); });
    };
    /**
     * @param {?} options
     * @return {?}
     */
    QueryEntity.prototype.sortByOptions = /**
     * @param {?} options
     * @return {?}
     */
    function (options) {
        options.sortBy = options.sortBy || (this.config && ((/** @type {?} */ (this.config.sortBy))));
        options.sortByOrder = options.sortByOrder || (this.config && this.config.sortByOrder);
    };
    /**
     * @return {?}
     */
    QueryEntity.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.memoized = null;
    };
    return QueryEntity;
}(Query));
/**
 *  An abstraction for querying the entities from the store
 * @template S, E, ActiveEntity
 */
export { QueryEntity };
if (false) {
    /** @type {?} */
    QueryEntity.prototype.store;
    /** @type {?} */
    QueryEntity.prototype.memoized;
    /**
     * Use only for internal plugins like Pagination - don't use this property *
     * @type {?}
     */
    QueryEntity.prototype.__store__;
}
/**
 * @template E, S
 * @param {?} state
 * @param {?} options
 * @return {?}
 */
function toArray(state, options) {
    /** @type {?} */
    var arr = [];
    var ids = state.ids, entities = state.entities;
    var filterBy = options.filterBy, limitTo = options.limitTo, sortBy = options.sortBy, sortByOrder = options.sortByOrder;
    var _loop_1 = function (i) {
        /** @type {?} */
        var id = ids[i];
        if (!entityExists(id, entities)) {
            return "continue";
        }
        if (!filterBy) {
            arr.push(entities[id]);
            return "continue";
        }
        if (Array.isArray(filterBy)) {
            /** @type {?} */
            var allPass = filterBy.every(function (fn) { return fn(entities[id], i); });
            if (allPass) {
                arr.push(entities[id]);
            }
        }
        else {
            if (filterBy(entities[id], i)) {
                arr.push(entities[id]);
            }
        }
    };
    for (var i = 0; i < ids.length; i++) {
        _loop_1(i);
    }
    if (sortBy) {
        /** @type {?} */
        var _sortBy_1 = isFunction(sortBy) ? sortBy : compareValues(sortBy, sortByOrder);
        arr = arr.sort(function (a, b) { return _sortBy_1(a, b, state); });
    }
    /** @type {?} */
    var length = Math.min(limitTo || arr.length, arr.length);
    return length === arr.length ? arr : arr.slice(0, length);
}
/**
 * @template E
 * @param {?} ids
 * @param {?} entities
 * @param {?} options
 * @param {?=} get
 * @return {?}
 */
function toMap(ids, entities, options, get) {
    if (get === void 0) { get = false; }
    /** @type {?} */
    var map = {};
    var filterBy = options.filterBy, limitTo = options.limitTo;
    if (get && !filterBy && !limitTo) {
        return entities;
    }
    /** @type {?} */
    var length = Math.min(limitTo || ids.length, ids.length);
    if (filterBy && isUndefined(limitTo) === false) {
        /** @type {?} */
        var count = 0;
        var _loop_2 = function (i, length_1) {
            if (count === limitTo)
                return "break";
            /** @type {?} */
            var id = ids[i];
            if (!entityExists(id, entities)) {
                return "continue";
            }
            if (Array.isArray(filterBy)) {
                /** @type {?} */
                var allPass = filterBy.every(function (fn) { return fn(entities[id], i); });
                if (allPass) {
                    map[id] = entities[id];
                    count++;
                }
            }
            else {
                if (filterBy(entities[id], i)) {
                    map[id] = entities[id];
                    count++;
                }
            }
        };
        for (var i = 0, length_1 = ids.length; i < length_1; i++) {
            var state_1 = _loop_2(i, length_1);
            if (state_1 === "break")
                break;
        }
    }
    else {
        var _loop_3 = function (i) {
            /** @type {?} */
            var id = ids[i];
            if (!entityExists(id, entities)) {
                return "continue";
            }
            if (!filterBy) {
                map[id] = entities[id];
                return "continue";
            }
            if (Array.isArray(filterBy)) {
                /** @type {?} */
                var allPass = filterBy.every(function (fn) { return fn(entities[id], i); });
                if (allPass) {
                    map[id] = entities[id];
                }
            }
            else {
                if (filterBy(entities[id], i)) {
                    map[id] = entities[id];
                }
            }
        };
        for (var i = 0; i < length; i++) {
            _loop_3(i);
        }
    }
    return map;
}
//# sourceMappingURL=data:application/json;base64,