/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { _crud } from '../internal/crud';
import { AkitaImmutabilityError, assertActive } from '../internal/error';
import { __globalState } from '../internal/global-state';
import { coerceArray, entityExists, isFunction, isNil, isObject, toBoolean } from '../internal/utils';
import { isDev, Store } from './store';
/**
 * The Root Store that every sub store needs to inherit and
 * invoke `super` with the initial state.
 * @template S, E, ActiveEntity
 */
var /**
 * The Root Store that every sub store needs to inherit and
 * invoke `super` with the initial state.
 * @template S, E, ActiveEntity
 */
EntityStore = /** @class */ (function (_super) {
    tslib_1.__extends(EntityStore, _super);
    /**
     *
     * Initiate the store with the state
     */
    function EntityStore(initialState, options) {
        if (initialState === void 0) { initialState = {}; }
        if (options === void 0) { options = {}; }
        return _super.call(this, tslib_1.__assign({}, getInitialEntitiesState(), initialState), options) || this;
    }
    Object.defineProperty(EntityStore.prototype, "entities", {
        get: /**
         * @return {?}
         */
        function () {
            return this._value().entities;
        },
        enumerable: true,
        configurable: true
    });
    /**
     *
     * Replace current collection with provided collection
     *
     * @example
     * this.store.set([Entity, Entity]);
     * this.store.set({1: Entity, 2: Entity});
     * this.store.set([{id: 1}, {id: 2}], { entityClass: Product });
     *
     */
    /**
     *
     * Replace current collection with provided collection
     *
     * \@example
     * this.store.set([Entity, Entity]);
     * this.store.set({1: Entity, 2: Entity});
     * this.store.set([{id: 1}, {id: 2}], { entityClass: Product });
     *
     * @param {?} entities
     * @param {?=} options
     * @return {?}
     */
    EntityStore.prototype.set = /**
     *
     * Replace current collection with provided collection
     *
     * \@example
     * this.store.set([Entity, Entity]);
     * this.store.set({1: Entity, 2: Entity});
     * this.store.set([{id: 1}, {id: 2}], { entityClass: Product });
     *
     * @param {?} entities
     * @param {?=} options
     * @return {?}
     */
    function (entities, options) {
        var _this = this;
        if (options === void 0) { options = {}; }
        isDev() && __globalState.setAction({ type: 'Set Entities' });
        this.setState(function (state) { return _crud._set(state, isNil(entities) ? [] : entities, options.entityClass, _this.idKey); });
        this.setDirty();
    };
    /**
     * Create or replace an entity in the store.
     *
     * @example
     * this.store.createOrReplace(3, Entity);
     *
     */
    /**
     * Create or replace an entity in the store.
     *
     * \@example
     * this.store.createOrReplace(3, Entity);
     *
     * @param {?} id
     * @param {?} entity
     * @return {?}
     */
    EntityStore.prototype.createOrReplace = /**
     * Create or replace an entity in the store.
     *
     * \@example
     * this.store.createOrReplace(3, Entity);
     *
     * @param {?} id
     * @param {?} entity
     * @return {?}
     */
    function (id, entity) {
        if (!entityExists(id, this._value().entities)) {
            this.addWhenNotExists(id, entity);
        }
        else {
            isDev() && __globalState.setAction({ type: 'Create or Replace Entity', entityId: [id] });
            this.setState(function (state) { return _crud._replaceEntity(state, id, entity); });
        }
    };
    /**
     *
     * Insert or Update
     */
    /**
     *
     * Insert or Update
     * @param {?} id
     * @param {?} entityOrFn
     * @return {?}
     */
    EntityStore.prototype.upsert = /**
     *
     * Insert or Update
     * @param {?} id
     * @param {?} entityOrFn
     * @return {?}
     */
    function (id, entityOrFn) {
        if (!entityExists(id, this._value().entities)) {
            /** @type {?} */
            var resolve = isFunction(entityOrFn) ? ((/** @type {?} */ (entityOrFn)))({}) : entityOrFn;
            this.addWhenNotExists(id, resolve);
        }
        else {
            this.update(id, (/** @type {?} */ (entityOrFn)));
        }
    };
    /**
     * Add an entity or entities to the store.
     *
     * @example
     * this.store.add([Entity, Entity]);
     * this.store.add(Entity);
     * this.store.add(Entity, { prepend: true });
     */
    /**
     * Add an entity or entities to the store.
     *
     * \@example
     * this.store.add([Entity, Entity]);
     * this.store.add(Entity);
     * this.store.add(Entity, { prepend: true });
     * @param {?} entities
     * @param {?=} options
     * @return {?}
     */
    EntityStore.prototype.add = /**
     * Add an entity or entities to the store.
     *
     * \@example
     * this.store.add([Entity, Entity]);
     * this.store.add(Entity);
     * this.store.add(Entity, { prepend: true });
     * @param {?} entities
     * @param {?=} options
     * @return {?}
     */
    function (entities, options) {
        var _this = this;
        /** @type {?} */
        var toArray = coerceArray(entities);
        if (toArray.length === 0)
            return;
        /**
         * If we pass entities that already exist, we should ignore them
         * @type {?}
         */
        var allExists = toArray.every(function (entity) { return _this._value().ids.indexOf(entity[_this.idKey]) > -1; });
        if (allExists)
            return;
        isDev() && __globalState.setAction({ type: 'Add Entity' });
        this.setState(function (state) { return _crud._add(state, toArray, _this.idKey, options); });
    };
    /**
     * @param {?} idsOrFn
     * @param {?=} newStateOrFn
     * @return {?}
     */
    EntityStore.prototype.update = /**
     * @param {?} idsOrFn
     * @param {?=} newStateOrFn
     * @return {?}
     */
    function (idsOrFn, newStateOrFn) {
        var _this = this;
        /** @type {?} */
        var ids = [];
        /** @type {?} */
        var storeIds = this._value().ids;
        if (isFunction(idsOrFn)) {
            for (var i = 0, len = storeIds.length; i < len; i++) {
                /** @type {?} */
                var id = storeIds[i];
                /** @type {?} */
                var entity = this._value().entities[id];
                if (entity && ((/** @type {?} */ (idsOrFn)))(entity)) {
                    ids.push(id);
                }
            }
        }
        else {
            ids = toBoolean(idsOrFn) ? coerceArray(idsOrFn) : storeIds;
        }
        if (ids.length === 0)
            return;
        isDev() && __globalState.setAction({ type: 'Update Entity', entityId: ids });
        this.setState(function (state) {
            return _crud._update(state, ids, newStateOrFn, _this.idKey);
        });
    };
    /**
     * An alias to update all.
     */
    /**
     * An alias to update all.
     * @param {?} state
     * @return {?}
     */
    EntityStore.prototype.updateAll = /**
     * An alias to update all.
     * @param {?} state
     * @return {?}
     */
    function (state) {
        if (this._value().ids.length === 0)
            return;
        this.update(null, state);
    };
    /**
     * Update the root state (data which is external to the entities).
     *
     * @example
     * this.store.updateRoot({
     *   metadata: 'new metadata
     * });
     *
     *  this.store.updateRoot(state => {
     *    return {
     *      metadata: {
     *        ...state.metadata,
     *        key: 'new value'
     *      }
     *    }
     *  });
     */
    /**
     * Update the root state (data which is external to the entities).
     *
     * \@example
     * this.store.updateRoot({
     *   metadata: 'new metadata
     * });
     *
     *  this.store.updateRoot(state => {
     *    return {
     *      metadata: {
     *        ...state.metadata,
     *        key: 'new value'
     *      }
     *    }
     *  });
     * @param {?} newStateFn
     * @param {?=} action
     * @return {?}
     */
    EntityStore.prototype.updateRoot = /**
     * Update the root state (data which is external to the entities).
     *
     * \@example
     * this.store.updateRoot({
     *   metadata: 'new metadata
     * });
     *
     *  this.store.updateRoot(state => {
     *    return {
     *      metadata: {
     *        ...state.metadata,
     *        key: 'new value'
     *      }
     *    }
     *  });
     * @param {?} newStateFn
     * @param {?=} action
     * @return {?}
     */
    function (newStateFn, action) {
        /** @type {?} */
        var newState = isFunction(newStateFn) ? newStateFn(this._value()) : newStateFn;
        if (newState === this._value()) {
            throw new AkitaImmutabilityError(this.storeName);
        }
        isDev() && __globalState.setAction(action || { type: 'Update Root' });
        this.setState(function (state) {
            return tslib_1.__assign({}, ((/** @type {?} */ (state))), ((/** @type {?} */ (newState))));
        });
    };
    /**
     * @param {?=} idsOrFn
     * @return {?}
     */
    EntityStore.prototype.remove = /**
     * @param {?=} idsOrFn
     * @return {?}
     */
    function (idsOrFn) {
        /** @type {?} */
        var storeIds = this._value().ids;
        if (storeIds.length === 0)
            return;
        /** @type {?} */
        var idPassed = toBoolean(idsOrFn);
        if (!idPassed)
            this.setPristine();
        /** @type {?} */
        var ids = [];
        if (isFunction(idsOrFn)) {
            for (var i = 0, len = storeIds.length; i < len; i++) {
                /** @type {?} */
                var id = storeIds[i];
                /** @type {?} */
                var entity = this._value().entities[id];
                if (entity && idsOrFn(entity)) {
                    ids.push(id);
                }
            }
        }
        else {
            ids = idPassed ? coerceArray(idsOrFn) : null;
        }
        if (ids && ids.length === 0)
            return;
        isDev() && __globalState.setAction({ type: 'Remove Entity', entityId: ids });
        this.setState(function (state) {
            return _crud._remove(state, ids);
        });
    };
    /**
     *
     * Update the active entity.
     *
     * @example
     * this.store.updateActive(active => {
     *   return {
     *     config: {
     *      ..active.config,
     *      date
     *     }
     *   }
     * })
     */
    /**
     *
     * Update the active entity.
     *
     * \@example
     * this.store.updateActive(active => {
     *   return {
     *     config: {
     *      ..active.config,
     *      date
     *     }
     *   }
     * })
     * @param {?} newStateFn
     * @return {?}
     */
    EntityStore.prototype.updateActive = /**
     *
     * Update the active entity.
     *
     * \@example
     * this.store.updateActive(active => {
     *   return {
     *     config: {
     *      ..active.config,
     *      date
     *     }
     *   }
     * })
     * @param {?} newStateFn
     * @return {?}
     */
    function (newStateFn) {
        var _this = this;
        assertActive(this._value());
        isDev() && __globalState.setAction({ type: 'Update Active Entity', entityId: this._value().active });
        this.setState(function (state) {
            /** @type {?} */
            var activeId = (/** @type {?} */ (state.active));
            /** @type {?} */
            var newState = isFunction(newStateFn) ? newStateFn(state.entities[activeId]) : newStateFn;
            if (newState === state) {
                throw new AkitaImmutabilityError(_this.storeName);
            }
            return _crud._update(state, [activeId], newState, _this.idKey);
        });
    };
    /**
     * Set the given entity as active.
     */
    /**
     * Set the given entity as active.
     * @param {?} idOrOptions
     * @return {?}
     */
    EntityStore.prototype.setActive = /**
     * Set the given entity as active.
     * @param {?} idOrOptions
     * @return {?}
     */
    function (idOrOptions) {
        /** @type {?} */
        var activeId;
        if (isObject(idOrOptions)) {
            if (isNil(this._value().active))
                return;
            ((/** @type {?} */ (idOrOptions))) = Object.assign({ wrap: true }, idOrOptions);
            /** @type {?} */
            var ids = this._value().ids;
            /** @type {?} */
            var currentIdIndex = ids.indexOf(this._value().active);
            if (((/** @type {?} */ (idOrOptions))).prev) {
                /** @type {?} */
                var isFirst = currentIdIndex === 0;
                if (isFirst && !((/** @type {?} */ (idOrOptions))).wrap)
                    return;
                activeId = isFirst ? ids[ids.length - 1] : ((/** @type {?} */ (ids[currentIdIndex - 1])));
            }
            else if (((/** @type {?} */ (idOrOptions))).next) {
                /** @type {?} */
                var isLast = ids.length === currentIdIndex + 1;
                if (isLast && !((/** @type {?} */ (idOrOptions))).wrap)
                    return;
                activeId = isLast ? ids[0] : ((/** @type {?} */ (ids[currentIdIndex + 1])));
            }
        }
        else {
            if (idOrOptions === this._value().active)
                return;
            activeId = (/** @type {?} */ (idOrOptions));
        }
        isDev() && __globalState.setAction({ type: 'Set Active Entity', entityId: activeId });
        this.setState(function (state) {
            return tslib_1.__assign({}, ((/** @type {?} */ (state))), { active: activeId });
        });
    };
    /**
     * @param {?} id
     * @param {?} entity
     * @return {?}
     */
    EntityStore.prototype.addWhenNotExists = /**
     * @param {?} id
     * @param {?} entity
     * @return {?}
     */
    function (id, entity) {
        if (!entity[this.idKey]) {
            entity[this.idKey] = id;
        }
        this.add(entity);
    };
    return EntityStore;
}(Store));
/**
 * The Root Store that every sub store needs to inherit and
 * invoke `super` with the initial state.
 * @template S, E, ActiveEntity
 */
export { EntityStore };
/** @type {?} */
export var getInitialEntitiesState = function () {
    return ((/** @type {?} */ ({
        entities: {},
        ids: [],
        loading: true,
        error: null
    })));
};
/** @type {?} */
export var getInitialActiveState = function () {
    return ((/** @type {?} */ ({
        active: null
    })));
};
//# sourceMappingURL=data:application/json;base64,