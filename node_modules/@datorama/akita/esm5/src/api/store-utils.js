/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { isNumber } from '../internal/utils';
import { __stores__ } from './store';
import { applyTransaction } from './transaction';
/**
 * \@example
 *
 * this.peopleStore.update(id, person => ({
 *   guests: increment(person.guests)
 * }));
 * @param {?} value
 * @param {?=} params
 * @return {?}
 */
export function increment(value, params) {
    if (params === void 0) { params = { maxValue: undefined }; }
    if (isNumber(value) === false)
        return;
    if (params.maxValue && value === params.maxValue)
        return value;
    return value + 1;
}
/**
 * \@example
 *
 * this.peopleStore.update(id, person => ({
 *   guests: decrement(person.guests)
 * }));
 * @param {?} value
 * @param {?=} params
 * @return {?}
 */
export function decrement(value, params) {
    if (params === void 0) { params = { allowNegative: false }; }
    if (isNumber(value) === false)
        return;
    if (params.allowNegative === false && value === 0) {
        return value;
    }
    return value - 1;
}
/**
 * Generate random guid
 * @return {?}
 */
export function guid() {
    return 'xxxxxx4xyx'.replace(/[xy]/g, function (c) {
        /** @type {?} */
        var r = (Math.random() * 16) | 0;
        /** @type {?} */
        var v = c == 'x' ? r : (r & 0x3) | 0x8;
        return v.toString(16);
    });
}
/**
 * @record
 */
export function ResetStoresParams() { }
if (false) {
    /**
     *  By default the whole state is resetted, use this param to exclude stores that you don't want to reset.
     * @type {?}
     */
    ResetStoresParams.prototype.exclude;
}
/**
 *
 * @param {?=} options
 * @return {?}
 */
export function resetStores(options) {
    /** @type {?} */
    var defaults = {
        exclude: []
    };
    options = Object.assign({}, defaults, options);
    /** @type {?} */
    var stores = Object.keys(__stores__);
    applyTransaction(function () {
        var e_1, _a;
        try {
            for (var stores_1 = tslib_1.__values(stores), stores_1_1 = stores_1.next(); !stores_1_1.done; stores_1_1 = stores_1.next()) {
                var store = stores_1_1.value;
                /** @type {?} */
                var s = __stores__[store];
                if (!options.exclude) {
                    s.reset();
                }
                else {
                    if (options.exclude.indexOf(s.storeName) === -1) {
                        s.reset();
                    }
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (stores_1_1 && !stores_1_1.done && (_a = stores_1.return)) _a.call(stores_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RvcmUtdXRpbHMuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZGF0b3JhbWEvYWtpdGEvIiwic291cmNlcyI6WyJzcmMvYXBpL3N0b3JlLXV0aWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQzdDLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxTQUFTLENBQUM7QUFDckMsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sZUFBZSxDQUFDOzs7Ozs7Ozs7OztBQVNqRCxNQUFNLFVBQVUsU0FBUyxDQUFDLEtBQWEsRUFBRSxNQUFrRTtJQUFsRSx1QkFBQSxFQUFBLFdBQTZDLFFBQVEsRUFBRSxTQUFTLEVBQUU7SUFDekcsSUFBSSxRQUFRLENBQUMsS0FBSyxDQUFDLEtBQUssS0FBSztRQUFFLE9BQU87SUFDdEMsSUFBSSxNQUFNLENBQUMsUUFBUSxJQUFJLEtBQUssS0FBSyxNQUFNLENBQUMsUUFBUTtRQUFFLE9BQU8sS0FBSyxDQUFDO0lBQy9ELE9BQU8sS0FBSyxHQUFHLENBQUMsQ0FBQztBQUNuQixDQUFDOzs7Ozs7Ozs7OztBQVNELE1BQU0sVUFBVSxTQUFTLENBQUMsS0FBSyxFQUFFLE1BQTZEO0lBQTdELHVCQUFBLEVBQUEsV0FBdUMsYUFBYSxFQUFFLEtBQUssRUFBRTtJQUM1RixJQUFJLFFBQVEsQ0FBQyxLQUFLLENBQUMsS0FBSyxLQUFLO1FBQUUsT0FBTztJQUN0QyxJQUFJLE1BQU0sQ0FBQyxhQUFhLEtBQUssS0FBSyxJQUFJLEtBQUssS0FBSyxDQUFDLEVBQUU7UUFDakQsT0FBTyxLQUFLLENBQUM7S0FDZDtJQUNELE9BQU8sS0FBSyxHQUFHLENBQUMsQ0FBQztBQUNuQixDQUFDOzs7OztBQUtELE1BQU0sVUFBVSxJQUFJO0lBQ2xCLE9BQU8sWUFBWSxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsVUFBQSxDQUFDOztZQUM5QixDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEdBQUcsRUFBRSxDQUFDLEdBQUcsQ0FBQzs7WUFDaEMsQ0FBQyxHQUFHLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRztRQUNwQyxPQUFPLENBQUMsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDeEIsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDOzs7O0FBRUQsdUNBS0M7Ozs7OztJQURDLG9DQUFrQjs7Ozs7OztBQU9wQixNQUFNLFVBQVUsV0FBVyxDQUFDLE9BQW9DOztRQUN4RCxRQUFRLEdBQXNCO1FBQ2xDLE9BQU8sRUFBRSxFQUFFO0tBQ1o7SUFFRCxPQUFPLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsUUFBUSxFQUFFLE9BQU8sQ0FBQyxDQUFDOztRQUN6QyxNQUFNLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUM7SUFFdEMsZ0JBQWdCLENBQUM7OztZQUNmLEtBQW9CLElBQUEsV0FBQSxpQkFBQSxNQUFNLENBQUEsOEJBQUEsa0RBQUU7Z0JBQXZCLElBQU0sS0FBSyxtQkFBQTs7b0JBQ1IsQ0FBQyxHQUFHLFVBQVUsQ0FBQyxLQUFLLENBQUM7Z0JBQzNCLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFO29CQUNwQixDQUFDLENBQUMsS0FBSyxFQUFFLENBQUM7aUJBQ1g7cUJBQU07b0JBQ0wsSUFBSSxPQUFPLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUU7d0JBQy9DLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQztxQkFDWDtpQkFDRjthQUNGOzs7Ozs7Ozs7SUFDSCxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpc051bWJlciB9IGZyb20gJy4uL2ludGVybmFsL3V0aWxzJztcbmltcG9ydCB7IF9fc3RvcmVzX18gfSBmcm9tICcuL3N0b3JlJztcbmltcG9ydCB7IGFwcGx5VHJhbnNhY3Rpb24gfSBmcm9tICcuL3RyYW5zYWN0aW9uJztcblxuLyoqXG4gKiBAZXhhbXBsZVxuICpcbiAqIHRoaXMucGVvcGxlU3RvcmUudXBkYXRlKGlkLCBwZXJzb24gPT4gKHtcbiAqICAgZ3Vlc3RzOiBpbmNyZW1lbnQocGVyc29uLmd1ZXN0cylcbiAqIH0pKTtcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGluY3JlbWVudCh2YWx1ZTogbnVtYmVyLCBwYXJhbXM6IHsgbWF4VmFsdWU6IG51bWJlciB8IHVuZGVmaW5lZCB9ID0geyBtYXhWYWx1ZTogdW5kZWZpbmVkIH0pIHtcbiAgaWYgKGlzTnVtYmVyKHZhbHVlKSA9PT0gZmFsc2UpIHJldHVybjtcbiAgaWYgKHBhcmFtcy5tYXhWYWx1ZSAmJiB2YWx1ZSA9PT0gcGFyYW1zLm1heFZhbHVlKSByZXR1cm4gdmFsdWU7XG4gIHJldHVybiB2YWx1ZSArIDE7XG59XG5cbi8qKlxuICogQGV4YW1wbGVcbiAqXG4gKiB0aGlzLnBlb3BsZVN0b3JlLnVwZGF0ZShpZCwgcGVyc29uID0+ICh7XG4gKiAgIGd1ZXN0czogZGVjcmVtZW50KHBlcnNvbi5ndWVzdHMpXG4gKiB9KSk7XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkZWNyZW1lbnQodmFsdWUsIHBhcmFtczogeyBhbGxvd05lZ2F0aXZlOiBib29sZWFuIH0gPSB7IGFsbG93TmVnYXRpdmU6IGZhbHNlIH0pIHtcbiAgaWYgKGlzTnVtYmVyKHZhbHVlKSA9PT0gZmFsc2UpIHJldHVybjtcbiAgaWYgKHBhcmFtcy5hbGxvd05lZ2F0aXZlID09PSBmYWxzZSAmJiB2YWx1ZSA9PT0gMCkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICByZXR1cm4gdmFsdWUgLSAxO1xufVxuXG4vKipcbiAqIEdlbmVyYXRlIHJhbmRvbSBndWlkXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBndWlkKCkge1xuICByZXR1cm4gJ3h4eHh4eDR4eXgnLnJlcGxhY2UoL1t4eV0vZywgYyA9PiB7XG4gICAgY29uc3QgciA9IChNYXRoLnJhbmRvbSgpICogMTYpIHwgMCxcbiAgICAgIHYgPSBjID09ICd4JyA/IHIgOiAociAmIDB4MykgfCAweDg7XG4gICAgcmV0dXJuIHYudG9TdHJpbmcoMTYpO1xuICB9KTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBSZXNldFN0b3Jlc1BhcmFtcyB7XG4gIC8qKlxuICAgKiAgQnkgZGVmYXVsdCB0aGUgd2hvbGUgc3RhdGUgaXMgcmVzZXR0ZWQsIHVzZSB0aGlzIHBhcmFtIHRvIGV4Y2x1ZGUgc3RvcmVzIHRoYXQgeW91IGRvbid0IHdhbnQgdG8gcmVzZXQuXG4gICAqL1xuICBleGNsdWRlOiBzdHJpbmdbXTtcbn1cblxuLyoqXG4gKlxuICogQHBhcmFtIG9wdGlvbnNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlc2V0U3RvcmVzKG9wdGlvbnM/OiBQYXJ0aWFsPFJlc2V0U3RvcmVzUGFyYW1zPikge1xuICBjb25zdCBkZWZhdWx0czogUmVzZXRTdG9yZXNQYXJhbXMgPSB7XG4gICAgZXhjbHVkZTogW11cbiAgfTtcblxuICBvcHRpb25zID0gT2JqZWN0LmFzc2lnbih7fSwgZGVmYXVsdHMsIG9wdGlvbnMpO1xuICBjb25zdCBzdG9yZXMgPSBPYmplY3Qua2V5cyhfX3N0b3Jlc19fKTtcblxuICBhcHBseVRyYW5zYWN0aW9uKCgpID0+IHtcbiAgICBmb3IgKGNvbnN0IHN0b3JlIG9mIHN0b3Jlcykge1xuICAgICAgY29uc3QgcyA9IF9fc3RvcmVzX19bc3RvcmVdO1xuICAgICAgaWYgKCFvcHRpb25zLmV4Y2x1ZGUpIHtcbiAgICAgICAgcy5yZXNldCgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKG9wdGlvbnMuZXhjbHVkZS5pbmRleE9mKHMuc3RvcmVOYW1lKSA9PT0gLTEpIHtcbiAgICAgICAgICBzLnJlc2V0KCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0pO1xufVxuIl19