/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { BehaviorSubject, ReplaySubject } from 'rxjs';
import { distinctUntilChanged, map } from 'rxjs/operators';
import { AkitaError, AkitaImmutabilityError, assertDecorator } from '../internal/error';
import { commit, isTransactionInProcess } from '../internal/transaction.internal';
import { isFunction, isPlainObject } from '../internal/utils';
import { deepFreeze } from '../internal/deep-freeze';
import { configKey } from './store-config';
import { __globalState } from '../internal/global-state';
import { getAkitaConfig } from './config';
/** @type {?} */
var __DEV__ = true;
/** @type {?} */
var isNotBrowser = typeof window === 'undefined';
/** @type {?} */
export var __stores__ = {};
/** @enum {number} */
var Actions = {
    NEW_STORE: 0,
    DELETE_STORE: 1,
    NEW_STATE: 2,
};
export { Actions };
/** @type {?} */
export var rootDispatcher = new ReplaySubject();
/**
 * @param {?} storeName
 * @param {?=} initialState
 * @return {?}
 */
function nextState(storeName, initialState) {
    if (initialState === void 0) { initialState = false; }
    return {
        type: 2 /* NEW_STATE */,
        payload: {
            name: storeName,
            initialState: initialState
        }
    };
}
/**
 * Enable production mode to disable objectFreeze
 * @return {?}
 */
export function enableAkitaProdMode() {
    __DEV__ = false;
}
/**
 * @return {?}
 */
export function isDev() {
    return __DEV__;
}
/**
 * The Root Store that every sub store needs to inherit and
 * invoke `super` with the initial state.
 * @template S
 */
var /**
 * The Root Store that every sub store needs to inherit and
 * invoke `super` with the initial state.
 * @template S
 */
Store = /** @class */ (function () {
    /**
     *
     * Initial the store with the state
     */
    function Store(initialState, options) {
        if (options === void 0) { options = {}; }
        this.options = options;
        /**
         * Whether we are inside transaction *
         */
        this.inTransaction = false;
        this._isPristine = true;
        this.destroy = this.ngOnDestroy;
        __globalState.setAction({ type: '@@INIT' });
        __stores__[this.storeName] = this;
        this.setState(function () { return initialState; });
        rootDispatcher.next({
            type: 0 /* NEW_STORE */,
            payload: { store: this }
        });
        isDev() && assertDecorator(this.storeName, this.constructor.name);
        if (this.isRessetable()) {
            this._initialState = initialState;
        }
    }
    /**
     * @param {?=} loading
     * @return {?}
     */
    Store.prototype.setLoading = /**
     * @param {?=} loading
     * @return {?}
     */
    function (loading) {
        if (loading === void 0) { loading = false; }
        if (loading !== ((/** @type {?} */ (this._value()))).loading) {
            isDev() && __globalState.setAction({ type: 'Set Loading' });
            this.setState(function (s) { return ((/** @type {?} */ (tslib_1.__assign({}, ((/** @type {?} */ (s))), { loading: loading })))); });
        }
    };
    /**
     * Update the store's error state.
     */
    /**
     * Update the store's error state.
     * @template T
     * @param {?} error
     * @return {?}
     */
    Store.prototype.setError = /**
     * Update the store's error state.
     * @template T
     * @param {?} error
     * @return {?}
     */
    function (error) {
        if (error !== ((/** @type {?} */ (this._value()))).error) {
            isDev() && __globalState.setAction({ type: 'Set Error' });
            this.setState(function (s) { return ((/** @type {?} */ (tslib_1.__assign({}, ((/** @type {?} */ (s))), { error: error })))); });
        }
    };
    /**
     * Select a slice from the store
     *
     * @example
     * this.store.select(state => state.entities)
     *
     */
    /**
     * Select a slice from the store
     *
     * \@example
     * this.store.select(state => state.entities)
     *
     * @template R
     * @param {?} project
     * @return {?}
     */
    Store.prototype._select = /**
     * Select a slice from the store
     *
     * \@example
     * this.store.select(state => state.entities)
     *
     * @template R
     * @param {?} project
     * @return {?}
     */
    function (project) {
        return this.store$.pipe(map(project), distinctUntilChanged());
    };
    /**
     * @return {?}
     */
    Store.prototype._value = /**
     * @return {?}
     */
    function () {
        return this.storeValue;
    };
    Object.defineProperty(Store.prototype, "config", {
        get: /**
         * @return {?}
         */
        function () {
            return this.constructor[configKey];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Store.prototype, "storeName", {
        get: /**
         * @return {?}
         */
        function () {
            return this.options.storeName || (this.config && this.config['storeName']);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Store.prototype, "idKey", {
        get: /**
         * @return {?}
         */
        function () {
            /**
             * backward compatibility
             * @type {?}
             */
            var newIdKey = this.config && this.config.idKey;
            if (!newIdKey) {
                return this.options.idKey || 'id';
            }
            return newIdKey;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Store.prototype, "isPristine", {
        get: /**
         * @return {?}
         */
        function () {
            return this._isPristine;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * `setState()` is the only way to update a store; It receives a callback function,
     * which gets the current state, and returns a new immutable state,
     * which will be the new value of the store.
     */
    /**
     * `setState()` is the only way to update a store; It receives a callback function,
     * which gets the current state, and returns a new immutable state,
     * which will be the new value of the store.
     * @param {?} newStateFn
     * @param {?=} _rootDispatcher
     * @return {?}
     */
    Store.prototype.setState = /**
     * `setState()` is the only way to update a store; It receives a callback function,
     * which gets the current state, and returns a new immutable state,
     * which will be the new value of the store.
     * @param {?} newStateFn
     * @param {?=} _rootDispatcher
     * @return {?}
     */
    function (newStateFn, _rootDispatcher) {
        if (_rootDispatcher === void 0) { _rootDispatcher = true; }
        /** @type {?} */
        var prevState = this._value();
        this.storeValue = __DEV__ ? deepFreeze(newStateFn(this._value())) : newStateFn(this._value());
        if (prevState === this.storeValue) {
            throw new AkitaImmutabilityError(this.storeName);
        }
        if (!this.store) {
            this.store = new BehaviorSubject(this.storeValue);
            rootDispatcher.next(nextState(this.storeName, true));
            return;
        }
        if (isTransactionInProcess()) {
            this.handleTransaction();
            return;
        }
        this.dispatch(this.storeValue, _rootDispatcher);
    };
    /**
     * Resets the store to it's initial state and set the store to a pristine state.
     */
    /**
     * Resets the store to it's initial state and set the store to a pristine state.
     * @return {?}
     */
    Store.prototype.reset = /**
     * Resets the store to it's initial state and set the store to a pristine state.
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.isRessetable()) {
            __globalState.setAction({ type: 'Reset Store' });
            this.setState(function () { return Object.assign({}, _this._initialState); });
            this.setPristine();
        }
        else {
            throw new AkitaError("You need to enable the reset functionality");
        }
    };
    /**
     * @param {?} newStateOrId
     * @param {?=} newState
     * @return {?}
     */
    Store.prototype.update = /**
     * @param {?} newStateOrId
     * @param {?=} newState
     * @return {?}
     */
    function (newStateOrId, newState) {
        __globalState.setAction({ type: 'Update Store' });
        this.setState(function (state) {
            /** @type {?} */
            var value = isFunction(newStateOrId) ? newStateOrId(state) : newStateOrId;
            /** @type {?} */
            var merged = Object.assign({}, state, value);
            return isPlainObject(state) ? merged : new ((/** @type {?} */ (state))).constructor(merged);
        });
        this.setDirty();
    };
    /**
     * Sets the store to a pristine state.
     */
    /**
     * Sets the store to a pristine state.
     * @return {?}
     */
    Store.prototype.setPristine = /**
     * Sets the store to a pristine state.
     * @return {?}
     */
    function () {
        this._isPristine = true;
    };
    /**
     * Sets the store to a dirty state, indicating that it is not pristine.
     */
    /**
     * Sets the store to a dirty state, indicating that it is not pristine.
     * @return {?}
     */
    Store.prototype.setDirty = /**
     * Sets the store to a dirty state, indicating that it is not pristine.
     * @return {?}
     */
    function () {
        this._isPristine = false;
    };
    /**
     * @param {?} state
     * @param {?=} _rootDispatcher
     * @return {?}
     */
    Store.prototype.dispatch = /**
     * @param {?} state
     * @param {?=} _rootDispatcher
     * @return {?}
     */
    function (state, _rootDispatcher) {
        if (_rootDispatcher === void 0) { _rootDispatcher = true; }
        this.store.next(state);
        if (_rootDispatcher) {
            rootDispatcher.next(nextState(this.storeName));
            isDev() && __globalState.setAction({ type: 'Set State' });
        }
    };
    Object.defineProperty(Store.prototype, "store$", {
        get: /**
         * @return {?}
         */
        function () {
            return this.store.asObservable();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * When the transaction ends dispatch the final value once
     */
    /**
     * When the transaction ends dispatch the final value once
     * @return {?}
     */
    Store.prototype.watchTransaction = /**
     * When the transaction ends dispatch the final value once
     * @return {?}
     */
    function () {
        var _this = this;
        commit().subscribe(function () {
            _this.inTransaction = false;
            if (isDev() && !__globalState.skipTransactionMsg) {
                __globalState.setAction({ type: '@Transaction' });
            }
            _this.dispatch(_this._value());
            __globalState.currentT = [];
            __globalState.skipTransactionMsg = false;
        });
    };
    /**
     * @return {?}
     */
    Store.prototype.isRessetable = /**
     * @return {?}
     */
    function () {
        return this.config.resettable || getAkitaConfig().resettable;
    };
    /**
     * Listen to the transaction stream
     */
    /**
     * Listen to the transaction stream
     * @return {?}
     */
    Store.prototype.handleTransaction = /**
     * Listen to the transaction stream
     * @return {?}
     */
    function () {
        if (!this.inTransaction) {
            this.watchTransaction();
            this.inTransaction = true;
        }
    };
    /**
     * @return {?}
     */
    Store.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (isNotBrowser)
            return;
        if (!((/** @type {?} */ (window))).hmrEnabled && this === __stores__[this.storeName]) {
            delete __stores__[this.storeName];
            rootDispatcher.next({
                type: 1 /* DELETE_STORE */,
                payload: { storeName: this.storeName }
            });
        }
    };
    return Store;
}());
/**
 * The Root Store that every sub store needs to inherit and
 * invoke `super` with the initial state.
 * @template S
 */
export { Store };
if (false) {
    /**
     * Manage the store with BehaviorSubject
     * @type {?}
     */
    Store.prototype.store;
    /**
     * The current state value
     * @type {?}
     */
    Store.prototype.storeValue;
    /**
     * Whether we are inside transaction *
     * @type {?}
     */
    Store.prototype.inTransaction;
    /** @type {?} */
    Store.prototype._isPristine;
    /** @type {?} */
    Store.prototype._initialState;
    /** @type {?} */
    Store.prototype.destroy;
    /** @type {?} */
    Store.prototype.options;
}
//# sourceMappingURL=data:application/json;base64,