/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
import { take } from 'rxjs/operators';
import { queryConfigKey } from './query-config';
/**
 * @template S
 */
var /**
 * @template S
 */
Query = /** @class */ (function () {
    function Query(store) {
        this.store = store;
        this.__store__ = store;
    }
    /**
     * @template R
     * @param {?=} project
     * @return {?}
     */
    Query.prototype.select = /**
     * @template R
     * @param {?=} project
     * @return {?}
     */
    function (project) {
        /** @type {?} */
        var state = project ? project : function (state) { return state; };
        return this.store._select(state);
    };
    /**
     * Select once and complete.
     */
    /**
     * Select once and complete.
     * @template R
     * @param {?} project
     * @return {?}
     */
    Query.prototype.selectOnce = /**
     * Select once and complete.
     * @template R
     * @param {?} project
     * @return {?}
     */
    function (project) {
        return this.select(project).pipe(take(1));
    };
    /**
     * Select the store's loading state.
     */
    /**
     * Select the store's loading state.
     * @return {?}
     */
    Query.prototype.selectLoading = /**
     * Select the store's loading state.
     * @return {?}
     */
    function () {
        return this.select(function (state) { return ((/** @type {?} */ (state))).loading; });
    };
    /**
     * Select the store's error state.
     */
    /**
     * Select the store's error state.
     * @return {?}
     */
    Query.prototype.selectError = /**
     * Select the store's error state.
     * @return {?}
     */
    function () {
        return this.select(function (state) { return ((/** @type {?} */ (state))).error; });
    };
    /**
     * Get the raw value of the store.
     */
    /**
     * Get the raw value of the store.
     * @return {?}
     */
    Query.prototype.getSnapshot = /**
     * Get the raw value of the store.
     * @return {?}
     */
    function () {
        return this.store._value();
    };
    Object.defineProperty(Query.prototype, "isPristine", {
        /**
         *  Returns whether the state of the store is pristine (the set() method hasn't been explicitly called
         *  since the store creation, or the last time setPristine()was called).
         */
        get: /**
         *  Returns whether the state of the store is pristine (the set() method hasn't been explicitly called
         *  since the store creation, or the last time setPristine()was called).
         * @return {?}
         */
        function () {
            return this.store.isPristine;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Query.prototype, "isDirty", {
        /**
         * Returns whether the state of the store is dirty (the set() method
         * or the setDirty() method has been explicitly called since the store creation,
         * or the last time setPristine() was called).
         */
        get: /**
         * Returns whether the state of the store is dirty (the set() method
         * or the setDirty() method has been explicitly called since the store creation,
         * or the last time setPristine() was called).
         * @return {?}
         */
        function () {
            return !this.store.isPristine;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Query.prototype, "config", {
        get: /**
         * @return {?}
         */
        function () {
            return this.constructor[queryConfigKey];
        },
        enumerable: true,
        configurable: true
    });
    return Query;
}());
/**
 * @template S
 */
export { Query };
if (false) {
    /**
     * Use only for internal plugins like Pagination - don't use this property *
     * @type {?}
     */
    Query.prototype.__store__;
    /** @type {?} */
    Query.prototype.store;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicXVlcnkuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZGF0b3JhbWEvYWtpdGEvIiwic291cmNlcyI6WyJzcmMvYXBpL3F1ZXJ5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFFQSxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDdEMsT0FBTyxFQUFFLGNBQWMsRUFBc0IsTUFBTSxnQkFBZ0IsQ0FBQzs7OztBQUVwRTs7OztJQUlFLGVBQXNCLEtBQWU7UUFBZixVQUFLLEdBQUwsS0FBSyxDQUFVO1FBQ25DLElBQUksQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDO0lBQ3pCLENBQUM7Ozs7OztJQVdELHNCQUFNOzs7OztJQUFOLFVBQVUsT0FBeUI7O1lBQzdCLEtBQUssR0FBRyxPQUFPLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsVUFBQSxLQUFLLElBQUksT0FBQSxLQUFLLEVBQUwsQ0FBSztRQUM5QyxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ25DLENBQUM7SUFFRDs7T0FFRzs7Ozs7OztJQUNILDBCQUFVOzs7Ozs7SUFBVixVQUFjLE9BQXdCO1FBQ3BDLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDNUMsQ0FBQztJQUVEOztPQUVHOzs7OztJQUNILDZCQUFhOzs7O0lBQWI7UUFDRSxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsVUFBQSxLQUFLLElBQUksT0FBQSxDQUFDLG1CQUFBLEtBQUssRUFBNEIsQ0FBQyxDQUFDLE9BQU8sRUFBM0MsQ0FBMkMsQ0FBQyxDQUFDO0lBQzNFLENBQUM7SUFFRDs7T0FFRzs7Ozs7SUFDSCwyQkFBVzs7OztJQUFYO1FBQ0UsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLFVBQUEsS0FBSyxJQUFJLE9BQUEsQ0FBQyxtQkFBQSxLQUFLLEVBQXNCLENBQUMsQ0FBQyxLQUFLLEVBQW5DLENBQW1DLENBQUMsQ0FBQztJQUNuRSxDQUFDO0lBRUQ7O09BRUc7Ozs7O0lBQ0gsMkJBQVc7Ozs7SUFBWDtRQUNFLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQztJQUM3QixDQUFDO0lBTUQsc0JBQUksNkJBQVU7UUFKZDs7O1dBR0c7Ozs7OztRQUNIO1lBQ0UsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQztRQUMvQixDQUFDOzs7T0FBQTtJQU9ELHNCQUFJLDBCQUFPO1FBTFg7Ozs7V0FJRzs7Ozs7OztRQUNIO1lBQ0UsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDO1FBQ2hDLENBQUM7OztPQUFBO0lBRUQsc0JBQUkseUJBQU07Ozs7UUFBVjtZQUNFLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQyxjQUFjLENBQUMsQ0FBQztRQUMxQyxDQUFDOzs7T0FBQTtJQUNILFlBQUM7QUFBRCxDQUFDLEFBdEVELElBc0VDOzs7Ozs7Ozs7O0lBcEVDLDBCQUFvQjs7SUFFUixzQkFBeUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTdG9yZSB9IGZyb20gJy4vc3RvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgdGFrZSB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IHF1ZXJ5Q29uZmlnS2V5LCBRdWVyeUNvbmZpZ09wdGlvbnMgfSBmcm9tICcuL3F1ZXJ5LWNvbmZpZyc7XG5cbmV4cG9ydCBjbGFzcyBRdWVyeTxTPiB7XG4gIC8qKiBVc2Ugb25seSBmb3IgaW50ZXJuYWwgcGx1Z2lucyBsaWtlIFBhZ2luYXRpb24gLSBkb24ndCB1c2UgdGhpcyBwcm9wZXJ0eSAqKi9cbiAgX19zdG9yZV9fOiBTdG9yZTxTPjtcblxuICBjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgc3RvcmU6IFN0b3JlPFM+KSB7XG4gICAgdGhpcy5fX3N0b3JlX18gPSBzdG9yZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZWxlY3QgYSBzbGljZSBmcm9tIHRoZSBzdG9yZS5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogdGhpcy5xdWVyeS5zZWxlY3QoKVxuICAgKiB0aGlzLnF1ZXJ5LnNlbGVjdChzdGF0ZSA9PiBzdGF0ZS5lbnRpdGllcylcbiAgICovXG4gIHNlbGVjdDxSPihwcm9qZWN0PzogKHN0b3JlOiBTKSA9PiBSKTogT2JzZXJ2YWJsZTxSPjtcbiAgc2VsZWN0KCk6IE9ic2VydmFibGU8Uz47XG4gIHNlbGVjdDxSPihwcm9qZWN0PzogKHN0b3JlOiBTKSA9PiBSKTogT2JzZXJ2YWJsZTxSIHwgUz4ge1xuICAgIGxldCBzdGF0ZSA9IHByb2plY3QgPyBwcm9qZWN0IDogc3RhdGUgPT4gc3RhdGU7XG4gICAgcmV0dXJuIHRoaXMuc3RvcmUuX3NlbGVjdChzdGF0ZSk7XG4gIH1cblxuICAvKipcbiAgICogU2VsZWN0IG9uY2UgYW5kIGNvbXBsZXRlLlxuICAgKi9cbiAgc2VsZWN0T25jZTxSPihwcm9qZWN0OiAoc3RvcmU6IFMpID0+IFIpOiBPYnNlcnZhYmxlPFI+IHtcbiAgICByZXR1cm4gdGhpcy5zZWxlY3QocHJvamVjdCkucGlwZSh0YWtlKDEpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZWxlY3QgdGhlIHN0b3JlJ3MgbG9hZGluZyBzdGF0ZS5cbiAgICovXG4gIHNlbGVjdExvYWRpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMuc2VsZWN0KHN0YXRlID0+IChzdGF0ZSBhcyBTICYgeyBsb2FkaW5nOiBib29sZWFuIH0pLmxvYWRpbmcpO1xuICB9XG5cbiAgLyoqXG4gICAqIFNlbGVjdCB0aGUgc3RvcmUncyBlcnJvciBzdGF0ZS5cbiAgICovXG4gIHNlbGVjdEVycm9yKCkge1xuICAgIHJldHVybiB0aGlzLnNlbGVjdChzdGF0ZSA9PiAoc3RhdGUgYXMgUyAmIHsgZXJyb3I6IGFueSB9KS5lcnJvcik7XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSByYXcgdmFsdWUgb2YgdGhlIHN0b3JlLlxuICAgKi9cbiAgZ2V0U25hcHNob3QoKTogUyB7XG4gICAgcmV0dXJuIHRoaXMuc3RvcmUuX3ZhbHVlKCk7XG4gIH1cblxuICAvKipcbiAgICogIFJldHVybnMgd2hldGhlciB0aGUgc3RhdGUgb2YgdGhlIHN0b3JlIGlzIHByaXN0aW5lICh0aGUgc2V0KCkgbWV0aG9kIGhhc24ndCBiZWVuIGV4cGxpY2l0bHkgY2FsbGVkXG4gICAqICBzaW5jZSB0aGUgc3RvcmUgY3JlYXRpb24sIG9yIHRoZSBsYXN0IHRpbWUgc2V0UHJpc3RpbmUoKXdhcyBjYWxsZWQpLlxuICAgKi9cbiAgZ2V0IGlzUHJpc3RpbmUoKSB7XG4gICAgcmV0dXJuIHRoaXMuc3RvcmUuaXNQcmlzdGluZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHdoZXRoZXIgdGhlIHN0YXRlIG9mIHRoZSBzdG9yZSBpcyBkaXJ0eSAodGhlIHNldCgpIG1ldGhvZFxuICAgKiBvciB0aGUgc2V0RGlydHkoKSBtZXRob2QgaGFzIGJlZW4gZXhwbGljaXRseSBjYWxsZWQgc2luY2UgdGhlIHN0b3JlIGNyZWF0aW9uLFxuICAgKiBvciB0aGUgbGFzdCB0aW1lIHNldFByaXN0aW5lKCkgd2FzIGNhbGxlZCkuXG4gICAqL1xuICBnZXQgaXNEaXJ0eSgpIHtcbiAgICByZXR1cm4gIXRoaXMuc3RvcmUuaXNQcmlzdGluZTtcbiAgfVxuXG4gIGdldCBjb25maWcoKTogUXVlcnlDb25maWdPcHRpb25zIHtcbiAgICByZXR1cm4gdGhpcy5jb25zdHJ1Y3RvcltxdWVyeUNvbmZpZ0tleV07XG4gIH1cbn1cbiJdfQ==