/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
import { endBatch, startBatch } from '../internal/transaction.internal';
/**
 *  A logical transaction.
 *  Use this transaction to optimize the dispatch of all the stores.
 *  The following code will update the store, BUT  emits only once
 *
 * \@example
 *  applyTransaction(() => {
 *    this.todosStore.add(new Todo(1, title));
 *    this.todosStore.add(new Todo(2, title));
 *  });
 *
 * @template T
 * @param {?} action
 * @param {?=} thisArg
 * @return {?}
 */
export function applyTransaction(action, thisArg) {
    if (thisArg === void 0) { thisArg = undefined; }
    startBatch();
    try {
        return action.apply(thisArg);
    }
    finally {
        endBatch();
    }
}
/**
 *  A logical transaction.
 *  Use this transaction to optimize the dispatch of all the stores.
 *
 *  The following code will update the store, BUT  emits only once.
 *
 * \@example
 * \@transaction
 *  addTodos() {
 *    this.todosStore.add(new Todo(1, title));
 *    this.todosStore.add(new Todo(2, title));
 *  }
 *
 *
 * @return {?}
 */
export function transaction() {
    return function (target, propertyKey, descriptor) {
        /** @type {?} */
        var originalMethod = descriptor.value;
        descriptor.value = function () {
            var _this = this;
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            return applyTransaction(function () {
                return originalMethod.apply(_this, args);
            }, this);
        };
        return descriptor;
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhbnNhY3Rpb24uanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZGF0b3JhbWEvYWtpdGEvIiwic291cmNlcyI6WyJzcmMvYXBpL3RyYW5zYWN0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsUUFBUSxFQUFFLFVBQVUsRUFBRSxNQUFNLGtDQUFrQyxDQUFDOzs7Ozs7Ozs7Ozs7Ozs7OztBQWN4RSxNQUFNLFVBQVUsZ0JBQWdCLENBQUksTUFBZSxFQUFFLE9BQW1CO0lBQW5CLHdCQUFBLEVBQUEsbUJBQW1CO0lBQ3RFLFVBQVUsRUFBRSxDQUFDO0lBQ2IsSUFBSTtRQUNGLE9BQU8sTUFBTSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztLQUM5QjtZQUFTO1FBQ1IsUUFBUSxFQUFFLENBQUM7S0FDWjtBQUNILENBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBaUJELE1BQU0sVUFBVSxXQUFXO0lBQ3pCLE9BQU8sVUFBUyxNQUFXLEVBQUUsV0FBbUIsRUFBRSxVQUE4Qjs7WUFDeEUsY0FBYyxHQUFHLFVBQVUsQ0FBQyxLQUFLO1FBRXZDLFVBQVUsQ0FBQyxLQUFLLEdBQUc7WUFBQSxpQkFJbEI7WUFKMkIsY0FBTztpQkFBUCxVQUFPLEVBQVAscUJBQU8sRUFBUCxJQUFPO2dCQUFQLHlCQUFPOztZQUNqQyxPQUFPLGdCQUFnQixDQUFDO2dCQUN0QixPQUFPLGNBQWMsQ0FBQyxLQUFLLENBQUMsS0FBSSxFQUFFLElBQUksQ0FBQyxDQUFDO1lBQzFDLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUNYLENBQUMsQ0FBQztRQUVGLE9BQU8sVUFBVSxDQUFDO0lBQ3BCLENBQUMsQ0FBQztBQUNKLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBlbmRCYXRjaCwgc3RhcnRCYXRjaCB9IGZyb20gJy4uL2ludGVybmFsL3RyYW5zYWN0aW9uLmludGVybmFsJztcblxuLyoqXG4gKiAgQSBsb2dpY2FsIHRyYW5zYWN0aW9uLlxuICogIFVzZSB0aGlzIHRyYW5zYWN0aW9uIHRvIG9wdGltaXplIHRoZSBkaXNwYXRjaCBvZiBhbGwgdGhlIHN0b3Jlcy5cbiAqICBUaGUgZm9sbG93aW5nIGNvZGUgd2lsbCB1cGRhdGUgdGhlIHN0b3JlLCBCVVQgIGVtaXRzIG9ubHkgb25jZVxuICpcbiAqICBAZXhhbXBsZVxuICogIGFwcGx5VHJhbnNhY3Rpb24oKCkgPT4ge1xuICogICAgdGhpcy50b2Rvc1N0b3JlLmFkZChuZXcgVG9kbygxLCB0aXRsZSkpO1xuICogICAgdGhpcy50b2Rvc1N0b3JlLmFkZChuZXcgVG9kbygyLCB0aXRsZSkpO1xuICogIH0pO1xuICpcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFwcGx5VHJhbnNhY3Rpb248VD4oYWN0aW9uOiAoKSA9PiBULCB0aGlzQXJnID0gdW5kZWZpbmVkKTogVCB7XG4gIHN0YXJ0QmF0Y2goKTtcbiAgdHJ5IHtcbiAgICByZXR1cm4gYWN0aW9uLmFwcGx5KHRoaXNBcmcpO1xuICB9IGZpbmFsbHkge1xuICAgIGVuZEJhdGNoKCk7XG4gIH1cbn1cblxuLyoqXG4gKiAgQSBsb2dpY2FsIHRyYW5zYWN0aW9uLlxuICogIFVzZSB0aGlzIHRyYW5zYWN0aW9uIHRvIG9wdGltaXplIHRoZSBkaXNwYXRjaCBvZiBhbGwgdGhlIHN0b3Jlcy5cbiAqXG4gKiAgVGhlIGZvbGxvd2luZyBjb2RlIHdpbGwgdXBkYXRlIHRoZSBzdG9yZSwgQlVUICBlbWl0cyBvbmx5IG9uY2UuXG4gKlxuICogIEBleGFtcGxlXG4gKiAgQHRyYW5zYWN0aW9uXG4gKiAgYWRkVG9kb3MoKSB7XG4gKiAgICB0aGlzLnRvZG9zU3RvcmUuYWRkKG5ldyBUb2RvKDEsIHRpdGxlKSk7XG4gKiAgICB0aGlzLnRvZG9zU3RvcmUuYWRkKG5ldyBUb2RvKDIsIHRpdGxlKSk7XG4gKiAgfVxuICpcbiAqXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0cmFuc2FjdGlvbigpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHRhcmdldDogYW55LCBwcm9wZXJ0eUtleTogc3RyaW5nLCBkZXNjcmlwdG9yOiBQcm9wZXJ0eURlc2NyaXB0b3IpIHtcbiAgICBjb25zdCBvcmlnaW5hbE1ldGhvZCA9IGRlc2NyaXB0b3IudmFsdWU7XG5cbiAgICBkZXNjcmlwdG9yLnZhbHVlID0gZnVuY3Rpb24oLi4uYXJncykge1xuICAgICAgcmV0dXJuIGFwcGx5VHJhbnNhY3Rpb24oKCkgPT4ge1xuICAgICAgICByZXR1cm4gb3JpZ2luYWxNZXRob2QuYXBwbHkodGhpcywgYXJncyk7XG4gICAgICB9LCB0aGlzKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIGRlc2NyaXB0b3I7XG4gIH07XG59XG4iXX0=