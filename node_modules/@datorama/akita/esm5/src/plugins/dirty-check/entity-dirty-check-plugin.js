/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { dirtyCheckDefaultParams, DirtyCheckPlugin, getNestedPath } from './dirty-check-plugin';
import { EntityCollectionPlugin } from '../entity-collection-plugin';
import { map, skip } from 'rxjs/operators';
/**
 * @template E, P
 */
var /**
 * @template E, P
 */
EntityDirtyCheckPlugin = /** @class */ (function (_super) {
    tslib_1.__extends(EntityDirtyCheckPlugin, _super);
    function EntityDirtyCheckPlugin(query, params) {
        if (params === void 0) { params = {}; }
        var _this = _super.call(this, query, params.entityIds) || this;
        _this.query = query;
        _this.params = params;
        /**
         * @deprecated Use someDirty$ instead
         */
        _this.isSomeDirty$ = _this.query.select(function (state) { return state.entities; }).pipe(map(function (entities) { return _this.checkSomeDirty(entities); }));
        _this.someDirty$ = _this.isSomeDirty$;
        _this.someDirty = _this.isSomeDirty;
        _this.params = tslib_1.__assign({}, dirtyCheckDefaultParams, params);
        _this.activate();
        _this.selectIds()
            .pipe(skip(1))
            .subscribe(function (ids) {
            _this.rebase(ids, { afterAdd: function (plugin) { return plugin.setHead(); } });
        });
        return _this;
    }
    /**
     * @template THIS
     * @this {THIS}
     * @param {?=} ids
     * @return {THIS}
     */
    EntityDirtyCheckPlugin.prototype.setHead = /**
     * @template THIS
     * @this {THIS}
     * @param {?=} ids
     * @return {THIS}
     */
    function (ids) {
        (/** @type {?} */ (this)).forEachId(ids, function (e) { return e.setHead(); });
        return (/** @type {?} */ (this));
    };
    /**
     * @param {?} id
     * @return {?}
     */
    EntityDirtyCheckPlugin.prototype.hasHead = /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        if (this.entities.has(id)) {
            /** @type {?} */
            var entity = this.getEntity(id);
            return entity.hasHead();
        }
        return false;
    };
    /**
     * @param {?=} ids
     * @param {?=} params
     * @return {?}
     */
    EntityDirtyCheckPlugin.prototype.reset = /**
     * @param {?=} ids
     * @param {?=} params
     * @return {?}
     */
    function (ids, params) {
        if (params === void 0) { params = {}; }
        this.forEachId(ids, function (e) { return e.reset(params); });
    };
    /**
     * @param {?} id
     * @param {?=} asObservable
     * @return {?}
     */
    EntityDirtyCheckPlugin.prototype.isDirty = /**
     * @param {?} id
     * @param {?=} asObservable
     * @return {?}
     */
    function (id, asObservable) {
        if (asObservable === void 0) { asObservable = true; }
        if (this.entities.has(id)) {
            /** @type {?} */
            var entity = this.getEntity(id);
            return asObservable ? entity.isDirty$ : entity.isDirty();
        }
        return false;
    };
    /**
     * @deprecated Use someDirty() instead
     */
    /**
     * @deprecated Use someDirty() instead
     * @return {?}
     */
    EntityDirtyCheckPlugin.prototype.isSomeDirty = /**
     * @deprecated Use someDirty() instead
     * @return {?}
     */
    function () {
        /** @type {?} */
        var entities = this.query.getAll({ asObject: true });
        return this.checkSomeDirty(entities);
    };
    /**
     * @param {?} id
     * @param {?} path
     * @return {?}
     */
    EntityDirtyCheckPlugin.prototype.isPathDirty = /**
     * @param {?} id
     * @param {?} path
     * @return {?}
     */
    function (id, path) {
        if (this.entities.has(id)) {
            /** @type {?} */
            var head = ((/** @type {?} */ (this.getEntity(id)))).getHead();
            /** @type {?} */
            var current = this.query.getEntity(id);
            /** @type {?} */
            var currentPathValue = getNestedPath(current, path);
            /** @type {?} */
            var headPathValue = getNestedPath(head, path);
            return this.params.comparator(currentPathValue, headPathValue);
        }
        return null;
    };
    /**
     * @param {?=} ids
     * @return {?}
     */
    EntityDirtyCheckPlugin.prototype.destroy = /**
     * @param {?=} ids
     * @return {?}
     */
    function (ids) {
        this.forEachId(ids, function (e) { return e.destroy(); });
    };
    /**
     * @param {?} id
     * @return {?}
     */
    EntityDirtyCheckPlugin.prototype.instantiatePlugin = /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        return (/** @type {?} */ (new DirtyCheckPlugin(this.query, this.params, id)));
    };
    /**
     * @param {?} entities
     * @return {?}
     */
    EntityDirtyCheckPlugin.prototype.checkSomeDirty = /**
     * @param {?} entities
     * @return {?}
     */
    function (entities) {
        var e_1, _a;
        /** @type {?} */
        var entitiesIds = this.resolvedIds();
        try {
            for (var entitiesIds_1 = tslib_1.__values(entitiesIds), entitiesIds_1_1 = entitiesIds_1.next(); !entitiesIds_1_1.done; entitiesIds_1_1 = entitiesIds_1.next()) {
                var id = entitiesIds_1_1.value;
                /** @type {?} */
                var dirty = this.params.comparator(((/** @type {?} */ (this.getEntity(id)))).getHead(), entities[id]);
                if (dirty) {
                    return true;
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (entitiesIds_1_1 && !entitiesIds_1_1.done && (_a = entitiesIds_1.return)) _a.call(entitiesIds_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return false;
    };
    return EntityDirtyCheckPlugin;
}(EntityCollectionPlugin));
/**
 * @template E, P
 */
export { EntityDirtyCheckPlugin };
if (false) {
    /**
     * @deprecated Use someDirty$ instead
     * @type {?}
     */
    EntityDirtyCheckPlugin.prototype.isSomeDirty$;
    /** @type {?} */
    EntityDirtyCheckPlugin.prototype.someDirty$;
    /** @type {?} */
    EntityDirtyCheckPlugin.prototype.someDirty;
    /** @type {?} */
    EntityDirtyCheckPlugin.prototype.query;
    /** @type {?} */
    EntityDirtyCheckPlugin.prototype.params;
}
//# sourceMappingURL=data:application/json;base64,