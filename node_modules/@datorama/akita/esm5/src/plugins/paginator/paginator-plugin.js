/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { delay, map, switchMap, take } from 'rxjs/operators';
import { BehaviorSubject, from } from 'rxjs';
import { isObservable, isUndefined } from '../../internal/utils';
import { AkitaPlugin } from '../plugin';
import { applyTransaction } from '../../api/transaction';
import { action, applyAction } from '../../internal/action';
/**
 * @record
 * @template E
 */
export function PaginationResponse() { }
if (false) {
    /** @type {?} */
    PaginationResponse.prototype.currentPage;
    /** @type {?} */
    PaginationResponse.prototype.perPage;
    /** @type {?} */
    PaginationResponse.prototype.lastPage;
    /** @type {?} */
    PaginationResponse.prototype.data;
    /** @type {?|undefined} */
    PaginationResponse.prototype.total;
    /** @type {?|undefined} */
    PaginationResponse.prototype.from;
    /** @type {?|undefined} */
    PaginationResponse.prototype.to;
    /** @type {?|undefined} */
    PaginationResponse.prototype.pageControls;
}
/** @type {?} */
var paginatorDefaults = {
    pagesControls: false,
    range: false,
    startWith: 1,
    cacheTimeout: undefined
};
/**
 * @template E
 */
var PaginatorPlugin = /** @class */ (function (_super) {
    tslib_1.__extends(PaginatorPlugin, _super);
    function PaginatorPlugin(query, config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, query, {
            resetFn: function () {
                _this.initial = false;
                _this.destroy({ clearCache: true, currentPage: 1 });
            }
        }) || this;
        _this.query = query;
        _this.config = config;
        /**
         * Save current filters, sorting, etc. in cache
         */
        _this.metadata = new Map();
        _this.pages = new Map();
        _this.pagination = {
            currentPage: 1,
            perPage: 0,
            total: 0,
            lastPage: 0,
            data: []
        };
        /**
         * When the user navigates to a different page and return
         * we don't want to call `clearCache` on first time.
         */
        _this.initial = false;
        /**
         * Proxy to the query loading
         */
        _this.isLoading$ = _this.query.selectLoading().pipe(delay(0));
        _this.config = Object.assign(paginatorDefaults, config);
        var _a = _this.config, startWith = _a.startWith, cacheTimeout = _a.cacheTimeout;
        _this.page = new BehaviorSubject(startWith);
        if (isObservable(cacheTimeout)) {
            _this.clearCacheSubscription = cacheTimeout.subscribe(function (_) { return _this.clearCache(); });
        }
        return _this;
    }
    Object.defineProperty(PaginatorPlugin.prototype, "pageChanges", {
        /**
         * Listen to page changes
         */
        get: /**
         * Listen to page changes
         * @return {?}
         */
        function () {
            return this.page.asObservable();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PaginatorPlugin.prototype, "currentPage", {
        /**
         * Get the current page number
         */
        get: /**
         * Get the current page number
         * @return {?}
         */
        function () {
            return this.pagination.currentPage;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PaginatorPlugin.prototype, "isFirst", {
        /**
         * Check if current page is the first one
         */
        get: /**
         * Check if current page is the first one
         * @return {?}
         */
        function () {
            return this.currentPage === 1;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PaginatorPlugin.prototype, "isLast", {
        /**
         * Check if current page is the last one
         */
        get: /**
         * Check if current page is the last one
         * @return {?}
         */
        function () {
            return this.currentPage === this.pagination.lastPage;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Whether to generate an array of pages for *ngFor
     * [1, 2, 3, 4]
     */
    /**
     * Whether to generate an array of pages for *ngFor
     * [1, 2, 3, 4]
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    PaginatorPlugin.prototype.withControls = /**
     * Whether to generate an array of pages for *ngFor
     * [1, 2, 3, 4]
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    function () {
        (/** @type {?} */ (this)).config.pagesControls = true;
        return (/** @type {?} */ (this));
    };
    /**
     * Whether to generate the `from` and `to` keys
     * [1, 2, 3, 4]
     */
    /**
     * Whether to generate the `from` and `to` keys
     * [1, 2, 3, 4]
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    PaginatorPlugin.prototype.withRange = /**
     * Whether to generate the `from` and `to` keys
     * [1, 2, 3, 4]
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    function () {
        (/** @type {?} */ (this)).config.range = true;
        return (/** @type {?} */ (this));
    };
    /**
     * Set the loading state
     */
    /**
     * Set the loading state
     * @param {?=} value
     * @return {?}
     */
    PaginatorPlugin.prototype.setLoading = /**
     * Set the loading state
     * @param {?=} value
     * @return {?}
     */
    function (value) {
        if (value === void 0) { value = true; }
        this.getStore().setLoading(value);
    };
    /**
     * Update the pagination object and add the page
     */
    /**
     * Update the pagination object and add the page
     * @param {?} response
     * @return {?}
     */
    PaginatorPlugin.prototype.update = /**
     * Update the pagination object and add the page
     * @param {?} response
     * @return {?}
     */
    function (response) {
        this.pagination = response;
        this.addPage(response.data);
    };
    /**
     *
     * Set the ids and add the page to store
     */
    /**
     *
     * Set the ids and add the page to store
     * @param {?} data
     * @return {?}
     */
    PaginatorPlugin.prototype.addPage = /**
     *
     * Set the ids and add the page to store
     * @param {?} data
     * @return {?}
     */
    function (data) {
        var _this = this;
        this.pages.set(this.currentPage, { ids: data.map(function (entity) { return entity[_this.getStore().idKey]; }) });
        this.getStore().add(data);
    };
    /**
     * Clear the cache.
     */
    /**
     * Clear the cache.
     * @return {?}
     */
    PaginatorPlugin.prototype.clearCache = /**
     * Clear the cache.
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this.initial) {
            applyAction(function () {
                _this.getStore().remove();
            }, { type: '@Pagination - Clear Cache' });
            this.pages = new Map();
            this.metadata = new Map();
        }
        this.initial = false;
    };
    /**
     * @param {?} page
     * @return {?}
     */
    PaginatorPlugin.prototype.clearPage = /**
     * @param {?} page
     * @return {?}
     */
    function (page) {
        this.pages.delete(page);
    };
    /**
     * Clear the cache timeout and optionally the pages
     */
    /**
     * Clear the cache timeout and optionally the pages
     * @param {?=} __0
     * @return {?}
     */
    PaginatorPlugin.prototype.destroy = /**
     * Clear the cache timeout and optionally the pages
     * @param {?=} __0
     * @return {?}
     */
    function (_a) {
        var _b = _a === void 0 ? {} : _a, clearCache = _b.clearCache, currentPage = _b.currentPage;
        if (this.clearCacheSubscription) {
            this.clearCacheSubscription.unsubscribe();
        }
        if (clearCache) {
            this.clearCache();
        }
        if (!isUndefined(currentPage)) {
            this.setPage(currentPage);
        }
        this.initial = true;
    };
    /**
     * Whether the provided page is active
     */
    /**
     * Whether the provided page is active
     * @param {?} page
     * @return {?}
     */
    PaginatorPlugin.prototype.isPageActive = /**
     * Whether the provided page is active
     * @param {?} page
     * @return {?}
     */
    function (page) {
        return this.currentPage === page;
    };
    /**
     * Set the current page
     */
    /**
     * Set the current page
     * @param {?} page
     * @return {?}
     */
    PaginatorPlugin.prototype.setPage = /**
     * Set the current page
     * @param {?} page
     * @return {?}
     */
    function (page) {
        if (page !== this.currentPage || !this.hasPage(page)) {
            this.page.next((this.pagination.currentPage = page));
        }
    };
    /**
     * Increment current page
     */
    /**
     * Increment current page
     * @return {?}
     */
    PaginatorPlugin.prototype.nextPage = /**
     * Increment current page
     * @return {?}
     */
    function () {
        if (this.currentPage !== this.pagination.lastPage) {
            this.setPage(this.pagination.currentPage + 1);
        }
    };
    /**
     * Decrement current page
     */
    /**
     * Decrement current page
     * @return {?}
     */
    PaginatorPlugin.prototype.prevPage = /**
     * Decrement current page
     * @return {?}
     */
    function () {
        if (this.pagination.currentPage > 1) {
            this.setPage(this.pagination.currentPage - 1);
        }
    };
    /**
     * Set current page to last
     */
    /**
     * Set current page to last
     * @return {?}
     */
    PaginatorPlugin.prototype.setLastPage = /**
     * Set current page to last
     * @return {?}
     */
    function () {
        this.setPage(this.pagination.lastPage);
    };
    /**
     * Set current page to first
     */
    /**
     * Set current page to first
     * @return {?}
     */
    PaginatorPlugin.prototype.setFirstPage = /**
     * Set current page to first
     * @return {?}
     */
    function () {
        this.setPage(1);
    };
    /**
     * Check if page exists in cache
     */
    /**
     * Check if page exists in cache
     * @param {?} page
     * @return {?}
     */
    PaginatorPlugin.prototype.hasPage = /**
     * Check if page exists in cache
     * @param {?} page
     * @return {?}
     */
    function (page) {
        return this.pages.has(page);
    };
    /**
     * Get the current page if it's in cache, otherwise invoke the request
     */
    /**
     * Get the current page if it's in cache, otherwise invoke the request
     * @param {?} req
     * @return {?}
     */
    PaginatorPlugin.prototype.getPage = /**
     * Get the current page if it's in cache, otherwise invoke the request
     * @param {?} req
     * @return {?}
     */
    function (req) {
        var _this = this;
        /** @type {?} */
        var page = this.pagination.currentPage;
        if (this.hasPage(page)) {
            return this.selectPage(page);
        }
        else {
            this.setLoading(true);
            return from(req()).pipe(switchMap(function (config) {
                applyTransaction(function () {
                    _this.setLoading(false);
                    _this.update(config);
                });
                return _this.selectPage(page);
            }));
        }
    };
    /**
     * @return {?}
     */
    PaginatorPlugin.prototype.getQuery = /**
     * @return {?}
     */
    function () {
        return this.query;
    };
    /**
     * @return {?}
     */
    PaginatorPlugin.prototype.getFrom = /**
     * @return {?}
     */
    function () {
        if (this.isFirst) {
            return 1;
        }
        return (this.currentPage - 1) * this.pagination.perPage + 1;
    };
    /**
     * @return {?}
     */
    PaginatorPlugin.prototype.getTo = /**
     * @return {?}
     */
    function () {
        return this.currentPage * this.pagination.perPage;
    };
    /**
     * Select the page
     */
    /**
     * Select the page
     * @param {?} page
     * @return {?}
     */
    PaginatorPlugin.prototype.selectPage = /**
     * Select the page
     * @param {?} page
     * @return {?}
     */
    function (page) {
        var _this = this;
        return this.query.selectAll({ asObject: true }).pipe(take(1), map(function (entities) {
            /** @type {?} */
            var response = tslib_1.__assign({}, _this.pagination, { data: _this.pages.get(page).ids.map(function (id) { return entities[id]; }) });
            var _a = _this.config, range = _a.range, pagesControls = _a.pagesControls;
            /** If no total - calc it */
            if (isNaN(_this.pagination.total)) {
                if (response.lastPage === 1) {
                    response.total = response.data ? response.data.length : 0;
                }
                else {
                    response.total = response.perPage * response.lastPage;
                }
                _this.pagination.total = response.total;
            }
            if (range) {
                response.from = _this.getFrom();
                response.to = _this.getTo();
            }
            if (pagesControls) {
                response.pageControls = generatePages(_this.pagination.total, _this.pagination.perPage);
            }
            return response;
        }));
    };
    tslib_1.__decorate([
        action({ type: '@Pagination - New Page' }, true),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], PaginatorPlugin.prototype, "update", null);
    return PaginatorPlugin;
}(AkitaPlugin));
export { PaginatorPlugin };
if (false) {
    /**
     * Save current filters, sorting, etc. in cache
     * @type {?}
     */
    PaginatorPlugin.prototype.metadata;
    /** @type {?} */
    PaginatorPlugin.prototype.page;
    /** @type {?} */
    PaginatorPlugin.prototype.pages;
    /** @type {?} */
    PaginatorPlugin.prototype.clearCacheSubscription;
    /** @type {?} */
    PaginatorPlugin.prototype.pagination;
    /**
     * When the user navigates to a different page and return
     * we don't want to call `clearCache` on first time.
     * @type {?}
     */
    PaginatorPlugin.prototype.initial;
    /**
     * Proxy to the query loading
     * @type {?}
     */
    PaginatorPlugin.prototype.isLoading$;
    /** @type {?} */
    PaginatorPlugin.prototype.query;
    /** @type {?} */
    PaginatorPlugin.prototype.config;
}
/**
 * Generate an array so we can ngFor them to navigate between pages
 * @param {?} total
 * @param {?} perPage
 * @return {?}
 */
function generatePages(total, perPage) {
    /** @type {?} */
    var len = Math.ceil(total / perPage);
    /** @type {?} */
    var arr = [];
    for (var i = 0; i < len; i++) {
        arr.push(i + 1);
    }
    return arr;
}
/**
 * backward compatibility
 * @type {?}
 */
export var Paginator = PaginatorPlugin;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFnaW5hdG9yLXBsdWdpbi5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BkYXRvcmFtYS9ha2l0YS8iLCJzb3VyY2VzIjpbInNyYy9wbHVnaW5zL3BhZ2luYXRvci9wYWdpbmF0b3ItcGx1Z2luLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQ0EsT0FBTyxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzdELE9BQU8sRUFBRSxlQUFlLEVBQUUsSUFBSSxFQUE0QixNQUFNLE1BQU0sQ0FBQztBQUN2RSxPQUFPLEVBQUUsWUFBWSxFQUFFLFdBQVcsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBRWpFLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDeEMsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDekQsT0FBTyxFQUFFLE1BQU0sRUFBRSxXQUFXLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQzs7Ozs7QUFFNUQsd0NBU0M7OztJQVJDLHlDQUFvQjs7SUFDcEIscUNBQWdCOztJQUNoQixzQ0FBaUI7O0lBQ2pCLGtDQUFVOztJQUNWLG1DQUFlOztJQUNmLGtDQUFjOztJQUNkLGdDQUFZOztJQUNaLDBDQUF3Qjs7O0lBVXBCLGlCQUFpQixHQUFvQjtJQUN6QyxhQUFhLEVBQUUsS0FBSztJQUNwQixLQUFLLEVBQUUsS0FBSztJQUNaLFNBQVMsRUFBRSxDQUFDO0lBQ1osWUFBWSxFQUFFLFNBQVM7Q0FDeEI7Ozs7QUFFRDtJQUF3QywyQ0FBYztJQXNCcEQseUJBQXNCLEtBQTBCLEVBQVMsTUFBNEI7UUFBNUIsdUJBQUEsRUFBQSxXQUE0QjtRQUFyRixZQUNFLGtCQUFNLEtBQUssRUFBRTtZQUNYLE9BQU8sRUFBRTtnQkFDUCxLQUFJLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQztnQkFDckIsS0FBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLFVBQVUsRUFB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LE9BQU8sR0FBRyxDQUFDO0FBQ2IsQ0FBQzs7Ozs7QUFHRCxNQUFNLEtBQU8sU0FBUyxHQUFHLGVBQWUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBRdWVyeUVudGl0eSB9IGZyb20gJy4uLy4uL2FwaS9xdWVyeS1lbnRpdHknO1xuaW1wb3J0IHsgZGVsYXksIG1hcCwgc3dpdGNoTWFwLCB0YWtlIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgQmVoYXZpb3JTdWJqZWN0LCBmcm9tLCBPYnNlcnZhYmxlLCBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IGlzT2JzZXJ2YWJsZSwgaXNVbmRlZmluZWQgfSBmcm9tICcuLi8uLi9pbnRlcm5hbC91dGlscyc7XG5pbXBvcnQgeyBJRCB9IGZyb20gJy4uLy4uL2FwaS90eXBlcyc7XG5pbXBvcnQgeyBBa2l0YVBsdWdpbiB9IGZyb20gJy4uL3BsdWdpbic7XG5pbXBvcnQgeyBhcHBseVRyYW5zYWN0aW9uIH0gZnJvbSAnLi4vLi4vYXBpL3RyYW5zYWN0aW9uJztcbmltcG9ydCB7IGFjdGlvbiwgYXBwbHlBY3Rpb24gfSBmcm9tICcuLi8uLi9pbnRlcm5hbC9hY3Rpb24nO1xuXG5leHBvcnQgaW50ZXJmYWNlIFBhZ2luYXRpb25SZXNwb25zZTxFPiB7XG4gIGN1cnJlbnRQYWdlOiBudW1iZXI7XG4gIHBlclBhZ2U6IG51bWJlcjtcbiAgbGFzdFBhZ2U6IG51bWJlcjtcbiAgZGF0YTogRVtdO1xuICB0b3RhbD86IG51bWJlcjtcbiAgZnJvbT86IG51bWJlcjtcbiAgdG8/OiBudW1iZXI7XG4gIHBhZ2VDb250cm9scz86IG51bWJlcltdO1xufVxuXG5leHBvcnQgdHlwZSBQYWdpbmF0b3JDb25maWcgPSB7XG4gIHBhZ2VzQ29udHJvbHM/OiBib29sZWFuO1xuICByYW5nZT86IGJvb2xlYW47XG4gIHN0YXJ0V2l0aD86IG51bWJlcjtcbiAgY2FjaGVUaW1lb3V0PzogT2JzZXJ2YWJsZTxudW1iZXI+O1xufTtcblxuY29uc3QgcGFnaW5hdG9yRGVmYXVsdHM6IFBhZ2luYXRvckNvbmZpZyA9IHtcbiAgcGFnZXNDb250cm9sczogZmFsc2UsXG4gIHJhbmdlOiBmYWxzZSxcbiAgc3RhcnRXaXRoOiAxLFxuICBjYWNoZVRpbWVvdXQ6IHVuZGVmaW5lZFxufTtcblxuZXhwb3J0IGNsYXNzIFBhZ2luYXRvclBsdWdpbjxFPiBleHRlbmRzIEFraXRhUGx1Z2luPEU+IHtcbiAgLyoqIFNhdmUgY3VycmVudCBmaWx0ZXJzLCBzb3J0aW5nLCBldGMuIGluIGNhY2hlICovXG4gIG1ldGFkYXRhID0gbmV3IE1hcCgpO1xuXG4gIHByaXZhdGUgcGFnZTogQmVoYXZpb3JTdWJqZWN0PG51bWJlcj47XG4gIHByaXZhdGUgcGFnZXMgPSBuZXcgTWFwPG51bWJlciwgeyBpZHM6IElEW10gfT4oKTtcbiAgcHJpdmF0ZSByZWFkb25seSBjbGVhckNhY2hlU3Vic2NyaXB0aW9uOiBTdWJzY3JpcHRpb247XG5cbiAgcHJpdmF0ZSBwYWdpbmF0aW9uOiBQYWdpbmF0aW9uUmVzcG9uc2U8RT4gPSB7XG4gICAgY3VycmVudFBhZ2U6IDEsXG4gICAgcGVyUGFnZTogMCxcbiAgICB0b3RhbDogMCxcbiAgICBsYXN0UGFnZTogMCxcbiAgICBkYXRhOiBbXVxuICB9O1xuXG4gIC8qKlxuICAgKiBXaGVuIHRoZSB1c2VyIG5hdmlnYXRlcyB0byBhIGRpZmZlcmVudCBwYWdlIGFuZCByZXR1cm5cbiAgICogd2UgZG9uJ3Qgd2FudCB0byBjYWxsIGBjbGVhckNhY2hlYCBvbiBmaXJzdCB0aW1lLlxuICAgKi9cbiAgcHJpdmF0ZSBpbml0aWFsID0gZmFsc2U7XG5cbiAgY29uc3RydWN0b3IocHJvdGVjdGVkIHF1ZXJ5OiBRdWVyeUVudGl0eTxhbnksIEU+LCBwdWJsaWMgY29uZmlnOiBQYWdpbmF0b3JDb25maWcgPSB7fSkge1xuICAgIHN1cGVyKHF1ZXJ5LCB7XG4gICAgICByZXNldEZuOiAoKSA9PiB7XG4gICAgICAgIHRoaXMuaW5pdGlhbCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmRlc3Ryb3koeyBjbGVhckNhY2hlOiB0cnVlLCBjdXJyZW50UGFnZTogMSB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICB0aGlzLmNvbmZpZyA9IE9iamVjdC5hc3NpZ24ocGFnaW5hdG9yRGVmYXVsdHMsIGNvbmZpZyk7XG4gICAgY29uc3QgeyBzdGFydFdpdGgsIGNhY2hlVGltZW91dCB9ID0gdGhpcy5jb25maWc7XG4gICAgdGhpcy5wYWdlID0gbmV3IEJlaGF2aW9yU3ViamVjdChzdGFydFdpdGgpO1xuICAgIGlmIChpc09ic2VydmFibGUoY2FjaGVUaW1lb3V0KSkge1xuICAgICAgdGhpcy5jbGVhckNhY2hlU3Vic2NyaXB0aW9uID0gY2FjaGVUaW1lb3V0LnN1YnNjcmliZShfID0+IHRoaXMuY2xlYXJDYWNoZSgpKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUHJveHkgdG8gdGhlIHF1ZXJ5IGxvYWRpbmdcbiAgICovXG4gIGlzTG9hZGluZyQgPSB0aGlzLnF1ZXJ5LnNlbGVjdExvYWRpbmcoKS5waXBlKGRlbGF5KDApKTtcblxuICAvKipcbiAgICogTGlzdGVuIHRvIHBhZ2UgY2hhbmdlc1xuICAgKi9cbiAgZ2V0IHBhZ2VDaGFuZ2VzKCkge1xuICAgIHJldHVybiB0aGlzLnBhZ2UuYXNPYnNlcnZhYmxlKCk7XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSBjdXJyZW50IHBhZ2UgbnVtYmVyXG4gICAqL1xuICBnZXQgY3VycmVudFBhZ2UoKSB7XG4gICAgcmV0dXJuIHRoaXMucGFnaW5hdGlvbi5jdXJyZW50UGFnZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVjayBpZiBjdXJyZW50IHBhZ2UgaXMgdGhlIGZpcnN0IG9uZVxuICAgKi9cbiAgZ2V0IGlzRmlyc3QoKSB7XG4gICAgcmV0dXJuIHRoaXMuY3VycmVudFBhZ2UgPT09IDE7XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2sgaWYgY3VycmVudCBwYWdlIGlzIHRoZSBsYXN0IG9uZVxuICAgKi9cbiAgZ2V0IGlzTGFzdCgpIHtcbiAgICByZXR1cm4gdGhpcy5jdXJyZW50UGFnZSA9PT0gdGhpcy5wYWdpbmF0aW9uLmxhc3RQYWdlO1xuICB9XG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgdG8gZ2VuZXJhdGUgYW4gYXJyYXkgb2YgcGFnZXMgZm9yICpuZ0ZvclxuICAgKiBbMSwgMiwgMywgNF1cbiAgICovXG4gIHdpdGhDb250cm9scygpIHtcbiAgICB0aGlzLmNvbmZpZy5wYWdlc0NvbnRyb2xzID0gdHJ1ZTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBXaGV0aGVyIHRvIGdlbmVyYXRlIHRoZSBgZnJvbWAgYW5kIGB0b2Aga2V5c1xuICAgKiBbMSwgMiwgMywgNF1cbiAgICovXG4gIHdpdGhSYW5nZSgpIHtcbiAgICB0aGlzLmNvbmZpZy5yYW5nZSA9IHRydWU7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogU2V0IHRoZSBsb2FkaW5nIHN0YXRlXG4gICAqL1xuICBzZXRMb2FkaW5nKHZhbHVlID0gdHJ1ZSkge1xuICAgIHRoaXMuZ2V0U3RvcmUoKS5zZXRMb2FkaW5nKHZhbHVlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBVcGRhdGUgdGhlIHBhZ2luYXRpb24gb2JqZWN0IGFuZCBhZGQgdGhlIHBhZ2VcbiAgICovXG4gIEBhY3Rpb24oeyB0eXBlOiAnQFBhZ2luYXRpb24gLSBOZXcgUGFnZScgfSwgdHJ1ZSlcbiAgdXBkYXRlKHJlc3BvbnNlOiBQYWdpbmF0aW9uUmVzcG9uc2U8RT4pIHtcbiAgICB0aGlzLnBhZ2luYXRpb24gPSByZXNwb25zZTtcbiAgICB0aGlzLmFkZFBhZ2UocmVzcG9uc2UuZGF0YSk7XG4gIH1cblxuICAvKipcbiAgICpcbiAgICogU2V0IHRoZSBpZHMgYW5kIGFkZCB0aGUgcGFnZSB0byBzdG9yZVxuICAgKi9cbiAgYWRkUGFnZShkYXRhOiBFW10pIHtcbiAgICB0aGlzLnBhZ2VzLnNldCh0aGlzLmN1cnJlbnRQYWdlLCB7IGlkczogZGF0YS5tYXAoZW50aXR5ID0+IGVudGl0eVt0aGlzLmdldFN0b3JlKCkuaWRLZXldKSB9KTtcbiAgICB0aGlzLmdldFN0b3JlKCkuYWRkKGRhdGEpO1xuICB9XG5cbiAgLyoqXG4gICAqIENsZWFyIHRoZSBjYWNoZS5cbiAgICovXG4gIGNsZWFyQ2FjaGUoKSB7XG4gICAgaWYgKCF0aGlzLmluaXRpYWwpIHtcbiAgICAgIGFwcGx5QWN0aW9uKFxuICAgICAgICAoKSA9PiB7XG4gICAgICAgICAgdGhpcy5nZXRTdG9yZSgpLnJlbW92ZSgpO1xuICAgICAgICB9LFxuICAgICAgICB7IHR5cGU6ICdAUGFnaW5hdGlvbiAtIENsZWFyIENhY2hlJyB9XG4gICAgICApO1xuICAgICAgdGhpcy5wYWdlcyA9IG5ldyBNYXAoKTtcbiAgICAgIHRoaXMubWV0YWRhdGEgPSBuZXcgTWFwKCk7XG4gICAgfVxuICAgIHRoaXMuaW5pdGlhbCA9IGZhbHNlO1xuICB9XG5cbiAgY2xlYXJQYWdlKHBhZ2U6IG51bWJlcikge1xuICAgIHRoaXMucGFnZXMuZGVsZXRlKHBhZ2UpO1xuICB9XG5cbiAgLyoqXG4gICAqIENsZWFyIHRoZSBjYWNoZSB0aW1lb3V0IGFuZCBvcHRpb25hbGx5IHRoZSBwYWdlc1xuICAgKi9cbiAgZGVzdHJveSh7IGNsZWFyQ2FjaGUsIGN1cnJlbnRQYWdlIH06IHsgY2xlYXJDYWNoZT86IGJvb2xlYW47IGN1cnJlbnRQYWdlPzogbnVtYmVyIH0gPSB7fSkge1xuICAgIGlmICh0aGlzLmNsZWFyQ2FjaGVTdWJzY3JpcHRpb24pIHtcbiAgICAgIHRoaXMuY2xlYXJDYWNoZVN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgIH1cbiAgICBpZiAoY2xlYXJDYWNoZSkge1xuICAgICAgdGhpcy5jbGVhckNhY2hlKCk7XG4gICAgfVxuICAgIGlmICghaXNVbmRlZmluZWQoY3VycmVudFBhZ2UpKSB7XG4gICAgICB0aGlzLnNldFBhZ2UoY3VycmVudFBhZ2UpO1xuICAgIH1cbiAgICB0aGlzLmluaXRpYWwgPSB0cnVlO1xuICB9XG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgdGhlIHByb3ZpZGVkIHBhZ2UgaXMgYWN0aXZlXG4gICAqL1xuICBpc1BhZ2VBY3RpdmUocGFnZTogbnVtYmVyKSB7XG4gICAgcmV0dXJuIHRoaXMuY3VycmVudFBhZ2UgPT09IHBhZ2U7XG4gIH1cblxuICAvKipcbiAgICogU2V0IHRoZSBjdXJyZW50IHBhZ2VcbiAgICovXG4gIHNldFBhZ2UocGFnZTogbnVtYmVyKSB7XG4gICAgaWYgKHBhZ2UgIT09IHRoaXMuY3VycmVudFBhZ2UgfHwgIXRoaXMuaGFzUGFnZShwYWdlKSkge1xuICAgICAgdGhpcy5wYWdlLm5leHQoKHRoaXMucGFnaW5hdGlvbi5jdXJyZW50UGFnZSA9IHBhZ2UpKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogSW5jcmVtZW50IGN1cnJlbnQgcGFnZVxuICAgKi9cbiAgbmV4dFBhZ2UoKSB7XG4gICAgaWYgKHRoaXMuY3VycmVudFBhZ2UgIT09IHRoaXMucGFnaW5hdGlvbi5sYXN0UGFnZSkge1xuICAgICAgdGhpcy5zZXRQYWdlKHRoaXMucGFnaW5hdGlvbi5jdXJyZW50UGFnZSArIDEpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBEZWNyZW1lbnQgY3VycmVudCBwYWdlXG4gICAqL1xuICBwcmV2UGFnZSgpIHtcbiAgICBpZiAodGhpcy5wYWdpbmF0aW9uLmN1cnJlbnRQYWdlID4gMSkge1xuICAgICAgdGhpcy5zZXRQYWdlKHRoaXMucGFnaW5hdGlvbi5jdXJyZW50UGFnZSAtIDEpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgY3VycmVudCBwYWdlIHRvIGxhc3RcbiAgICovXG4gIHNldExhc3RQYWdlKCkge1xuICAgIHRoaXMuc2V0UGFnZSh0aGlzLnBhZ2luYXRpb24ubGFzdFBhZ2UpO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldCBjdXJyZW50IHBhZ2UgdG8gZmlyc3RcbiAgICovXG4gIHNldEZpcnN0UGFnZSgpIHtcbiAgICB0aGlzLnNldFBhZ2UoMSk7XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2sgaWYgcGFnZSBleGlzdHMgaW4gY2FjaGVcbiAgICovXG4gIGhhc1BhZ2UocGFnZTogbnVtYmVyKSB7XG4gICAgcmV0dXJuIHRoaXMucGFnZXMuaGFzKHBhZ2UpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgY3VycmVudCBwYWdlIGlmIGl0J3MgaW4gY2FjaGUsIG90aGVyd2lzZSBpbnZva2UgdGhlIHJlcXVlc3RcbiAgICovXG4gIGdldFBhZ2UocmVxOiAoKSA9PiBPYnNlcnZhYmxlPFBhZ2luYXRpb25SZXNwb25zZTxFPj4pIHtcbiAgICBjb25zdCBwYWdlID0gdGhpcy5wYWdpbmF0aW9uLmN1cnJlbnRQYWdlO1xuICAgIGlmICh0aGlzLmhhc1BhZ2UocGFnZSkpIHtcbiAgICAgIHJldHVybiB0aGlzLnNlbGVjdFBhZ2UocGFnZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuc2V0TG9hZGluZyh0cnVlKTtcbiAgICAgIHJldHVybiBmcm9tKHJlcSgpKS5waXBlKFxuICAgICAgICBzd2l0Y2hNYXAoKGNvbmZpZzogUGFnaW5hdGlvblJlc3BvbnNlPEU+KSA9PiB7XG4gICAgICAgICAgYXBwbHlUcmFuc2FjdGlvbigoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnNldExvYWRpbmcoZmFsc2UpO1xuICAgICAgICAgICAgdGhpcy51cGRhdGUoY29uZmlnKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICByZXR1cm4gdGhpcy5zZWxlY3RQYWdlKHBhZ2UpO1xuICAgICAgICB9KVxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICBnZXRRdWVyeSgpOiBRdWVyeUVudGl0eTxhbnksIEU+IHtcbiAgICByZXR1cm4gdGhpcy5xdWVyeTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0RnJvbSgpIHtcbiAgICBpZiAodGhpcy5pc0ZpcnN0KSB7XG4gICAgICByZXR1cm4gMTtcbiAgICB9XG4gICAgcmV0dXJuICh0aGlzLmN1cnJlbnRQYWdlIC0gMSkgKiB0aGlzLnBhZ2luYXRpb24ucGVyUGFnZSArIDE7XG4gIH1cblxuICBwcml2YXRlIGdldFRvKCkge1xuICAgIHJldHVybiB0aGlzLmN1cnJlbnRQYWdlICogdGhpcy5wYWdpbmF0aW9uLnBlclBhZ2U7XG4gIH1cblxuICAvKipcbiAgICogU2VsZWN0IHRoZSBwYWdlXG4gICAqL1xuICBwcml2YXRlIHNlbGVjdFBhZ2UocGFnZTogbnVtYmVyKTogT2JzZXJ2YWJsZTxQYWdpbmF0aW9uUmVzcG9uc2U8RT4+IHtcbiAgICByZXR1cm4gdGhpcy5xdWVyeS5zZWxlY3RBbGwoeyBhc09iamVjdDogdHJ1ZSB9KS5waXBlKFxuICAgICAgdGFrZSgxKSxcbiAgICAgIG1hcChlbnRpdGllcyA9PiB7XG4gICAgICAgIGxldCByZXNwb25zZTogUGFnaW5hdGlvblJlc3BvbnNlPEU+ID0ge1xuICAgICAgICAgIC4uLnRoaXMucGFnaW5hdGlvbixcbiAgICAgICAgICBkYXRhOiB0aGlzLnBhZ2VzLmdldChwYWdlKS5pZHMubWFwKGlkID0+IGVudGl0aWVzW2lkXSlcbiAgICAgICAgfTtcblxuICAgICAgICBjb25zdCB7IHJhbmdlLCBwYWdlc0NvbnRyb2xzIH0gPSB0aGlzLmNvbmZpZztcblxuICAgICAgICAvKiogSWYgbm8gdG90YWwgLSBjYWxjIGl0ICovXG4gICAgICAgIGlmIChpc05hTih0aGlzLnBhZ2luYXRpb24udG90YWwpKSB7XG4gICAgICAgICAgaWYgKHJlc3BvbnNlLmxhc3RQYWdlID09PSAxKSB7XG4gICAgICAgICAgICByZXNwb25zZS50b3RhbCA9IHJlc3BvbnNlLmRhdGEgPyByZXNwb25zZS5kYXRhLmxlbmd0aCA6IDA7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlc3BvbnNlLnRvdGFsID0gcmVzcG9uc2UucGVyUGFnZSAqIHJlc3BvbnNlLmxhc3RQYWdlO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aGlzLnBhZ2luYXRpb24udG90YWwgPSByZXNwb25zZS50b3RhbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChyYW5nZSkge1xuICAgICAgICAgIHJlc3BvbnNlLmZyb20gPSB0aGlzLmdldEZyb20oKTtcbiAgICAgICAgICByZXNwb25zZS50byA9IHRoaXMuZ2V0VG8oKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwYWdlc0NvbnRyb2xzKSB7XG4gICAgICAgICAgcmVzcG9uc2UucGFnZUNvbnRyb2xzID0gZ2VuZXJhdGVQYWdlcyh0aGlzLnBhZ2luYXRpb24udG90YWwsIHRoaXMucGFnaW5hdGlvbi5wZXJQYWdlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXNwb25zZTtcbiAgICAgIH0pXG4gICAgKTtcbiAgfVxufVxuXG4vKipcbiAqIEdlbmVyYXRlIGFuIGFycmF5IHNvIHdlIGNhbiBuZ0ZvciB0aGVtIHRvIG5hdmlnYXRlIGJldHdlZW4gcGFnZXNcbiAqL1xuZnVuY3Rpb24gZ2VuZXJhdGVQYWdlcyh0b3RhbDogbnVtYmVyLCBwZXJQYWdlOiBudW1iZXIpIHtcbiAgY29uc3QgbGVuID0gTWF0aC5jZWlsKHRvdGFsIC8gcGVyUGFnZSk7XG4gIGxldCBhcnIgPSBbXTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgIGFyci5wdXNoKGkgKyAxKTtcbiAgfVxuICByZXR1cm4gYXJyO1xufVxuXG4vKiogYmFja3dhcmQgY29tcGF0aWJpbGl0eSAqL1xuZXhwb3J0IGNvbnN0IFBhZ2luYXRvciA9IFBhZ2luYXRvclBsdWdpbjtcbiJdfQ==