/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
import { coerceArray, isFunction, isUndefined, toBoolean } from '../internal/utils';
var ɵ0 = function (plugin) { return plugin.destroy(); };
/** @type {?} */
var defaultActions = { beforeRemove: ɵ0 };
/**
 * @abstract
 * @template E, P
 */
var /**
 * @abstract
 * @template E, P
 */
EntityCollectionPlugin = /** @class */ (function () {
    function EntityCollectionPlugin(query, entityIds) {
        this.query = query;
        this.entityIds = entityIds;
        this.entities = new Map();
    }
    /**
     * Get the entity plugin instance.
     */
    /**
     * Get the entity plugin instance.
     * @param {?} id
     * @return {?}
     */
    EntityCollectionPlugin.prototype.getEntity = /**
     * Get the entity plugin instance.
     * @param {?} id
     * @return {?}
     */
    function (id) {
        return this.entities.get(id);
    };
    /**
     * Whether the entity plugin exist.
     */
    /**
     * Whether the entity plugin exist.
     * @param {?} id
     * @return {?}
     */
    EntityCollectionPlugin.prototype.hasEntity = /**
     * Whether the entity plugin exist.
     * @param {?} id
     * @return {?}
     */
    function (id) {
        return this.entities.has(id);
    };
    /**
     * Remove the entity plugin instance.
     */
    /**
     * Remove the entity plugin instance.
     * @param {?} id
     * @return {?}
     */
    EntityCollectionPlugin.prototype.removeEntity = /**
     * Remove the entity plugin instance.
     * @param {?} id
     * @return {?}
     */
    function (id) {
        return this.entities.delete(id);
    };
    /**
     * Set the entity plugin instance.
     */
    /**
     * Set the entity plugin instance.
     * @param {?} id
     * @param {?} plugin
     * @return {?}
     */
    EntityCollectionPlugin.prototype.createEntity = /**
     * Set the entity plugin instance.
     * @param {?} id
     * @param {?} plugin
     * @return {?}
     */
    function (id, plugin) {
        return this.entities.set(id, plugin);
    };
    /**
     * If the user passes `entityIds` we take them; otherwise, we take all.
     */
    /**
     * If the user passes `entityIds` we take them; otherwise, we take all.
     * @return {?}
     */
    EntityCollectionPlugin.prototype.getIds = /**
     * If the user passes `entityIds` we take them; otherwise, we take all.
     * @return {?}
     */
    function () {
        return isUndefined(this.entityIds) ? this.query.getSnapshot().ids : coerceArray(this.entityIds);
    };
    /**
     * When you call one of the plugin methods, you can pass id/ids or undefined which means all.
     */
    /**
     * When you call one of the plugin methods, you can pass id/ids or undefined which means all.
     * @param {?=} ids
     * @return {?}
     */
    EntityCollectionPlugin.prototype.resolvedIds = /**
     * When you call one of the plugin methods, you can pass id/ids or undefined which means all.
     * @param {?=} ids
     * @return {?}
     */
    function (ids) {
        return isUndefined(ids) ? this.getIds() : coerceArray(ids);
    };
    /**
     * Call this method when you want to activate the plugin on init or when you need to listen to add/remove of entities dynamically.
     *
     * For example in your plugin you may do the following:
     *
     * this.query.select(state => state.ids).pipe(skip(1)).subscribe(ids => this.activate(ids));
     */
    /**
     * Call this method when you want to activate the plugin on init or when you need to listen to add/remove of entities dynamically.
     *
     * For example in your plugin you may do the following:
     *
     * this.query.select(state => state.ids).pipe(skip(1)).subscribe(ids => this.activate(ids));
     * @param {?} ids
     * @param {?=} actions
     * @return {?}
     */
    EntityCollectionPlugin.prototype.rebase = /**
     * Call this method when you want to activate the plugin on init or when you need to listen to add/remove of entities dynamically.
     *
     * For example in your plugin you may do the following:
     *
     * this.query.select(state => state.ids).pipe(skip(1)).subscribe(ids => this.activate(ids));
     * @param {?} ids
     * @param {?=} actions
     * @return {?}
     */
    function (ids, actions) {
        var _this = this;
        if (actions === void 0) { actions = defaultActions; }
        /**
         *
         * If the user passes `entityIds` & we have new ids check if we need to add/remove instances.
         *
         * This phase will be called only upon update.
         */
        if (toBoolean(ids)) {
            /**
             * Which means all
             */
            if (isUndefined(this.entityIds)) {
                for (var i = 0, len = ids.length; i < len; i++) {
                    /** @type {?} */
                    var entityId = ids[i];
                    if (this.hasEntity(entityId) === false) {
                        isFunction(actions.beforeAdd) && actions.beforeAdd(entityId);
                        /** @type {?} */
                        var plugin = this.instantiatePlugin(entityId);
                        this.entities.set(entityId, plugin);
                        isFunction(actions.afterAdd) && actions.afterAdd(plugin);
                    }
                }
                this.entities.forEach(function (plugin, entityId) {
                    if (ids.indexOf(entityId) === -1) {
                        isFunction(actions.beforeRemove) && actions.beforeRemove(plugin);
                        _this.removeEntity(entityId);
                    }
                });
            }
            else {
                /**
                 * Which means the user passes specific ids
                 * @type {?}
                 */
                var _ids = coerceArray(this.entityIds);
                for (var i = 0, len = _ids.length; i < len; i++) {
                    /** @type {?} */
                    var entityId = _ids[i];
                    /** The Entity in current ids and doesn't exist, add it. */
                    if (ids.indexOf(entityId) > -1 && this.hasEntity(entityId) === false) {
                        isFunction(actions.beforeAdd) && actions.beforeAdd(entityId);
                        /** @type {?} */
                        var plugin = this.instantiatePlugin(entityId);
                        this.entities.set(entityId, plugin);
                        isFunction(actions.afterAdd) && actions.afterAdd(plugin);
                    }
                    else {
                        this.entities.forEach(function (plugin, entityId) {
                            /** The Entity not in current ids and exists, remove it. */
                            if (ids.indexOf(entityId) === -1 && _this.hasEntity(entityId) === true) {
                                isFunction(actions.beforeRemove) && actions.beforeRemove(plugin);
                                _this.removeEntity(entityId);
                            }
                        });
                    }
                }
            }
        }
        else {
            /**
             * Otherwise, start with the provided ids or all.
             */
            this.getIds().forEach(function (id) {
                if (!_this.hasEntity(id))
                    _this.createEntity(id, _this.instantiatePlugin(id));
            });
        }
    };
    /**
     * Listen for add/remove entities.
     */
    /**
     * Listen for add/remove entities.
     * @return {?}
     */
    EntityCollectionPlugin.prototype.selectIds = /**
     * Listen for add/remove entities.
     * @return {?}
     */
    function () {
        return this.query.select(function (state) { return state.ids; });
    };
    /**
     * Base method for activation, you can override it if you need to.
     */
    /**
     * Base method for activation, you can override it if you need to.
     * @param {?=} ids
     * @return {?}
     */
    EntityCollectionPlugin.prototype.activate = /**
     * Base method for activation, you can override it if you need to.
     * @param {?=} ids
     * @return {?}
     */
    function (ids) {
        this.rebase(ids);
    };
    /**
     * Loop over each id and invoke the plugin method.
     */
    /**
     * Loop over each id and invoke the plugin method.
     * @param {?} ids
     * @param {?} cb
     * @return {?}
     */
    EntityCollectionPlugin.prototype.forEachId = /**
     * Loop over each id and invoke the plugin method.
     * @param {?} ids
     * @param {?} cb
     * @return {?}
     */
    function (ids, cb) {
        /** @type {?} */
        var _ids = this.resolvedIds(ids);
        for (var i = 0, len = _ids.length; i < len; i++) {
            /** @type {?} */
            var id = _ids[i];
            if (this.hasEntity(id)) {
                cb(this.getEntity(id));
            }
        }
    };
    return EntityCollectionPlugin;
}());
/**
 * @abstract
 * @template E, P
 */
export { EntityCollectionPlugin };
if (false) {
    /** @type {?} */
    EntityCollectionPlugin.prototype.entities;
    /** @type {?} */
    EntityCollectionPlugin.prototype.query;
    /** @type {?} */
    EntityCollectionPlugin.prototype.entityIds;
    /**
     * This method is responsible for plugin instantiation.
     *
     * For example:
     * return new StateHistory(this.query, this.params, id) as P;
     * @abstract
     * @param {?} id
     * @return {?}
     */
    EntityCollectionPlugin.prototype.instantiatePlugin = function (id) { };
    /**
     * This method is responsible for cleaning.
     * @abstract
     * @param {?=} id
     * @return {?}
     */
    EntityCollectionPlugin.prototype.destroy = function (id) { };
}
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,