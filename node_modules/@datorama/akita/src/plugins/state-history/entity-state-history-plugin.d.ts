import { ID, IDS } from '../../api/types';
import { QueryEntity } from '../../api/query-entity';
import { StateHistoryPlugin, StateHistoryParams } from './state-history-plugin';
import { EntityCollectionPlugin, EntityCollectionParams } from '../entity-collection-plugin';
export interface StateHistoryEntityParams extends StateHistoryParams {
    entityIds?: EntityCollectionParams;
}
export declare class EntityStateHistoryPlugin<E, P extends StateHistoryPlugin<E, any> = StateHistoryPlugin<E, any>> extends EntityCollectionPlugin<E, P> {
    protected query: QueryEntity<any, E>;
    protected readonly params: StateHistoryEntityParams;
    constructor(query: QueryEntity<any, E>, params?: StateHistoryEntityParams);
    redo(ids?: IDS): void;
    undo(ids?: IDS): void;
    hasPast(id: ID): boolean;
    hasFuture(id: ID): boolean;
    jumpToFuture(ids: IDS, index: number): void;
    jumpToPast(ids: IDS, index: number): void;
    clear(ids?: IDS): void;
    destroy(ids?: IDS, clearHistory?: boolean): void;
    ignoreNext(ids?: IDS): void;
    protected instantiatePlugin(id: ID): P;
}
