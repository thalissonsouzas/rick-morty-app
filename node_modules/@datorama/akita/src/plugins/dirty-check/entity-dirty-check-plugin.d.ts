import { ID, IDS } from '../../api/types';
import { DirtyCheckComparator, DirtyCheckPlugin, DirtyCheckResetParams } from './dirty-check-plugin';
import { QueryEntity } from '../../api/query-entity';
import { EntityCollectionPlugin } from '../entity-collection-plugin';
import { Observable } from 'rxjs';
export declare type DirtyCheckCollectionParams<E> = {
    comparator?: DirtyCheckComparator<E>;
    entityIds?: ID | ID[];
};
export declare class EntityDirtyCheckPlugin<E, P extends DirtyCheckPlugin<E, any> = DirtyCheckPlugin<E, any>> extends EntityCollectionPlugin<E, P> {
    protected query: QueryEntity<any, E>;
    private readonly params;
    /**
     * @deprecated Use someDirty$ instead
     */
    isSomeDirty$: Observable<boolean>;
    someDirty$: Observable<boolean>;
    someDirty: () => boolean;
    constructor(query: QueryEntity<any, E>, params?: DirtyCheckCollectionParams<E>);
    setHead(ids?: IDS): this;
    hasHead(id: ID): boolean;
    reset(ids?: IDS, params?: DirtyCheckResetParams): void;
    isDirty(id: ID): Observable<boolean>;
    isDirty(id: ID, asObservable: true): Observable<boolean>;
    isDirty(id: ID, asObservable: false): boolean;
    /**
     * @deprecated Use someDirty() instead
     */
    isSomeDirty(): boolean;
    isPathDirty(id: ID, path: string): boolean;
    destroy(ids?: IDS): void;
    protected instantiatePlugin(id: ID): P;
    private checkSomeDirty;
}
