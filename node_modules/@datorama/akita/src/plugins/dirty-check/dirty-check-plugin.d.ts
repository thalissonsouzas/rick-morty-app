import { AkitaPlugin, Queries } from '../plugin';
import { Observable } from 'rxjs';
import { EntityParam } from '../entity-collection-plugin';
declare type Head<StoreState = any, Entity = any> = StoreState | Partial<StoreState> | Entity;
export declare type DirtyCheckComparator<Entity> = (head: Entity, current: Entity) => boolean;
export declare type DirtyCheckParams<StoreState = any> = {
    comparator?: DirtyCheckComparator<StoreState>;
    watchProperty?: keyof StoreState | (keyof StoreState)[];
};
export declare const dirtyCheckDefaultParams: {
    comparator: (head: any, current: any) => boolean;
};
export declare function getNestedPath(nestedObj: any, path: string): any;
export declare type DirtyCheckResetParams<StoreState = any> = {
    updateFn?: StoreState | ((head: StoreState, current: StoreState) => any);
};
export declare class DirtyCheckPlugin<Entity = any, StoreState = any> extends AkitaPlugin<Entity, StoreState> {
    protected query: Queries<Entity, StoreState>;
    private params?;
    private _entityId?;
    private head;
    private dirty;
    private subscription;
    private active;
    private _reset;
    isDirty$: Observable<boolean>;
    reset$: Observable<{}>;
    constructor(query: Queries<Entity, StoreState>, params?: DirtyCheckParams, _entityId?: EntityParam);
    reset(params?: DirtyCheckResetParams): void;
    setHead(): this;
    isDirty(): boolean;
    hasHead(): boolean;
    destroy(): void;
    isPathDirty(path: string): boolean;
    protected getHead(): Head<StoreState, Entity>;
    private activate;
    private updateDirtiness;
    private _getHead;
    private getWatchedValues;
}
export {};
