import { QueryEntity } from '../api/query-entity';
import { Query } from '../api/query';
import { Observable } from 'rxjs';
import { ID } from '../api/types';
export declare type Queries<E, S> = Query<S> | QueryEntity<S, E>;
export declare abstract class AkitaPlugin<E = any, S = any> {
    protected query: Queries<E, S>;
    protected constructor(query: Queries<E, S>, config?: {
        resetFn?: Function;
    });
    /** This method is responsible for getting access to the query. */
    protected getQuery(): Queries<E, S>;
    /** This method is responsible for getting access to the store. */
    protected getStore(): any;
    /** This method is responsible for cleaning. */
    abstract destroy(): any;
    /** This method is responsible tells whether the plugin is entityBased or not.  */
    protected isEntityBased(entityId: ID): boolean;
    /** This method is responsible for selecting the source; it can be the whole store or one entity. */
    protected selectSource(entityId: ID): Observable<S | E>;
    protected getSource(entityId: ID): S | E;
    /** This method is responsible for updating the store or one entity; it can be the whole store or one entity. */
    protected updateStore(newState: any, entityId?: any): void;
    /**
     * Function to invoke upon reset
     */
    private onReset;
}
