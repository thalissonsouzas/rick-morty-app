import { Store } from './store';
import { Observable } from 'rxjs';
import { QueryConfigOptions } from './query-config';
export declare class Query<S> {
    protected store: Store<S>;
    /** Use only for internal plugins like Pagination - don't use this property **/
    __store__: Store<S>;
    constructor(store: Store<S>);
    /**
     * Select a slice from the store.
     *
     * @example
     * this.query.select()
     * this.query.select(state => state.entities)
     */
    select<R>(project?: (store: S) => R): Observable<R>;
    select(): Observable<S>;
    /**
     * Select once and complete.
     */
    selectOnce<R>(project: (store: S) => R): Observable<R>;
    /**
     * Select the store's loading state.
     */
    selectLoading(): Observable<boolean>;
    /**
     * Select the store's error state.
     */
    selectError(): Observable<any>;
    /**
     * Get the raw value of the store.
     */
    getSnapshot(): S;
    /**
     *  Returns whether the state of the store is pristine (the set() method hasn't been explicitly called
     *  since the store creation, or the last time setPristine()was called).
     */
    readonly isPristine: boolean;
    /**
     * Returns whether the state of the store is dirty (the set() method
     * or the setDirty() method has been explicitly called since the store creation,
     * or the last time setPristine() was called).
     */
    readonly isDirty: boolean;
    readonly config: QueryConfigOptions;
}
