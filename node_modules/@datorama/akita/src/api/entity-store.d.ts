import { Action } from '../internal/global-state';
import { Store } from './store';
import { ActiveState, Entities, EntityState, HashMap, ID, Newable, AddOptions, SetActiveOptions } from './types';
/**
 * The Root Store that every sub store needs to inherit and
 * invoke `super` with the initial state.
 */
export declare class EntityStore<S extends EntityState<E>, E, ActiveEntity = ID> extends Store<S> {
    /**
     *
     * Initiate the store with the state
     */
    constructor(initialState?: {}, options?: {
        idKey?: string;
        storeName?: string;
    });
    readonly entities: HashMap<E>;
    /**
     *
     * Replace current collection with provided collection
     *
     * @example
     * this.store.set([Entity, Entity]);
     * this.store.set({1: Entity, 2: Entity});
     * this.store.set([{id: 1}, {id: 2}], { entityClass: Product });
     *
     */
    set(entities: E[] | HashMap<E> | Entities<E>, options?: {
        entityClass?: Newable<E> | undefined;
    }): void;
    /**
     * Create or replace an entity in the store.
     *
     * @example
     * this.store.createOrReplace(3, Entity);
     *
     */
    createOrReplace(id: ID, entity: E): void;
    /**
     *
     * Insert or Update
     */
    upsert(id: ID, entityOrFn: Partial<E> | ((entity: Readonly<E>) => Partial<E>)): void;
    /**
     * Add an entity or entities to the store.
     *
     * @example
     * this.store.add([Entity, Entity]);
     * this.store.add(Entity);
     * this.store.add(Entity, { prepend: true });
     */
    add(entities: E[] | E, options?: AddOptions): void;
    /**
     *
     * Update an entity or entities in the store.
     *
     * @example
     * this.store.update(3, {
     *   name: 'New Name'
     * });
     *
     *  this.store.update(3, entity => {
     *    return {
     *      config: {
     *        ...entity.filter,
     *        date
     *      }
     *    }
     *  });
     *
     * this.store.update([1,2,3], {
     *   name: 'New Name'
     * });
     *
     * this.store.update(e => e.name === 'value', {
     *   name: 'New Name'
     * });
     *
     * this.store.update(null, {
     *   name: 'New Name'
     * });
     *
     */
    update(id: ID | ID[] | null, newStateFn: ((entity: Readonly<E>) => Partial<E>)): any;
    update(id: ID | ID[] | null, newState: Partial<E>): any;
    update(id: ID | ID[] | null, newState: Partial<S>): any;
    update(newState: (state: Readonly<S>) => Partial<S>): any;
    update(predicate: ((entity: Readonly<E>) => boolean), newStateFn: ((entity: Readonly<E>) => Partial<E>)): any;
    update(predicate: ((entity: Readonly<E>) => boolean), newState: Partial<E>): any;
    update(predicate: ((entity: Readonly<E>) => boolean), newState: Partial<S>): any;
    update(newState: Partial<S>): any;
    /**
     * An alias to update all.
     */
    updateAll(state: Partial<E>): void;
    /**
     * Update the root state (data which is external to the entities).
     *
     * @example
     * this.store.updateRoot({
     *   metadata: 'new metadata
     * });
     *
     *  this.store.updateRoot(state => {
     *    return {
     *      metadata: {
     *        ...state.metadata,
     *        key: 'new value'
     *      }
     *    }
     *  });
     */
    updateRoot(newStateFn: ((state: Readonly<S>) => Partial<S>) | Partial<S>, action?: Action): void;
    /**
     *
     * Remove one or more entities from the store:
     *
     * @example
     * this.store.remove(5);
     * this.store.remove([1,2,3]);
     * this.store.remove(entity => entity.id === 1);
     * this.store.remove();
     */
    remove(id?: ID | ID[]): any;
    remove(predicate: (entity: Readonly<E>) => boolean): any;
    /**
     *
     * Update the active entity.
     *
     * @example
     * this.store.updateActive(active => {
     *   return {
     *     config: {
     *      ..active.config,
     *      date
     *     }
     *   }
     * })
     */
    updateActive(newStateFn: ((entity: Readonly<E>) => Partial<E>) | Partial<E>): void;
    /**
     * Set the given entity as active.
     */
    setActive(idOrOptions: ActiveEntity | SetActiveOptions | null): void;
    private addWhenNotExists;
}
export declare const getInitialEntitiesState: () => EntityState<any, any>;
export declare const getInitialActiveState: () => ActiveState<ID>;
