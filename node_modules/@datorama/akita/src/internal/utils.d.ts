import { Observable } from 'rxjs';
import { EntityState, HashMap, ID } from '../api/types';
/** Wraps the provided value in an array, unless the provided _value is an array. */
export declare function coerceArray<T>(value: T | T[]): T[];
/** Check if a value is an object */
export declare function isObject(value: any): boolean;
export declare function isPlainObject(value: any): boolean;
export declare function isFunction(value: any): value is Function;
export declare function toBoolean(value: any): boolean;
export declare function isUndefined(value: any): boolean;
export declare function isNil(v: any): boolean;
/**
 * Check if entity exists
 */
export declare function entityExists<E>(id: ID, entities: HashMap<E>): boolean;
/**
 * Observable that emits empty value and complete
 */
export declare function noop<T>(): Observable<T>;
export declare function isObservable(value: any): boolean;
export declare function isString(val: string | any): val is string;
export declare function isNumber(value: any): boolean;
export declare function isDefined(val: any): boolean;
/**
 * Check if the active entity exist
 */
export declare function resetActive<E>(state: EntityState<E>): boolean;
/**
 * Check if the store supports active entity
 */
export declare function isActiveState<E>(state: EntityState<E>): boolean;
/**
 * setValue(state, 'todos.ui', { filter: {}})
 */
export declare const setValue: (obj: any, prop: string, val: any) => any;
/**
 * getValue(state, 'todos.ui')
 */
export declare const getValue: (obj: any, prop: string) => any;
