/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
import { Observable } from 'rxjs';
/**
 * Wraps the provided value in an array, unless the provided _value is an array.
 * @template T
 * @param {?} value
 * @return {?}
 */
export function coerceArray(value) {
    return Array.isArray(value) ? value : [value];
}
/**
 * Check if a value is an object
 * @param {?} value
 * @return {?}
 */
export function isObject(value) {
    return Object.prototype.toString.call(value) === '[object Object]';
}
/**
 * @param {?} value
 * @return {?}
 */
export function isPlainObject(value) {
    return toBoolean(value) && value.constructor.name === 'Object';
}
/**
 * @param {?} value
 * @return {?}
 */
export function isFunction(value) {
    return typeof value === 'function';
}
/**
 * @param {?} value
 * @return {?}
 */
export function toBoolean(value) {
    return value != null && `${value}` !== 'false';
}
/**
 * @param {?} value
 * @return {?}
 */
export function isUndefined(value) {
    return value === undefined;
}
/**
 * @param {?} v
 * @return {?}
 */
export function isNil(v) {
    return v === null || v === undefined;
}
/**
 * Check if entity exists
 * @template E
 * @param {?} id
 * @param {?} entities
 * @return {?}
 */
export function entityExists(id, entities) {
    return entities.hasOwnProperty(id);
}
/**
 * Observable that emits empty value and complete
 * @template T
 * @return {?}
 */
export function noop() {
    return new Observable(observer => {
        observer.next();
        observer.complete();
    });
}
/**
 * @param {?} value
 * @return {?}
 */
export function isObservable(value) {
    return toBoolean(value) && isFunction(value.subscribe);
}
/**
 * @param {?} val
 * @return {?}
 */
export function isString(val) {
    return typeof val === 'string';
}
/**
 * @param {?} value
 * @return {?}
 */
export function isNumber(value) {
    return typeof value === 'number';
}
/**
 * @param {?} val
 * @return {?}
 */
export function isDefined(val) {
    return val !== null && typeof val !== 'undefined';
}
/**
 * Check if the active entity exist
 * @template E
 * @param {?} state
 * @return {?}
 */
export function resetActive(state) {
    return isActiveState(state) && entityExists(((/** @type {?} */ (state))).active, state.entities) === false;
}
/**
 * Check if the store supports active entity
 * @template E
 * @param {?} state
 * @return {?}
 */
export function isActiveState(state) {
    return ((/** @type {?} */ (state))).hasOwnProperty('active');
}
/**
 * setValue(state, 'todos.ui', { filter: {}})
 * @type {?}
 */
export const setValue = (obj, prop, val) => {
    /** @type {?} */
    const split = prop.split('.');
    if (split.length === 1)
        return val;
    obj = Object.assign({}, obj);
    /** @type {?} */
    const lastIndex = split.length - 2;
    /** @type {?} */
    const removeStoreName = prop.split('.').slice(1);
    removeStoreName.reduce((acc, part, index) => {
        if (index === lastIndex) {
            acc[part] = val;
        }
        else {
            acc[part] = Object.assign({}, acc[part]);
        }
        return acc && acc[part];
    }, obj);
    return obj;
};
/**
 * getValue(state, 'todos.ui')
 * @type {?}
 */
export const getValue = (obj, prop) => {
    /** return the whole state  */
    if (prop.split('.').length === 1) {
        return obj;
    }
    /** @type {?} */
    const removeStoreName = prop
        .split('.')
        .slice(1)
        .join('.');
    return removeStoreName.split('.').reduce((acc, part) => acc && acc[part], obj);
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZGF0b3JhbWEvYWtpdGEvIiwic291cmNlcyI6WyJzcmMvaW50ZXJuYWwvdXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxNQUFNLENBQUM7Ozs7Ozs7QUFJbEMsTUFBTSxVQUFVLFdBQVcsQ0FBSSxLQUFjO0lBQzNDLE9BQU8sS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ2hELENBQUM7Ozs7OztBQUdELE1BQU0sVUFBVSxRQUFRLENBQUMsS0FBVTtJQUNqQyxPQUFPLE1BQU0sQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxpQkFBaUIsQ0FBQztBQUNyRSxDQUFDOzs7OztBQUVELE1BQU0sVUFBVSxhQUFhLENBQUMsS0FBSztJQUNqQyxPQUFPLFNBQVMsQ0FBQyxLQUFLLENBQUMsSUFBSSxLQUFLLENBQUMsV0FBVyxDQUFDLElBQUksS0FBSyxRQUFRLENBQUM7QUFDakUsQ0FBQzs7Ozs7QUFFRCxNQUFNLFVBQVUsVUFBVSxDQUFDLEtBQUs7SUFDOUIsT0FBTyxPQUFPLEtBQUssS0FBSyxVQUFVLENBQUM7QUFDckMsQ0FBQzs7Ozs7QUFFRCxNQUFNLFVBQVUsU0FBUyxDQUFDLEtBQVU7SUFDbEMsT0FBTyxLQUFLLElBQUksSUFBSSxJQUFJLEdBQUcsS0FBSyxFQUFFLEtBQUssT0FBTyxDQUFDO0FBQ2pELENBQUM7Ozs7O0FBRUQsTUFBTSxVQUFVLFdBQVcsQ0FBQyxLQUFLO0lBQy9CLE9BQU8sS0FBSyxLQUFLLFNBQVMsQ0FBQztBQUM3QixDQUFDOzs7OztBQUVELE1BQU0sVUFBVSxLQUFLLENBQUMsQ0FBQztJQUNyQixPQUFPLENBQUMsS0FBSyxJQUFJLElBQUksQ0FBQyxLQUFLLFNB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Q1YsS0FBSyxDQUFDLENBQUMsQ0FBQztTQUNSLElBQUksQ0FBQyxHQUFHLENBQUM7SUFDWixPQUFPLGVBQWUsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBUSxFQUFFLElBQVksRUFBRSxFQUFFLENBQUMsR0FBRyxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQztBQUM5RixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgQWN0aXZlU3RhdGUsIEVudGl0eVN0YXRlLCBIYXNoTWFwLCBJRCB9IGZyb20gJy4uL2FwaS90eXBlcyc7XG5cbi8qKiBXcmFwcyB0aGUgcHJvdmlkZWQgdmFsdWUgaW4gYW4gYXJyYXksIHVubGVzcyB0aGUgcHJvdmlkZWQgX3ZhbHVlIGlzIGFuIGFycmF5LiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvZXJjZUFycmF5PFQ+KHZhbHVlOiBUIHwgVFtdKTogVFtdIHtcbiAgcmV0dXJuIEFycmF5LmlzQXJyYXkodmFsdWUpID8gdmFsdWUgOiBbdmFsdWVdO1xufVxuXG4vKiogQ2hlY2sgaWYgYSB2YWx1ZSBpcyBhbiBvYmplY3QgKi9cbmV4cG9ydCBmdW5jdGlvbiBpc09iamVjdCh2YWx1ZTogYW55KSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpID09PSAnW29iamVjdCBPYmplY3RdJztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzUGxhaW5PYmplY3QodmFsdWUpIHtcbiAgcmV0dXJuIHRvQm9vbGVhbih2YWx1ZSkgJiYgdmFsdWUuY29uc3RydWN0b3IubmFtZSA9PT0gJ09iamVjdCc7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0Z1bmN0aW9uKHZhbHVlKTogdmFsdWUgaXMgRnVuY3Rpb24ge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdG9Cb29sZWFuKHZhbHVlOiBhbnkpOiBib29sZWFuIHtcbiAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgYCR7dmFsdWV9YCAhPT0gJ2ZhbHNlJztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzVW5kZWZpbmVkKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNOaWwodikge1xuICByZXR1cm4gdiA9PT0gbnVsbCB8fCB2ID09PSB1bmRlZmluZWQ7XG59XG5cbi8qKlxuICogQ2hlY2sgaWYgZW50aXR5IGV4aXN0c1xuICovXG5leHBvcnQgZnVuY3Rpb24gZW50aXR5RXhpc3RzPEU+KGlkOiBJRCwgZW50aXRpZXM6IEhhc2hNYXA8RT4pIHtcbiAgcmV0dXJuIGVudGl0aWVzLmhhc093blByb3BlcnR5KGlkKTtcbn1cblxuLyoqXG4gKiBPYnNlcnZhYmxlIHRoYXQgZW1pdHMgZW1wdHkgdmFsdWUgYW5kIGNvbXBsZXRlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBub29wPFQ+KCk6IE9ic2VydmFibGU8VD4ge1xuICByZXR1cm4gbmV3IE9ic2VydmFibGUob2JzZXJ2ZXIgPT4ge1xuICAgIG9ic2VydmVyLm5leHQoKTtcbiAgICBvYnNlcnZlci5jb21wbGV0ZSgpO1xuICB9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzT2JzZXJ2YWJsZSh2YWx1ZSkge1xuICByZXR1cm4gdG9Cb29sZWFuKHZhbHVlKSAmJiBpc0Z1bmN0aW9uKHZhbHVlLnN1YnNjcmliZSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1N0cmluZyh2YWw6IHN0cmluZyB8IGFueSk6IHZhbCBpcyBzdHJpbmcge1xuICByZXR1cm4gdHlwZW9mIHZhbCA9PT0gJ3N0cmluZyc7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc051bWJlcih2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzRGVmaW5lZCh2YWwpIHtcbiAgcmV0dXJuIHZhbCAhPT0gbnVsbCAmJiB0eXBlb2YgdmFsICE9PSAndW5kZWZpbmVkJztcbn1cblxuLyoqXG4gKiBDaGVjayBpZiB0aGUgYWN0aXZlIGVudGl0eSBleGlzdFxuICovXG5leHBvcnQgZnVuY3Rpb24gcmVzZXRBY3RpdmU8RT4oc3RhdGU6IEVudGl0eVN0YXRlPEU+KSB7XG4gIHJldHVybiBpc0FjdGl2ZVN0YXRlKHN0YXRlKSAmJiBlbnRpdHlFeGlzdHMoKHN0YXRlIGFzIEFjdGl2ZVN0YXRlKS5hY3RpdmUsIHN0YXRlLmVudGl0aWVzKSA9PT0gZmFsc2U7XG59XG5cbi8qKlxuICogQ2hlY2sgaWYgdGhlIHN0b3JlIHN1cHBvcnRzIGFjdGl2ZSBlbnRpdHlcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzQWN0aXZlU3RhdGU8RT4oc3RhdGU6IEVudGl0eVN0YXRlPEU+KSB7XG4gIHJldHVybiAoc3RhdGUgYXMgQWN0aXZlU3RhdGUpLmhhc093blByb3BlcnR5KCdhY3RpdmUnKTtcbn1cblxuLyoqXG4gKiBzZXRWYWx1ZShzdGF0ZSwgJ3RvZG9zLnVpJywgeyBmaWx0ZXI6IHt9fSlcbiAqL1xuZXhwb3J0IGNvbnN0IHNldFZhbHVlID0gKG9iajogYW55LCBwcm9wOiBzdHJpbmcsIHZhbDogYW55KSA9PiB7XG4gIGNvbnN0IHNwbGl0ID0gcHJvcC5zcGxpdCgnLicpO1xuXG4gIGlmIChzcGxpdC5sZW5ndGggPT09IDEpIHJldHVybiB2YWw7XG5cbiAgb2JqID0geyAuLi5vYmogfTtcblxuICBjb25zdCBsYXN0SW5kZXggPSBzcGxpdC5sZW5ndGggLSAyO1xuICBjb25zdCByZW1vdmVTdG9yZU5hbWUgPSBwcm9wLnNwbGl0KCcuJykuc2xpY2UoMSk7XG5cbiAgcmVtb3ZlU3RvcmVOYW1lLnJlZHVjZSgoYWNjLCBwYXJ0LCBpbmRleCkgPT4ge1xuICAgIGlmIChpbmRleCA9PT0gbGFzdEluZGV4KSB7XG4gICAgICBhY2NbcGFydF0gPSB2YWw7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFjY1twYXJ0XSA9IHsgLi4uYWNjW3BhcnRdIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIGFjYyAmJiBhY2NbcGFydF07XG4gIH0sIG9iaik7XG5cbiAgcmV0dXJuIG9iajtcbn07XG5cbi8qKlxuICogZ2V0VmFsdWUoc3RhdGUsICd0b2Rvcy51aScpXG4gKi9cbmV4cG9ydCBjb25zdCBnZXRWYWx1ZSA9IChvYmo6IGFueSwgcHJvcDogc3RyaW5nKSA9PiB7XG4gIC8qKiByZXR1cm4gdGhlIHdob2xlIHN0YXRlICAqL1xuICBpZiAocHJvcC5zcGxpdCgnLicpLmxlbmd0aCA9PT0gMSkge1xuICAgIHJldHVybiBvYmo7XG4gIH1cbiAgY29uc3QgcmVtb3ZlU3RvcmVOYW1lID0gcHJvcFxuICAgIC5zcGxpdCgnLicpXG4gICAgLnNsaWNlKDEpXG4gICAgLmpvaW4oJy4nKTtcbiAgcmV0dXJuIHJlbW92ZVN0b3JlTmFtZS5zcGxpdCgnLicpLnJlZHVjZSgoYWNjOiBhbnksIHBhcnQ6IHN0cmluZykgPT4gYWNjICYmIGFjY1twYXJ0XSwgb2JqKTtcbn07XG4iXX0=