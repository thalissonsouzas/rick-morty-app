/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
import { pairwise } from 'rxjs/operators';
import { __globalState } from '../../internal/global-state';
import { toBoolean } from '../../internal/utils';
import { AkitaPlugin } from '../plugin';
/**
 * @record
 */
export function StateHistoryParams() { }
if (false) {
    /** @type {?|undefined} */
    StateHistoryParams.prototype.maxAge;
}
/**
 * @template E, S
 */
export class StateHistoryPlugin extends AkitaPlugin {
    /**
     * @param {?} query
     * @param {?=} params
     * @param {?=} _entityId
     */
    constructor(query, params = {}, _entityId) {
        super(query, {
            resetFn: () => this.clear()
        });
        this.query = query;
        this.params = params;
        this._entityId = _entityId;
        /**
         * Allow skipping an update from outside
         */
        this.skip = false;
        this.history = {
            past: [],
            present: null,
            future: []
        };
        /**
         * Skip the update when redo/undo
         */
        this.skipUpdate = false;
        params.maxAge = toBoolean(params.maxAge) ? params.maxAge : 10;
        this.activate();
    }
    /**
     * @return {?}
     */
    get hasPast() {
        return this.history.past.length > 0;
    }
    /**
     * @return {?}
     */
    get hasFuture() {
        return this.history.future.length > 0;
    }
    /**
     * @return {?}
     */
    activate() {
        this.history.present = this.getSource(this._entityId);
        this.subscription = this.selectSource(this._entityId)
            .pipe(pairwise())
            .subscribe(([past, present]) => {
            if (this.skip) {
                this.skip = false;
                return;
            }
            if (!this.skipUpdate) {
                if (this.history.past.length === this.params.maxAge) {
                    this.history.past = this.history.past.slice(1);
                }
                this.history.past = [...this.history.past, past];
                this.history.present = present;
            }
        });
    }
    /**
     * @return {?}
     */
    undo() {
        if (this.history.past.length > 0) {
            const { past, present, future } = this.history;
            /** @type {?} */
            const previous = past[past.length - 1];
            /** @type {?} */
            const newPast = past.slice(0, past.length - 1);
            this.history.past = newPast;
            this.history.present = previous;
            this.history.future = [present, ...this.history.future];
            this.update();
        }
    }
    /**
     * @return {?}
     */
    redo() {
        if (this.history.future.length > 0) {
            const { past, present, future } = this.history;
            /** @type {?} */
            const next = this.history.future[0];
            /** @type {?} */
            const newFuture = this.history.future.slice(1);
            this.history.past = [...past, present];
            this.history.present = next;
            this.history.future = newFuture;
            this.update('Redo');
        }
    }
    /**
     * @param {?} index
     * @return {?}
     */
    jumpToPast(index) {
        if (index < 0 || index >= this.history.past.length)
            return;
        const { past, future } = this.history;
        /**
         *
         * const past = [1, 2, 3, 4, 5];
         *
         * newPast = past.slice(0, 2) = [1, 2];
         * present = past[index] = 3;
         * [...past.slice(2 + 1), ...future] = [4, 5];
         *
         * @type {?}
         */
        const newPast = past.slice(0, index);
        /** @type {?} */
        const newFuture = [...past.slice(index + 1), ...future];
        /** @type {?} */
        const newPresent = past[index];
        this.history.past = newPast;
        this.history.present = newPresent;
        this.history.future = newFuture;
        this.update();
    }
    /**
     * @param {?} index
     * @return {?}
     */
    jumpToFuture(index) {
        if (index < 0 || index >= this.history.future.length)
            return;
        const { past, future } = this.history;
        /** @type {?} */
        const newPast = [...past, ...future.slice(0, index)];
        /** @type {?} */
        const newPresent = future[index];
        /** @type {?} */
        const newFuture = future.slice(index + 1);
        this.history.past = newPast;
        this.history.present = newPresent;
        this.history.future = newFuture;
        this.update('Redo');
    }
    /**
     * @return {?}
     */
    clear() {
        this.history = {
            past: [],
            present: null,
            future: []
        };
    }
    /**
     * @param {?=} clearHistory
     * @return {?}
     */
    destroy(clearHistory = false) {
        if (clearHistory) {
            this.clear();
        }
        this.subscription.unsubscribe();
    }
    /**
     * @return {?}
     */
    ignoreNext() {
        this.skip = true;
    }
    /**
     * @param {?=} action
     * @return {?}
     */
    update(action = 'Undo') {
        this.skipUpdate = true;
        __globalState.setCustomAction({ type: `@StateHistory - ${action}` });
        this.updateStore(this.history.present, this._entityId);
        this.skipUpdate = false;
    }
}
if (false) {
    /**
     * Allow skipping an update from outside
     * @type {?}
     */
    StateHistoryPlugin.prototype.skip;
    /** @type {?} */
    StateHistoryPlugin.prototype.history;
    /**
     * Skip the update when redo/undo
     * @type {?}
     */
    StateHistoryPlugin.prototype.skipUpdate;
    /** @type {?} */
    StateHistoryPlugin.prototype.subscription;
    /** @type {?} */
    StateHistoryPlugin.prototype.query;
    /** @type {?} */
    StateHistoryPlugin.prototype.params;
    /** @type {?} */
    StateHistoryPlugin.prototype._entityId;
}
//# sourceMappingURL=data:application/json;base64,