/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
import { StateHistoryPlugin } from './state-history-plugin';
import { toBoolean } from '../../internal/utils';
import { skip } from 'rxjs/operators';
import { EntityCollectionPlugin } from '../entity-collection-plugin';
/**
 * @record
 */
export function StateHistoryEntityParams() { }
if (false) {
    /** @type {?|undefined} */
    StateHistoryEntityParams.prototype.entityIds;
}
/**
 * @template E, P
 */
export class EntityStateHistoryPlugin extends EntityCollectionPlugin {
    /**
     * @param {?} query
     * @param {?=} params
     */
    constructor(query, params = {}) {
        super(query, params.entityIds);
        this.query = query;
        this.params = params;
        params.maxAge = toBoolean(params.maxAge) ? params.maxAge : 10;
        this.activate();
        this.selectIds()
            .pipe(skip(1))
            .subscribe(ids => this.activate(ids));
    }
    /**
     * @param {?=} ids
     * @return {?}
     */
    redo(ids) {
        this.forEachId(ids, e => e.redo());
    }
    /**
     * @param {?=} ids
     * @return {?}
     */
    undo(ids) {
        this.forEachId(ids, e => e.undo());
    }
    /**
     * @param {?} id
     * @return {?}
     */
    hasPast(id) {
        if (this.hasEntity(id)) {
            return this.getEntity(id).hasPast;
        }
    }
    /**
     * @param {?} id
     * @return {?}
     */
    hasFuture(id) {
        if (this.hasEntity(id)) {
            return this.getEntity(id).hasFuture;
        }
    }
    /**
     * @param {?} ids
     * @param {?} index
     * @return {?}
     */
    jumpToFuture(ids, index) {
        this.forEachId(ids, e => e.jumpToFuture(index));
    }
    /**
     * @param {?} ids
     * @param {?} index
     * @return {?}
     */
    jumpToPast(ids, index) {
        this.forEachId(ids, e => e.jumpToPast(index));
    }
    /**
     * @param {?=} ids
     * @return {?}
     */
    clear(ids) {
        this.forEachId(ids, e => e.clear());
    }
    /**
     * @param {?=} ids
     * @param {?=} clearHistory
     * @return {?}
     */
    destroy(ids, clearHistory = false) {
        this.forEachId(ids, e => e.destroy(clearHistory));
    }
    /**
     * @param {?=} ids
     * @return {?}
     */
    ignoreNext(ids) {
        this.forEachId(ids, e => e.ignoreNext());
    }
    /**
     * @param {?} id
     * @return {?}
     */
    instantiatePlugin(id) {
        return (/** @type {?} */ (new StateHistoryPlugin(this.query, this.params, id)));
    }
}
if (false) {
    /** @type {?} */
    EntityStateHistoryPlugin.prototype.query;
    /** @type {?} */
    EntityStateHistoryPlugin.prototype.params;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW50aXR5LXN0YXRlLWhpc3RvcnktcGx1Z2luLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGRhdG9yYW1hL2FraXRhLyIsInNvdXJjZXMiOlsic3JjL3BsdWdpbnMvc3RhdGUtaGlzdG9yeS9lbnRpdHktc3RhdGUtaGlzdG9yeS1wbHVnaW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUVBLE9BQU8sRUFBRSxrQkFBa0IsRUFBc0IsTUFBTSx3QkFBd0IsQ0FBQztBQUNoRixPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDakQsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ3RDLE9BQU8sRUFBRSxzQkFBc0IsRUFBMEIsTUFBTSw2QkFBNkIsQ0FBQzs7OztBQUU3Riw4Q0FFQzs7O0lBREMsNkNBQW1DOzs7OztBQUdyQyxNQUFNLE9BQU8sd0JBQStGLFNBQVEsc0JBQTRCOzs7OztJQUM5SSxZQUFzQixLQUEwQixFQUFxQixTQUFtQyxFQUFFO1FBQ3hHLEtBQUssQ0FBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBRFgsVUFBSyxHQUFMLEtBQUssQ0FBcUI7UUFBcUIsV0FBTSxHQUFOLE1BQU0sQ0FBK0I7UUFFeEcsTUFBTSxDQUFDLE1BQU0sR0FBRyxTQUFTLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7UUFDOUQsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQ2hCLElBQUksQ0FBQyxTQUFTLEVBQUU7YUFDYixJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO2FBQ2IsU0FBUyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQzFDLENBQUM7Ozs7O0lBRUQsSUFBSSxDQUFDLEdBQVM7UUFDWixJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDO0lBQ3JDLENBQUM7Ozs7O0lBRUQsSUFBSSxDQUFDLEdBQVM7UUFDWixJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDO0lBQ3JDLENBQUM7Ozs7O0lBRUQsT0FBTyxDQUFDLEVBQU07UUFDWixJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLEVBQUU7WUFDdEIsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQztTQUNuQztJQUNILENBQUM7Ozs7O0lBRUQsU0FBUyxDQUFDLEVBQU07UUFDZCxJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLEVBQUU7WUFDdEIsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDLFNBQVMsQ0FBQztTQUNyQztJQUNILENBQUM7Ozs7OztJQUVELFlBQVksQ0FBQyxHQUFRLEVBQUUsS0FBYTtRQUNsQyxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztJQUNsRCxDQUFDOzs7Ozs7SUFFRCxVQUFVLENBQUMsR0FBUSxFQUFFLEtBQWE7UUFDaEMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7SUFDaEQsQ0FBQzs7Ozs7SUFFRCxLQUFLLENBQUMsR0FBUztRQUNiLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUM7SUFDdEMsQ0FBQzs7Ozs7O0lBRUQsT0FBTyxDQUFDLEdBQVMsRUFBRSxZQUFZLEdBQUcsS0FBSztRQUNyQyxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQztJQUNwRCxDQUFDOzs7OztJQUVELFVBQVUsQ0FBQyxHQUFTO1FBQ2xCLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLFVBQVUsRUFBRSxDQUFDLENBQUM7SUFDM0MsQ0FBQzs7Ozs7SUFFUyxpQkFBaUIsQ0FBQyxFQUFNO1FBQ2hDLE9BQU8sbUJBQUEsSUFBSSxrQkFBa0IsQ0FBUyxJQUFJLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLEVBQUssQ0FBQztJQUMxRSxDQUFDO0NBQ0Y7OztJQXBEYSx5Q0FBb0M7O0lBQUUsMENBQXdEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSUQsIElEUyB9IGZyb20gJy4uLy4uL2FwaS90eXBlcyc7XG5pbXBvcnQgeyBRdWVyeUVudGl0eSB9IGZyb20gJy4uLy4uL2FwaS9xdWVyeS1lbnRpdHknO1xuaW1wb3J0IHsgU3RhdGVIaXN0b3J5UGx1Z2luLCBTdGF0ZUhpc3RvcnlQYXJhbXMgfSBmcm9tICcuL3N0YXRlLWhpc3RvcnktcGx1Z2luJztcbmltcG9ydCB7IHRvQm9vbGVhbiB9IGZyb20gJy4uLy4uL2ludGVybmFsL3V0aWxzJztcbmltcG9ydCB7IHNraXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBFbnRpdHlDb2xsZWN0aW9uUGx1Z2luLCBFbnRpdHlDb2xsZWN0aW9uUGFyYW1zIH0gZnJvbSAnLi4vZW50aXR5LWNvbGxlY3Rpb24tcGx1Z2luJztcblxuZXhwb3J0IGludGVyZmFjZSBTdGF0ZUhpc3RvcnlFbnRpdHlQYXJhbXMgZXh0ZW5kcyBTdGF0ZUhpc3RvcnlQYXJhbXMge1xuICBlbnRpdHlJZHM/OiBFbnRpdHlDb2xsZWN0aW9uUGFyYW1zO1xufVxuXG5leHBvcnQgY2xhc3MgRW50aXR5U3RhdGVIaXN0b3J5UGx1Z2luPEUsIFAgZXh0ZW5kcyBTdGF0ZUhpc3RvcnlQbHVnaW48RSwgYW55PiA9IFN0YXRlSGlzdG9yeVBsdWdpbjxFLCBhbnk+PiBleHRlbmRzIEVudGl0eUNvbGxlY3Rpb25QbHVnaW48RSwgUD4ge1xuICBjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgcXVlcnk6IFF1ZXJ5RW50aXR5PGFueSwgRT4sIHByb3RlY3RlZCByZWFkb25seSBwYXJhbXM6IFN0YXRlSGlzdG9yeUVudGl0eVBhcmFtcyA9IHt9KSB7XG4gICAgc3VwZXIocXVlcnksIHBhcmFtcy5lbnRpdHlJZHMpO1xuICAgIHBhcmFtcy5tYXhBZ2UgPSB0b0Jvb2xlYW4ocGFyYW1zLm1heEFnZSkgPyBwYXJhbXMubWF4QWdlIDogMTA7XG4gICAgdGhpcy5hY3RpdmF0ZSgpO1xuICAgIHRoaXMuc2VsZWN0SWRzKClcbiAgICAgIC5waXBlKHNraXAoMSkpXG4gICAgICAuc3Vic2NyaWJlKGlkcyA9PiB0aGlzLmFjdGl2YXRlKGlkcykpO1xuICB9XG5cbiAgcmVkbyhpZHM/OiBJRFMpIHtcbiAgICB0aGlzLmZvckVhY2hJZChpZHMsIGUgPT4gZS5yZWRvKCkpO1xuICB9XG5cbiAgdW5kbyhpZHM/OiBJRFMpIHtcbiAgICB0aGlzLmZvckVhY2hJZChpZHMsIGUgPT4gZS51bmRvKCkpO1xuICB9XG5cbiAgaGFzUGFzdChpZDogSUQpIHtcbiAgICBpZiAodGhpcy5oYXNFbnRpdHkoaWQpKSB7XG4gICAgICByZXR1cm4gdGhpcy5nZXRFbnRpdHkoaWQpLmhhc1Bhc3Q7XG4gICAgfVxuICB9XG5cbiAgaGFzRnV0dXJlKGlkOiBJRCkge1xuICAgIGlmICh0aGlzLmhhc0VudGl0eShpZCkpIHtcbiAgICAgIHJldHVybiB0aGlzLmdldEVudGl0eShpZCkuaGFzRnV0dXJlO1xuICAgIH1cbiAgfVxuXG4gIGp1bXBUb0Z1dHVyZShpZHM6IElEUywgaW5kZXg6IG51bWJlcikge1xuICAgIHRoaXMuZm9yRWFjaElkKGlkcywgZSA9PiBlLmp1bXBUb0Z1dHVyZShpbmRleCkpO1xuICB9XG5cbiAganVtcFRvUGFzdChpZHM6IElEUywgaW5kZXg6IG51bWJlcikge1xuICAgIHRoaXMuZm9yRWFjaElkKGlkcywgZSA9PiBlLmp1bXBUb1Bhc3QoaW5kZXgpKTtcbiAgfVxuXG4gIGNsZWFyKGlkcz86IElEUykge1xuICAgIHRoaXMuZm9yRWFjaElkKGlkcywgZSA9PiBlLmNsZWFyKCkpO1xuICB9XG5cbiAgZGVzdHJveShpZHM/OiBJRFMsIGNsZWFySGlzdG9yeSA9IGZhbHNlKSB7XG4gICAgdGhpcy5mb3JFYWNoSWQoaWRzLCBlID0+IGUuZGVzdHJveShjbGVhckhpc3RvcnkpKTtcbiAgfVxuXG4gIGlnbm9yZU5leHQoaWRzPzogSURTKSB7XG4gICAgdGhpcy5mb3JFYWNoSWQoaWRzLCBlID0+IGUuaWdub3JlTmV4dCgpKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBpbnN0YW50aWF0ZVBsdWdpbihpZDogSUQpIHtcbiAgICByZXR1cm4gbmV3IFN0YXRlSGlzdG9yeVBsdWdpbjxFLCBhbnk+KHRoaXMucXVlcnksIHRoaXMucGFyYW1zLCBpZCkgYXMgUDtcbiAgfVxufVxuIl19