/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { delay, map, switchMap, take } from 'rxjs/operators';
import { BehaviorSubject, from } from 'rxjs';
import { isObservable, isUndefined } from '../../internal/utils';
import { AkitaPlugin } from '../plugin';
import { applyTransaction } from '../../api/transaction';
import { action, applyAction } from '../../internal/action';
/**
 * @record
 * @template E
 */
export function PaginationResponse() { }
if (false) {
    /** @type {?} */
    PaginationResponse.prototype.currentPage;
    /** @type {?} */
    PaginationResponse.prototype.perPage;
    /** @type {?} */
    PaginationResponse.prototype.lastPage;
    /** @type {?} */
    PaginationResponse.prototype.data;
    /** @type {?|undefined} */
    PaginationResponse.prototype.total;
    /** @type {?|undefined} */
    PaginationResponse.prototype.from;
    /** @type {?|undefined} */
    PaginationResponse.prototype.to;
    /** @type {?|undefined} */
    PaginationResponse.prototype.pageControls;
}
/** @type {?} */
const paginatorDefaults = {
    pagesControls: false,
    range: false,
    startWith: 1,
    cacheTimeout: undefined
};
/**
 * @template E
 */
export class PaginatorPlugin extends AkitaPlugin {
    /**
     * @param {?} query
     * @param {?=} config
     */
    constructor(query, config = {}) {
        super(query, {
            resetFn: () => {
                this.initial = false;
                this.destroy({ clearCache: true, currentPage: 1 });
            }
        });
        this.query = query;
        this.config = config;
        /**
         * Save current filters, sorting, etc. in cache
         */
        this.metadata = new Map();
        this.pages = new Map();
        this.pagination = {
            currentPage: 1,
            perPage: 0,
            total: 0,
            lastPage: 0,
            data: []
        };
        /**
         * When the user navigates to a different page and return
         * we don't want to call `clearCache` on first time.
         */
        this.initial = false;
        /**
         * Proxy to the query loading
         */
        this.isLoading$ = this.query.selectLoading().pipe(delay(0));
        this.config = Object.assign(paginatorDefaults, config);
        const { startWith, cacheTimeout } = this.config;
        this.page = new BehaviorSubject(startWith);
        if (isObservable(cacheTimeout)) {
            this.clearCacheSubscription = cacheTimeout.subscribe(_ => this.clearCache());
        }
    }
    /**
     * Listen to page changes
     * @return {?}
     */
    get pageChanges() {
        return this.page.asObservable();
    }
    /**
     * Get the current page number
     * @return {?}
     */
    get currentPage() {
        return this.pagination.currentPage;
    }
    /**
     * Check if current page is the first one
     * @return {?}
     */
    get isFirst() {
        return this.currentPage === 1;
    }
    /**
     * Check if current page is the last one
     * @return {?}
     */
    get isLast() {
        return this.currentPage === this.pagination.lastPage;
    }
    /**
     * Whether to generate an array of pages for *ngFor
     * [1, 2, 3, 4]
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    withControls() {
        (/** @type {?} */ (this)).config.pagesControls = true;
        return (/** @type {?} */ (this));
    }
    /**
     * Whether to generate the `from` and `to` keys
     * [1, 2, 3, 4]
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    withRange() {
        (/** @type {?} */ (this)).config.range = true;
        return (/** @type {?} */ (this));
    }
    /**
     * Set the loading state
     * @param {?=} value
     * @return {?}
     */
    setLoading(value = true) {
        this.getStore().setLoading(value);
    }
    /**
     * Update the pagination object and add the page
     * @param {?} response
     * @return {?}
     */
    update(response) {
        this.pagination = response;
        this.addPage(response.data);
    }
    /**
     *
     * Set the ids and add the page to store
     * @param {?} data
     * @return {?}
     */
    addPage(data) {
        this.pages.set(this.currentPage, { ids: data.map(entity => entity[this.getStore().idKey]) });
        this.getStore().add(data);
    }
    /**
     * Clear the cache.
     * @return {?}
     */
    clearCache() {
        if (!this.initial) {
            applyAction(() => {
                this.getStore().remove();
            }, { type: '@Pagination - Clear Cache' });
            this.pages = new Map();
            this.metadata = new Map();
        }
        this.initial = false;
    }
    /**
     * @param {?} page
     * @return {?}
     */
    clearPage(page) {
        this.pages.delete(page);
    }
    /**
     * Clear the cache timeout and optionally the pages
     * @param {?=} __0
     * @return {?}
     */
    destroy({ clearCache, currentPage } = {}) {
        if (this.clearCacheSubscription) {
            this.clearCacheSubscription.unsubscribe();
        }
        if (clearCache) {
            this.clearCache();
        }
        if (!isUndefined(currentPage)) {
            this.setPage(currentPage);
        }
        this.initial = true;
    }
    /**
     * Whether the provided page is active
     * @param {?} page
     * @return {?}
     */
    isPageActive(page) {
        return this.currentPage === page;
    }
    /**
     * Set the current page
     * @param {?} page
     * @return {?}
     */
    setPage(page) {
        if (page !== this.currentPage || !this.hasPage(page)) {
            this.page.next((this.pagination.currentPage = page));
        }
    }
    /**
     * Increment current page
     * @return {?}
     */
    nextPage() {
        if (this.currentPage !== this.pagination.lastPage) {
            this.setPage(this.pagination.currentPage + 1);
        }
    }
    /**
     * Decrement current page
     * @return {?}
     */
    prevPage() {
        if (this.pagination.currentPage > 1) {
            this.setPage(this.pagination.currentPage - 1);
        }
    }
    /**
     * Set current page to last
     * @return {?}
     */
    setLastPage() {
        this.setPage(this.pagination.lastPage);
    }
    /**
     * Set current page to first
     * @return {?}
     */
    setFirstPage() {
        this.setPage(1);
    }
    /**
     * Check if page exists in cache
     * @param {?} page
     * @return {?}
     */
    hasPage(page) {
        return this.pages.has(page);
    }
    /**
     * Get the current page if it's in cache, otherwise invoke the request
     * @param {?} req
     * @return {?}
     */
    getPage(req) {
        /** @type {?} */
        const page = this.pagination.currentPage;
        if (this.hasPage(page)) {
            return this.selectPage(page);
        }
        else {
            this.setLoading(true);
            return from(req()).pipe(switchMap((config) => {
                applyTransaction(() => {
                    this.setLoading(false);
                    this.update(config);
                });
                return this.selectPage(page);
            }));
        }
    }
    /**
     * @return {?}
     */
    getQuery() {
        return this.query;
    }
    /**
     * @return {?}
     */
    getFrom() {
        if (this.isFirst) {
            return 1;
        }
        return (this.currentPage - 1) * this.pagination.perPage + 1;
    }
    /**
     * @return {?}
     */
    getTo() {
        return this.currentPage * this.pagination.perPage;
    }
    /**
     * Select the page
     * @param {?} page
     * @return {?}
     */
    selectPage(page) {
        return this.query.selectAll({ asObject: true }).pipe(take(1), map(entities => {
            /** @type {?} */
            let response = Object.assign({}, this.pagination, { data: this.pages.get(page).ids.map(id => entities[id]) });
            const { range, pagesControls } = this.config;
            /** If no total - calc it */
            if (isNaN(this.pagination.total)) {
                if (response.lastPage === 1) {
                    response.total = response.data ? response.data.length : 0;
                }
                else {
                    response.total = response.perPage * response.lastPage;
                }
                this.pagination.total = response.total;
            }
            if (range) {
                response.from = this.getFrom();
                response.to = this.getTo();
            }
            if (pagesControls) {
                response.pageControls = generatePages(this.pagination.total, this.pagination.perPage);
            }
            return response;
        }));
    }
}
tslib_1.__decorate([
    action({ type: '@Pagination - New Page' }, true),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object]),
    tslib_1.__metadata("design:returntype", void 0)
], PaginatorPlugin.prototype, "update", null);
if (false) {
    /**
     * Save current filters, sorting, etc. in cache
     * @type {?}
     */
    PaginatorPlugin.prototype.metadata;
    /** @type {?} */
    PaginatorPlugin.prototype.page;
    /** @type {?} */
    PaginatorPlugin.prototype.pages;
    /** @type {?} */
    PaginatorPlugin.prototype.clearCacheSubscription;
    /** @type {?} */
    PaginatorPlugin.prototype.pagination;
    /**
     * When the user navigates to a different page and return
     * we don't want to call `clearCache` on first time.
     * @type {?}
     */
    PaginatorPlugin.prototype.initial;
    /**
     * Proxy to the query loading
     * @type {?}
     */
    PaginatorPlugin.prototype.isLoading$;
    /** @type {?} */
    PaginatorPlugin.prototype.query;
    /** @type {?} */
    PaginatorPlugin.prototype.config;
}
/**
 * Generate an array so we can ngFor them to navigate between pages
 * @param {?} total
 * @param {?} perPage
 * @return {?}
 */
function generatePages(total, perPage) {
    /** @type {?} */
    const len = Math.ceil(total / perPage);
    /** @type {?} */
    let arr = [];
    for (let i = 0; i < len; i++) {
        arr.push(i + 1);
    }
    return arr;
}
/**
 * backward compatibility
 * @type {?}
 */
export const Paginator = PaginatorPlugin;
//# sourceMappingURL=data:application/json;base64,