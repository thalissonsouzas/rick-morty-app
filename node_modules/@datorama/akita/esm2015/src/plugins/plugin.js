/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
import { filterNil } from '../api/operators';
import { toBoolean } from '../internal/utils';
import { getAkitaConfig } from '../api/config';
/**
 * @abstract
 * @template E, S
 */
export class AkitaPlugin {
    /**
     * @param {?} query
     * @param {?=} config
     */
    constructor(query, config) {
        this.query = query;
        if (config && config.resetFn) {
            if (getAkitaConfig().resettable) {
                this.onReset(config.resetFn);
            }
        }
    }
    /**
     * This method is responsible for getting access to the query.
     * @return {?}
     */
    getQuery() {
        return this.query;
    }
    /**
     * This method is responsible for getting access to the store.
     * @return {?}
     */
    getStore() {
        return this.getQuery().__store__;
    }
    /**
     * This method is responsible tells whether the plugin is entityBased or not.
     * @param {?} entityId
     * @return {?}
     */
    isEntityBased(entityId) {
        return toBoolean(entityId);
    }
    /**
     * This method is responsible for selecting the source; it can be the whole store or one entity.
     * @param {?} entityId
     * @return {?}
     */
    selectSource(entityId) {
        if (this.isEntityBased(entityId)) {
            return ((/** @type {?} */ (this.getQuery()))).selectEntity(entityId).pipe(filterNil);
        }
        return ((/** @type {?} */ (this.getQuery()))).select(state => state);
    }
    /**
     * @param {?} entityId
     * @return {?}
     */
    getSource(entityId) {
        if (this.isEntityBased(entityId)) {
            return ((/** @type {?} */ (this.getQuery()))).getEntity(entityId);
        }
        return this.getQuery().getSnapshot();
    }
    /**
     * This method is responsible for updating the store or one entity; it can be the whole store or one entity.
     * @param {?} newState
     * @param {?=} entityId
     * @return {?}
     */
    updateStore(newState, entityId) {
        if (this.isEntityBased(entityId)) {
            this.getStore().update(entityId, newState);
        }
        else {
            this.getStore().setState(state => (Object.assign({}, state, newState)));
        }
    }
    /**
     * Function to invoke upon reset
     * @param {?} fn
     * @return {?}
     */
    onReset(fn) {
        /** @type {?} */
        const original = this.getStore().reset;
        this.getStore().reset = (...params) => {
            /** It should run after the plugin destroy method */
            setTimeout(() => {
                original.apply(this.getStore(), params);
                fn();
            });
        };
    }
}
if (false) {
    /** @type {?} */
    AkitaPlugin.prototype.query;
    /**
     * This method is responsible for cleaning.
     * @abstract
     * @return {?}
     */
    AkitaPlugin.prototype.destroy = function () { };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGx1Z2luLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGRhdG9yYW1hL2FraXRhLyIsInNvdXJjZXMiOlsic3JjL3BsdWdpbnMvcGx1Z2luLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFHQSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDN0MsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBRTlDLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxlQUFlLENBQUM7Ozs7O0FBSS9DLE1BQU0sT0FBZ0IsV0FBVzs7Ozs7SUFDL0IsWUFBZ0MsS0FBb0IsRUFBRSxNQUErQjtRQUFyRCxVQUFLLEdBQUwsS0FBSyxDQUFlO1FBQ2xELElBQUksTUFBTSxJQUFJLE1BQU0sQ0FBQyxPQUFPLEVBQUU7WUFDNUIsSUFBSSxjQUFjLEVBQUUsQ0FBQyxVQUFVLEVBQUU7Z0JBQy9CLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDO2FBQzlCO1NBQ0Y7SUFDSCxDQUFDOzs7OztJQUdTLFFBQVE7UUFDaEIsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDO0lBQ3BCLENBQUM7Ozs7O0lBR1MsUUFBUTtRQUNoQixPQUFPLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQyxTQUFTLENBQUM7SUFDbkMsQ0FBQzs7Ozs7O0lBTVMsYUFBYSxDQUFDLFFBQVk7UUFDbEMsT0FBTyxTQUFTLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDN0IsQ0FBQzs7Ozs7O0lBR1MsWUFBWSxDQUFDLFFBQVk7UUFDakMsSUFBSSxJQUFJLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxFQUFFO1lBQ2hDLE9BQU8sQ0FBQyxtQkFBQSxJQUFJLENBQUMsUUFBUSxFQUFFLEVBQXFCLENBQUMsQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1NBQ3RGO1FBRUQsT0FBTyxDQUFDLG1CQUFBLElBQUksQ0FBQyxRQUFRLEVBQUUsRUFBWSxDQUFDLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDOUQsQ0FBQzs7Ozs7SUFFUyxTQUFTLENBQUMsUUFBWTtRQUM5QixJQUFJLElBQUksQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLEVBQUU7WUFDaEMsT0FBTyxDQUFDLG1CQUFBLElBQUksQ0FBQyxRQUFRLEVBQUUsRUFBcUIsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQztTQUNuRTtRQUVELE9BQU8sSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQ3ZDLENBQUM7Ozs7Ozs7SUFHUyxXQUFXLENBQUMsUUFBUSxFQUFFLFFBQVM7UUFDdkMsSUFBSSxJQUFJLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxFQUFFO1lBQ2hDLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLFFBQVEsQ0FBQyxDQUFDO1NBQzVDO2FBQU07WUFDTCxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsbUJBQU0sS0FBSyxFQUFLLFFBQVEsRUFBRyxDQUFDLENBQUM7U0FDaEU7SUFDSCxDQUFDOzs7Ozs7SUFLTyxPQUFPLENBQUMsRUFBWTs7Y0FDcEIsUUFBUSxHQUFHLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQyxLQUFLO1FBQ3RDLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxHQUFHLE1BQU0sRUFBRSxFQUFFO1lBQ3BDLG9EQUFvRDtZQUNwRCxVQUFVLENBQUMsR0FBRyxFQUFFO2dCQUNkLFFBQVEsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxFQUFFLE1BQU0sQ0FBQyxDQUFDO2dCQUN4QyxFQUFFLEVBQUUsQ0FBQztZQUNQLENBQUMsQ0FBQyxDQUFDO1FBQ0wsQ0FBQyxDQUFDO0lBQ0osQ0FBQztDQUNGOzs7SUFqRXVCLDRCQUE4Qjs7Ozs7O0lBbUJwRCxnREFBMEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBRdWVyeUVudGl0eSB9IGZyb20gJy4uL2FwaS9xdWVyeS1lbnRpdHknO1xuaW1wb3J0IHsgUXVlcnkgfSBmcm9tICcuLi9hcGkvcXVlcnknO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgZmlsdGVyTmlsIH0gZnJvbSAnLi4vYXBpL29wZXJhdG9ycyc7XG5pbXBvcnQgeyB0b0Jvb2xlYW4gfSBmcm9tICcuLi9pbnRlcm5hbC91dGlscyc7XG5pbXBvcnQgeyBJRCB9IGZyb20gJy4uL2FwaS90eXBlcyc7XG5pbXBvcnQgeyBnZXRBa2l0YUNvbmZpZyB9IGZyb20gJy4uL2FwaS9jb25maWcnO1xuXG5leHBvcnQgdHlwZSBRdWVyaWVzPEUsIFM+ID0gUXVlcnk8Uz4gfCBRdWVyeUVudGl0eTxTLCBFPjtcblxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEFraXRhUGx1Z2luPEUgPSBhbnksIFMgPSBhbnk+IHtcbiAgcHJvdGVjdGVkIGNvbnN0cnVjdG9yKHByb3RlY3RlZCBxdWVyeTogUXVlcmllczxFLCBTPiwgY29uZmlnPzogeyByZXNldEZuPzogRnVuY3Rpb24gfSkge1xuICAgIGlmIChjb25maWcgJiYgY29uZmlnLnJlc2V0Rm4pIHtcbiAgICAgIGlmIChnZXRBa2l0YUNvbmZpZygpLnJlc2V0dGFibGUpIHtcbiAgICAgICAgdGhpcy5vblJlc2V0KGNvbmZpZy5yZXNldEZuKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKiogVGhpcyBtZXRob2QgaXMgcmVzcG9uc2libGUgZm9yIGdldHRpbmcgYWNjZXNzIHRvIHRoZSBxdWVyeS4gKi9cbiAgcHJvdGVjdGVkIGdldFF1ZXJ5KCk6IFF1ZXJpZXM8RSwgUz4ge1xuICAgIHJldHVybiB0aGlzLnF1ZXJ5O1xuICB9XG5cbiAgLyoqIFRoaXMgbWV0aG9kIGlzIHJlc3BvbnNpYmxlIGZvciBnZXR0aW5nIGFjY2VzcyB0byB0aGUgc3RvcmUuICovXG4gIHByb3RlY3RlZCBnZXRTdG9yZSgpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRRdWVyeSgpLl9fc3RvcmVfXztcbiAgfVxuXG4gIC8qKiBUaGlzIG1ldGhvZCBpcyByZXNwb25zaWJsZSBmb3IgY2xlYW5pbmcuICovXG4gIHB1YmxpYyBhYnN0cmFjdCBkZXN0cm95KCk7XG5cbiAgLyoqIFRoaXMgbWV0aG9kIGlzIHJlc3BvbnNpYmxlIHRlbGxzIHdoZXRoZXIgdGhlIHBsdWdpbiBpcyBlbnRpdHlCYXNlZCBvciBub3QuICAqL1xuICBwcm90ZWN0ZWQgaXNFbnRpdHlCYXNlZChlbnRpdHlJZDogSUQpIHtcbiAgICByZXR1cm4gdG9Cb29sZWFuKGVudGl0eUlkKTtcbiAgfVxuXG4gIC8qKiBUaGlzIG1ldGhvZCBpcyByZXNwb25zaWJsZSBmb3Igc2VsZWN0aW5nIHRoZSBzb3VyY2U7IGl0IGNhbiBiZSB0aGUgd2hvbGUgc3RvcmUgb3Igb25lIGVudGl0eS4gKi9cbiAgcHJvdGVjdGVkIHNlbGVjdFNvdXJjZShlbnRpdHlJZDogSUQpOiBPYnNlcnZhYmxlPFMgfCBFPiB7XG4gICAgaWYgKHRoaXMuaXNFbnRpdHlCYXNlZChlbnRpdHlJZCkpIHtcbiAgICAgIHJldHVybiAodGhpcy5nZXRRdWVyeSgpIGFzIFF1ZXJ5RW50aXR5PFMsIEU+KS5zZWxlY3RFbnRpdHkoZW50aXR5SWQpLnBpcGUoZmlsdGVyTmlsKTtcbiAgICB9XG5cbiAgICByZXR1cm4gKHRoaXMuZ2V0UXVlcnkoKSBhcyBRdWVyeTxTPikuc2VsZWN0KHN0YXRlID0+IHN0YXRlKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBnZXRTb3VyY2UoZW50aXR5SWQ6IElEKTogUyB8IEUge1xuICAgIGlmICh0aGlzLmlzRW50aXR5QmFzZWQoZW50aXR5SWQpKSB7XG4gICAgICByZXR1cm4gKHRoaXMuZ2V0UXVlcnkoKSBhcyBRdWVyeUVudGl0eTxTLCBFPikuZ2V0RW50aXR5KGVudGl0eUlkKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5nZXRRdWVyeSgpLmdldFNuYXBzaG90KCk7XG4gIH1cblxuICAvKiogVGhpcyBtZXRob2QgaXMgcmVzcG9uc2libGUgZm9yIHVwZGF0aW5nIHRoZSBzdG9yZSBvciBvbmUgZW50aXR5OyBpdCBjYW4gYmUgdGhlIHdob2xlIHN0b3JlIG9yIG9uZSBlbnRpdHkuICovXG4gIHByb3RlY3RlZCB1cGRhdGVTdG9yZShuZXdTdGF0ZSwgZW50aXR5SWQ/KSB7XG4gICAgaWYgKHRoaXMuaXNFbnRpdHlCYXNlZChlbnRpdHlJZCkpIHtcbiAgICAgIHRoaXMuZ2V0U3RvcmUoKS51cGRhdGUoZW50aXR5SWQsIG5ld1N0YXRlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5nZXRTdG9yZSgpLnNldFN0YXRlKHN0YXRlID0+ICh7IC4uLnN0YXRlLCAuLi5uZXdTdGF0ZSB9KSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEZ1bmN0aW9uIHRvIGludm9rZSB1cG9uIHJlc2V0XG4gICAqL1xuICBwcml2YXRlIG9uUmVzZXQoZm46IEZ1bmN0aW9uKSB7XG4gICAgY29uc3Qgb3JpZ2luYWwgPSB0aGlzLmdldFN0b3JlKCkucmVzZXQ7XG4gICAgdGhpcy5nZXRTdG9yZSgpLnJlc2V0ID0gKC4uLnBhcmFtcykgPT4ge1xuICAgICAgLyoqIEl0IHNob3VsZCBydW4gYWZ0ZXIgdGhlIHBsdWdpbiBkZXN0cm95IG1ldGhvZCAqL1xuICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIG9yaWdpbmFsLmFwcGx5KHRoaXMuZ2V0U3RvcmUoKSwgcGFyYW1zKTtcbiAgICAgICAgZm4oKTtcbiAgICAgIH0pO1xuICAgIH07XG4gIH1cbn1cbiJdfQ==