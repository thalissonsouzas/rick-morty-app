/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
import { AkitaPlugin } from '../plugin';
import { debounceTime } from 'rxjs/operators';
import { __globalState } from '../../internal/global-state';
import { getValue, isString, setValue, toBoolean } from '../../internal/utils';
// Todo: Return  AbstractControl interface
/**
 * @template T
 */
export class PersistNgFormPlugin extends AkitaPlugin {
    /**
     * @param {?} query
     * @param {?=} factoryFnOrPath
     * @param {?=} params
     */
    constructor(query, factoryFnOrPath, params = {}) {
        super(query);
        this.query = query;
        this.factoryFnOrPath = factoryFnOrPath;
        this.params = params;
        this.params = Object.assign({ debounceTime: 300, formKey: 'akitaForm', emitEvent: false, arrControlFactory: v => this.builder.control(v) }, params);
        this.isRootKeys = toBoolean(factoryFnOrPath) === false;
        this.isKeyBased = isString(factoryFnOrPath) || this.isRootKeys;
    }
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} form
     * @param {?=} builder
     * @return {THIS}
     */
    setForm(form, builder) {
        (/** @type {?} */ (this)).form = form;
        (/** @type {?} */ (this)).builder = builder;
        (/** @type {?} */ (this)).activate();
        return (/** @type {?} */ (this));
    }
    /**
     * @param {?=} initialState
     * @return {?}
     */
    reset(initialState) {
        /** @type {?} */
        let value;
        if (initialState) {
            value = initialState;
        }
        else {
            value = this.isKeyBased ? this.initialValue : ((/** @type {?} */ (this))).factoryFnOrPath();
        }
        if (this.isKeyBased) {
            Object.keys(this.initialValue).forEach(stateKey => {
                /** @type {?} */
                const value = this.initialValue[stateKey];
                if (Array.isArray(value) && this.builder) {
                    /** @type {?} */
                    const formArray = this.form.controls[stateKey];
                    this.cleanArray(formArray);
                    value.forEach((v, i) => {
                        this.form.get(stateKey).insert(i, ((/** @type {?} */ (this.params.arrControlFactory)))(v));
                    });
                }
            });
        }
        this.form.patchValue(value, { emitEvent: this.params.emitEvent });
        /** @type {?} */
        const storeValue = this.isKeyBased ? setValue(this.getQuery().getSnapshot(), `${this.getStore().storeName}.${this.factoryFnOrPath}`, value) : { [this.params.formKey]: value };
        this.updateStore(storeValue);
    }
    /**
     * @param {?} control
     * @return {?}
     */
    cleanArray(control) {
        while (control.length !== 0) {
            control.removeAt(0);
        }
    }
    /**
     * @param {?} formValue
     * @param {?} root
     * @return {?}
     */
    resolveInitialValue(formValue, root) {
        if (!formValue)
            return;
        return Object.keys(formValue).reduce((acc, stateKey) => {
            /** @type {?} */
            const value = root[stateKey];
            if (Array.isArray(value) && this.builder) {
                /** @type {?} */
                const factory = this.params.arrControlFactory;
                this.cleanArray(this.form.get(stateKey));
                value.forEach((v, i) => {
                    this.form.get(stateKey).insert(i, ((/** @type {?} */ (factory)))(v));
                });
            }
            acc[stateKey] = root[stateKey];
            return acc;
        }, {});
    }
    /**
     * @return {?}
     */
    activate() {
        /** @type {?} */
        let path;
        if (this.isKeyBased) {
            if (this.isRootKeys) {
                this.initialValue = this.resolveInitialValue(this.form.value, this.getQuery().getSnapshot());
                this.form.patchValue(this.initialValue, { emitEvent: this.params.emitEvent });
            }
            else {
                path = `${this.getStore().storeName}.${this.factoryFnOrPath}`;
                /** @type {?} */
                const root = getValue(this.getQuery().getSnapshot(), path);
                this.initialValue = this.resolveInitialValue(root, root);
                this.form.patchValue(this.initialValue, { emitEvent: this.params.emitEvent });
            }
        }
        else {
            if (!((/** @type {?} */ (this.getQuery().getSnapshot())))[this.params.formKey]) {
                __globalState.setAction({ type: '@PersistNgFormPlugin activate' });
                this.updateStore({ [this.params.formKey]: ((/** @type {?} */ (this))).factoryFnOrPath() });
            }
            /** @type {?} */
            const value = this.getQuery().getSnapshot()[this.params.formKey];
            this.form.patchValue(value);
        }
        this.formChanges = this.form.valueChanges.pipe(debounceTime(this.params.debounceTime)).subscribe(value => {
            __globalState.setAction({ type: '@PersistForm - Update' });
            /** @type {?} */
            let newState;
            if (this.isKeyBased) {
                if (this.isRootKeys) {
                    newState = state => (Object.assign({}, state, value));
                }
                else {
                    newState = state => setValue(state, path, value);
                }
            }
            else {
                newState = () => ({ [this.params.formKey]: value });
            }
            this.updateStore(newState(this.getQuery().getSnapshot()));
        });
    }
    /**
     * @return {?}
     */
    destroy() {
        this.formChanges && this.formChanges.unsubscribe();
        this.form = null;
        this.builder = null;
    }
}
if (false) {
    /** @type {?} */
    PersistNgFormPlugin.prototype.formChanges;
    /** @type {?} */
    PersistNgFormPlugin.prototype.isRootKeys;
    /** @type {?} */
    PersistNgFormPlugin.prototype.form;
    /** @type {?} */
    PersistNgFormPlugin.prototype.isKeyBased;
    /** @type {?} */
    PersistNgFormPlugin.prototype.initialValue;
    /** @type {?} */
    PersistNgFormPlugin.prototype.builder;
    /** @type {?} */
    PersistNgFormPlugin.prototype.query;
    /** @type {?} */
    PersistNgFormPlugin.prototype.factoryFnOrPath;
    /** @type {?} */
    PersistNgFormPlugin.prototype.params;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGVyc2lzdC1uZy1mb3JtLXBsdWdpbi5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BkYXRvcmFtYS9ha2l0YS8iLCJzb3VyY2VzIjpbInNyYy9wbHVnaW5zL3BlcnNpc3QtZm9ybS9wZXJzaXN0LW5nLWZvcm0tcGx1Z2luLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBR3hDLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUM5QyxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFDNUQsT0FBTyxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFLFNBQVMsRUFBRSxNQUFNLHNCQUFzQixDQUFDOzs7OztBQXdCL0UsTUFBTSxPQUFPLG1CQUE2QixTQUFRLFdBQVc7Ozs7OztJQVEzRCxZQUFzQixLQUFpQixFQUFVLGVBQW1DLEVBQVUsU0FBNEIsRUFBRTtRQUMxSCxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7UUFETyxVQUFLLEdBQUwsS0FBSyxDQUFZO1FBQVUsb0JBQWUsR0FBZixlQUFlLENBQW9CO1FBQVUsV0FBTSxHQUFOLE1BQU0sQ0FBd0I7UUFFMUgsSUFBSSxDQUFDLE1BQU0saUJBQVEsRUFBRSxZQUFZLEVBQUUsR0FBRyxFQUFFLE9BQU8sRUFBRSxXQUFXLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxpQkFBaUIsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUssTUFBTSxDQUFFLENBQUM7UUFDL0ksSUFBSSxDQUFDLFVBQVUsR0FBRyxTQUFTLENBQUMsZUFBZSxDQUFDLEtBQUssS0FBSyxDQUFDO1FBQ3ZELElBQUksQ0FBQyxVQUFVLEdBQUcsUUFBUSxDQUFDLGVBQWUsQ0FBQyxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUM7SUFDakUs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O1lBQ1osSUFBSSxJQUFJLENBQUMsVUFBVSxFQUFFO2dCQUNuQixJQUFJLElBQUksQ0FBQyxVQUFVLEVBQUU7b0JBQ25CLFFBQVEsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDLG1CQUFNLEtBQUssRUFBSyxLQUFLLEVBQUcsQ0FBQztpQkFDOUM7cUJBQU07b0JBQ0wsUUFBUSxHQUFHLEtBQUssQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRSxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUM7aUJBQ2xEO2FBQ0Y7aUJBQU07Z0JBQ0wsUUFBUSxHQUFHLEdBQUcsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQzthQUNyRDtZQUNELElBQUksQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDNUQsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDOzs7O0lBRUQsT0FBTztRQUNMLElBQUksQ0FBQyxXQUFXLElBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUNuRCxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztRQUNqQixJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQztJQUN0QixDQUFDO0NBQ0Y7OztJQWpIQywwQ0FBMEI7O0lBQzFCLHlDQUE0Qjs7SUFDNUIsbUNBQTRCOztJQUM1Qix5Q0FBNEI7O0lBQzVCLDJDQUFxQjs7SUFDckIsc0NBQWdCOztJQUVKLG9DQUEyQjs7SUFBRSw4Q0FBMkM7O0lBQUUscUNBQXNDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWtpdGFQbHVnaW4gfSBmcm9tICcuLi9wbHVnaW4nO1xuaW1wb3J0IHsgUXVlcnkgfSBmcm9tICcuLi8uLi9hcGkvcXVlcnknO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgU3Vic2NyaXB0aW9uIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBkZWJvdW5jZVRpbWUgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBfX2dsb2JhbFN0YXRlIH0gZnJvbSAnLi4vLi4vaW50ZXJuYWwvZ2xvYmFsLXN0YXRlJztcbmltcG9ydCB7IGdldFZhbHVlLCBpc1N0cmluZywgc2V0VmFsdWUsIHRvQm9vbGVhbiB9IGZyb20gJy4uLy4uL2ludGVybmFsL3V0aWxzJztcblxuZXhwb3J0IHR5cGUgRm9ybUdyb3VwTGlrZSA9IHtcbiAgcGF0Y2hWYWx1ZTogRnVuY3Rpb247XG4gIHNldFZhbHVlOiBGdW5jdGlvbjtcbiAgdmFsdWU6IGFueTtcbiAgZ2V0OiBGdW5jdGlvbjtcbiAgdmFsdWVDaGFuZ2VzOiBPYnNlcnZhYmxlPGFueT47XG4gIGNvbnRyb2xzOiBhbnk7XG59O1xuXG5leHBvcnQgdHlwZSBBa2l0YUZvcm1Qcm9wPFQ+ID0ge1xuICBba2V5OiBzdHJpbmddOiBUO1xufTtcblxuZXhwb3J0IHR5cGUgUGVyc2lzdEZvcm1QYXJhbXMgPSB7XG4gIGRlYm91bmNlVGltZT86IG51bWJlcjtcbiAgZm9ybUtleT86IHN0cmluZztcbiAgZW1pdEV2ZW50PzogYm9vbGVhbjtcbiAgYXJyQ29udHJvbEZhY3Rvcnk/OiBBcnJheUNvbnRyb2xGYWN0b3J5O1xufTtcblxuZXhwb3J0IHR5cGUgQXJyYXlDb250cm9sRmFjdG9yeSA9ICh2YWx1ZTogYW55KSA9PiBhbnk7IC8vIFRvZG86IFJldHVybiAgQWJzdHJhY3RDb250cm9sIGludGVyZmFjZVxuXG5leHBvcnQgY2xhc3MgUGVyc2lzdE5nRm9ybVBsdWdpbjxUID0gYW55PiBleHRlbmRzIEFraXRhUGx1Z2luIHtcbiAgZm9ybUNoYW5nZXM6IFN1YnNjcmlwdGlvbjtcbiAgcHJpdmF0ZSBpc1Jvb3RLZXlzOiBib29sZWFuO1xuICBwcml2YXRlIGZvcm06IEZvcm1Hcm91cExpa2U7XG4gIHByaXZhdGUgaXNLZXlCYXNlZDogYm9vbGVhbjtcbiAgcHJpdmF0ZSBpbml0aWFsVmFsdWU7XG4gIHByaXZhdGUgYnVpbGRlcjtcblxuICBjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgcXVlcnk6IFF1ZXJ5PGFueT4sIHByaXZhdGUgZmFjdG9yeUZuT3JQYXRoPzogRnVuY3Rpb24gfCBzdHJpbmcsIHByaXZhdGUgcGFyYW1zOiBQZXJzaXN0Rm9ybVBhcmFtcyA9IHt9KSB7XG4gICAgc3VwZXIocXVlcnkpO1xuICAgIHRoaXMucGFyYW1zID0geyAuLi57IGRlYm91bmNlVGltZTogMzAwLCBmb3JtS2V5OiAnYWtpdGFGb3JtJywgZW1pdEV2ZW50OiBmYWxzZSwgYXJyQ29udHJvbEZhY3Rvcnk6IHYgPT4gdGhpcy5idWlsZGVyLmNvbnRyb2wodikgfSwgLi4ucGFyYW1zIH07XG4gICAgdGhpcy5pc1Jvb3RLZXlzID0gdG9Cb29sZWFuKGZhY3RvcnlGbk9yUGF0aCkgPT09IGZhbHNlO1xuICAgIHRoaXMuaXNLZXlCYXNlZCA9IGlzU3RyaW5nKGZhY3RvcnlGbk9yUGF0aCkgfHwgdGhpcy5pc1Jvb3RLZXlzO1xuICB9XG5cbiAgc2V0Rm9ybShmb3JtOiBGb3JtR3JvdXBMaWtlLCBidWlsZGVyPykge1xuICAgIHRoaXMuZm9ybSA9IGZvcm07XG4gICAgdGhpcy5idWlsZGVyID0gYnVpbGRlcjtcbiAgICB0aGlzLmFjdGl2YXRlKCk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICByZXNldChpbml0aWFsU3RhdGU/OiBUKSB7XG4gICAgbGV0IHZhbHVlO1xuICAgIGlmIChpbml0aWFsU3RhdGUpIHtcbiAgICAgIHZhbHVlID0gaW5pdGlhbFN0YXRlO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YWx1ZSA9IHRoaXMuaXNLZXlCYXNlZCA/IHRoaXMuaW5pdGlhbFZhbHVlIDogKHRoaXMgYXMgYW55KS5mYWN0b3J5Rm5PclBhdGgoKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5pc0tleUJhc2VkKSB7XG4gICAgICBPYmplY3Qua2V5cyh0aGlzLmluaXRpYWxWYWx1ZSkuZm9yRWFjaChzdGF0ZUtleSA9PiB7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gdGhpcy5pbml0aWFsVmFsdWVbc3RhdGVLZXldO1xuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkgJiYgdGhpcy5idWlsZGVyKSB7XG4gICAgICAgICAgY29uc3QgZm9ybUFycmF5ID0gdGhpcy5mb3JtLmNvbnRyb2xzW3N0YXRlS2V5XTtcbiAgICAgICAgICB0aGlzLmNsZWFuQXJyYXkoZm9ybUFycmF5KTtcbiAgICAgICAgICB2YWx1ZS5mb3JFYWNoKCh2LCBpKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmZvcm0uZ2V0KHN0YXRlS2V5KS5pbnNlcnQoaSwgKHRoaXMucGFyYW1zLmFyckNvbnRyb2xGYWN0b3J5IGFzIEZ1bmN0aW9uKSh2KSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgICB0aGlzLmZvcm0ucGF0Y2hWYWx1ZSh2YWx1ZSwgeyBlbWl0RXZlbnQ6IHRoaXMucGFyYW1zLmVtaXRFdmVudCB9KTtcblxuICAgIGNvbnN0IHN0b3JlVmFsdWUgPSB0aGlzLmlzS2V5QmFzZWQgPyBzZXRWYWx1ZSh0aGlzLmdldFF1ZXJ5KCkuZ2V0U25hcHNob3QoKSwgYCR7dGhpcy5nZXRTdG9yZSgpLnN0b3JlTmFtZX0uJHt0aGlzLmZhY3RvcnlGbk9yUGF0aH1gLCB2YWx1ZSkgOiB7IFt0aGlzLnBhcmFtcy5mb3JtS2V5XTogdmFsdWUgfTtcbiAgICB0aGlzLnVwZGF0ZVN0b3JlKHN0b3JlVmFsdWUpO1xuICB9XG5cbiAgcHJpdmF0ZSBjbGVhbkFycmF5KGNvbnRyb2wpIHtcbiAgICB3aGlsZSAoY29udHJvbC5sZW5ndGggIT09IDApIHtcbiAgICAgIGNvbnRyb2wucmVtb3ZlQXQoMCk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSByZXNvbHZlSW5pdGlhbFZhbHVlKGZvcm1WYWx1ZSwgcm9vdCkge1xuICAgIGlmICghZm9ybVZhbHVlKSByZXR1cm47XG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKGZvcm1WYWx1ZSkucmVkdWNlKChhY2MsIHN0YXRlS2V5KSA9PiB7XG4gICAgICBjb25zdCB2YWx1ZSA9IHJvb3Rbc3RhdGVLZXldO1xuICAgICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpICYmIHRoaXMuYnVpbGRlcikge1xuICAgICAgICBjb25zdCBmYWN0b3J5ID0gdGhpcy5wYXJhbXMuYXJyQ29udHJvbEZhY3Rvcnk7XG4gICAgICAgIHRoaXMuY2xlYW5BcnJheSh0aGlzLmZvcm0uZ2V0KHN0YXRlS2V5KSk7XG4gICAgICAgIHZhbHVlLmZvckVhY2goKHYsIGkpID0+IHtcbiAgICAgICAgICB0aGlzLmZvcm0uZ2V0KHN0YXRlS2V5KS5pbnNlcnQoaSwgKGZhY3RvcnkgYXMgRnVuY3Rpb24pKHYpKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBhY2Nbc3RhdGVLZXldID0gcm9vdFtzdGF0ZUtleV07XG4gICAgICByZXR1cm4gYWNjO1xuICAgIH0sIHt9KTtcbiAgfVxuXG4gIHByaXZhdGUgYWN0aXZhdGUoKSB7XG4gICAgbGV0IHBhdGg7XG5cbiAgICBpZiAodGhpcy5pc0tleUJhc2VkKSB7XG4gICAgICBpZiAodGhpcy5pc1Jvb3RLZXlzKSB7XG4gICAgICAgIHRoaXMuaW5pdGlhbFZhbHVlID0gdGhpcy5yZXNvbHZlSW5pdGlhbFZhbHVlKHRoaXMuZm9ybS52YWx1ZSwgdGhpcy5nZXRRdWVyeSgpLmdldFNuYXBzaG90KCkpO1xuICAgICAgICB0aGlzLmZvcm0ucGF0Y2hWYWx1ZSh0aGlzLmluaXRpYWxWYWx1ZSwgeyBlbWl0RXZlbnQ6IHRoaXMucGFyYW1zLmVtaXRFdmVudCB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBhdGggPSBgJHt0aGlzLmdldFN0b3JlKCkuc3RvcmVOYW1lfS4ke3RoaXMuZmFjdG9yeUZuT3JQYXRofWA7XG4gICAgICAgIGNvbnN0IHJvb3QgPSBnZXRWYWx1ZSh0aGlzLmdldFF1ZXJ5KCkuZ2V0U25hcHNob3QoKSwgcGF0aCk7XG4gICAgICAgIHRoaXMuaW5pdGlhbFZhbHVlID0gdGhpcy5yZXNvbHZlSW5pdGlhbFZhbHVlKHJvb3QsIHJvb3QpO1xuICAgICAgICB0aGlzLmZvcm0ucGF0Y2hWYWx1ZSh0aGlzLmluaXRpYWxWYWx1ZSwgeyBlbWl0RXZlbnQ6IHRoaXMucGFyYW1zLmVtaXRFdmVudCB9KTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKCEodGhpcy5nZXRRdWVyeSgpLmdldFNuYXBzaG90KCkgYXMgQWtpdGFGb3JtUHJvcDxUPilbdGhpcy5wYXJhbXMuZm9ybUtleV0pIHtcbiAgICAgICAgX19nbG9iYWxTdGF0ZS5zZXRBY3Rpb24oeyB0eXBlOiAnQFBlcnNpc3ROZ0Zvcm1QbHVnaW4gYWN0aXZhdGUnIH0pO1xuICAgICAgICB0aGlzLnVwZGF0ZVN0b3JlKHsgW3RoaXMucGFyYW1zLmZvcm1LZXldOiAodGhpcyBhcyBhbnkpLmZhY3RvcnlGbk9yUGF0aCgpIH0pO1xuICAgICAgfVxuXG4gICAgICBjb25zdCB2YWx1ZSA9IHRoaXMuZ2V0UXVlcnkoKS5nZXRTbmFwc2hvdCgpW3RoaXMucGFyYW1zLmZvcm1LZXldO1xuICAgICAgdGhpcy5mb3JtLnBhdGNoVmFsdWUodmFsdWUpO1xuICAgIH1cblxuICAgIHRoaXMuZm9ybUNoYW5nZXMgPSB0aGlzLmZvcm0udmFsdWVDaGFuZ2VzLnBpcGUoZGVib3VuY2VUaW1lKHRoaXMucGFyYW1zLmRlYm91bmNlVGltZSkpLnN1YnNjcmliZSh2YWx1ZSA9PiB7XG4gICAgICBfX2dsb2JhbFN0YXRlLnNldEFjdGlvbih7IHR5cGU6ICdAUGVyc2lzdEZvcm0gLSBVcGRhdGUnIH0pO1xuICAgICAgbGV0IG5ld1N0YXRlO1xuICAgICAgaWYgKHRoaXMuaXNLZXlCYXNlZCkge1xuICAgICAgICBpZiAodGhpcy5pc1Jvb3RLZXlzKSB7XG4gICAgICAgICAgbmV3U3RhdGUgPSBzdGF0ZSA9PiAoeyAuLi5zdGF0ZSwgLi4udmFsdWUgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbmV3U3RhdGUgPSBzdGF0ZSA9PiBzZXRWYWx1ZShzdGF0ZSwgcGF0aCwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBuZXdTdGF0ZSA9ICgpID0+ICh7IFt0aGlzLnBhcmFtcy5mb3JtS2V5XTogdmFsdWUgfSk7XG4gICAgICB9XG4gICAgICB0aGlzLnVwZGF0ZVN0b3JlKG5ld1N0YXRlKHRoaXMuZ2V0UXVlcnkoKS5nZXRTbmFwc2hvdCgpKSk7XG4gICAgfSk7XG4gIH1cblxuICBkZXN0cm95KCkge1xuICAgIHRoaXMuZm9ybUNoYW5nZXMgJiYgdGhpcy5mb3JtQ2hhbmdlcy51bnN1YnNjcmliZSgpO1xuICAgIHRoaXMuZm9ybSA9IG51bGw7XG4gICAgdGhpcy5idWlsZGVyID0gbnVsbDtcbiAgfVxufVxuIl19