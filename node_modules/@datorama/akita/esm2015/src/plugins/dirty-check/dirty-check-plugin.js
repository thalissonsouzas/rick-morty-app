/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
import { AkitaPlugin } from '../plugin';
import { QueryEntity } from '../../api/query-entity';
import { BehaviorSubject, Subject, combineLatest } from 'rxjs';
import { distinctUntilChanged, map, skip } from 'rxjs/operators';
import { coerceArray, isFunction, isUndefined, toBoolean } from '../../internal/utils';
import { __globalState } from '../../internal/global-state';
/** @type {?} */
export const dirtyCheckDefaultParams = {
    comparator: (head, current) => JSON.stringify(head) !== JSON.stringify(current)
};
/**
 * @param {?} nestedObj
 * @param {?} path
 * @return {?}
 */
export function getNestedPath(nestedObj, path) {
    /** @type {?} */
    const pathAsArray = path.split('.');
    return pathAsArray.reduce((obj, key) => (obj && obj[key] !== 'undefined' ? obj[key] : undefined), nestedObj);
}
/**
 * @template Entity, StoreState
 */
export class DirtyCheckPlugin extends AkitaPlugin {
    /**
     * @param {?} query
     * @param {?=} params
     * @param {?=} _entityId
     */
    constructor(query, params, _entityId) {
        super(query);
        this.query = query;
        this.params = params;
        this._entityId = _entityId;
        this.dirty = new BehaviorSubject(false);
        this.active = false;
        this._reset = new Subject();
        this.isDirty$ = this.dirty.asObservable().pipe(distinctUntilChanged());
        this.reset$ = this._reset.asObservable();
        this.params = Object.assign({}, dirtyCheckDefaultParams, params);
        if (this.params.watchProperty) {
            /** @type {?} */
            let watchProp = (/** @type {?} */ (coerceArray(this.params.watchProperty)));
            if (query instanceof QueryEntity && watchProp.includes('entities') && !watchProp.includes('ids')) {
                watchProp.push('ids');
            }
            this.params.watchProperty = watchProp;
        }
    }
    /**
     * @param {?=} params
     * @return {?}
     */
    reset(params = {}) {
        /** @type {?} */
        let currentValue = this.head;
        if (isFunction(params.updateFn)) {
            if (this.isEntityBased(this._entityId)) {
                currentValue = params.updateFn(this.head, ((/** @type {?} */ (this.getQuery()))).getEntity(this._entityId));
            }
            else {
                currentValue = params.updateFn(this.head, ((/** @type {?} */ (this.getQuery()))).getSnapshot());
            }
        }
        __globalState.setCustomAction({ type: `@DirtyCheck - Revert` });
        this.updateStore(currentValue, this._entityId);
        this._reset.next();
    }
    /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    setHead() {
        if (!(/** @type {?} */ (this)).active) {
            (/** @type {?} */ (this)).activate();
            (/** @type {?} */ (this)).active = true;
        }
        else {
            (/** @type {?} */ (this)).head = (/** @type {?} */ (this))._getHead();
        }
        (/** @type {?} */ (this)).updateDirtiness(false);
        return (/** @type {?} */ (this));
    }
    /**
     * @return {?}
     */
    isDirty() {
        return toBoolean(this.dirty.value);
    }
    /**
     * @return {?}
     */
    hasHead() {
        return toBoolean(this.getHead());
    }
    /**
     * @return {?}
     */
    destroy() {
        this.head = null;
        this.subscription && this.subscription.unsubscribe();
        this._reset && this._reset.complete();
    }
    /**
     * @param {?} path
     * @return {?}
     */
    isPathDirty(path) {
        /** @type {?} */
        const head = this.getHead();
        /** @type {?} */
        const current = ((/** @type {?} */ (this.getQuery()))).getSnapshot();
        /** @type {?} */
        const currentPathValue = getNestedPath(current, path);
        /** @type {?} */
        const headPathValue = getNestedPath(head, path);
        return this.params.comparator(currentPathValue, headPathValue);
    }
    /**
     * @return {?}
     */
    getHead() {
        return this.head;
    }
    /**
     * @return {?}
     */
    activate() {
        this.head = this._getHead();
        /**
         * if we are tracking specific properties select only the relevant ones
         * @type {?}
         */
        const source = this.params.watchProperty
            ? ((/** @type {?} */ (this.params.watchProperty))).map(prop => this.query.select(state => state[prop]).pipe(map(val => ({
                val,
                __akitaKey: prop
            }))))
            : [this.selectSource(this._entityId)];
        this.subscription = combineLatest(...source)
            .pipe(skip(1))
            .subscribe((currentState) => {
            if (isUndefined(this.head))
                return;
            /**
             * __akitaKey is used to determine if we are tracking a specific property or a store change
             * @type {?}
             */
            const isChange = currentState.some(state => {
                /** @type {?} */
                const head = state.__akitaKey ? this.head[(/** @type {?} */ (state.__akitaKey))] : this.head;
                /** @type {?} */
                const compareTo = state.__akitaKey ? state.val : state;
                return this.params.comparator(head, compareTo);
            });
            this.updateDirtiness(isChange);
        });
    }
    /**
     * @param {?} isDirty
     * @return {?}
     */
    updateDirtiness(isDirty) {
        this.dirty.next(isDirty);
    }
    /**
     * @return {?}
     */
    _getHead() {
        /** @type {?} */
        let head = this.getSource(this._entityId);
        if (this.params.watchProperty) {
            head = this.getWatchedValues((/** @type {?} */ (head)));
        }
        return head;
    }
    /**
     * @param {?} source
     * @return {?}
     */
    getWatchedValues(source) {
        return ((/** @type {?} */ (this.params.watchProperty))).reduce((watched, prop) => {
            watched[prop] = source[prop];
            return watched;
        }, (/** @type {?} */ ({})));
    }
}
if (false) {
    /** @type {?} */
    DirtyCheckPlugin.prototype.head;
    /** @type {?} */
    DirtyCheckPlugin.prototype.dirty;
    /** @type {?} */
    DirtyCheckPlugin.prototype.subscription;
    /** @type {?} */
    DirtyCheckPlugin.prototype.active;
    /** @type {?} */
    DirtyCheckPlugin.prototype._reset;
    /** @type {?} */
    DirtyCheckPlugin.prototype.isDirty$;
    /** @type {?} */
    DirtyCheckPlugin.prototype.reset$;
    /** @type {?} */
    DirtyCheckPlugin.prototype.query;
    /** @type {?} */
    DirtyCheckPlugin.prototype.params;
    /** @type {?} */
    DirtyCheckPlugin.prototype._entityId;
}
//# sourceMappingURL=data:application/json;base64,