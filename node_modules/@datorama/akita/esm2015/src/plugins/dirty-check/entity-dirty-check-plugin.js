/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
import { dirtyCheckDefaultParams, DirtyCheckPlugin, getNestedPath } from './dirty-check-plugin';
import { EntityCollectionPlugin } from '../entity-collection-plugin';
import { map, skip } from 'rxjs/operators';
/**
 * @template E, P
 */
export class EntityDirtyCheckPlugin extends EntityCollectionPlugin {
    /**
     * @param {?} query
     * @param {?=} params
     */
    constructor(query, params = {}) {
        super(query, params.entityIds);
        this.query = query;
        this.params = params;
        /**
         * @deprecated Use someDirty$ instead
         */
        this.isSomeDirty$ = this.query.select(state => state.entities).pipe(map((entities) => this.checkSomeDirty(entities)));
        this.someDirty$ = this.isSomeDirty$;
        this.someDirty = this.isSomeDirty;
        this.params = Object.assign({}, dirtyCheckDefaultParams, params);
        this.activate();
        this.selectIds()
            .pipe(skip(1))
            .subscribe(ids => {
            this.rebase(ids, { afterAdd: plugin => plugin.setHead() });
        });
    }
    /**
     * @template THIS
     * @this {THIS}
     * @param {?=} ids
     * @return {THIS}
     */
    setHead(ids) {
        (/** @type {?} */ (this)).forEachId(ids, e => e.setHead());
        return (/** @type {?} */ (this));
    }
    /**
     * @param {?} id
     * @return {?}
     */
    hasHead(id) {
        if (this.entities.has(id)) {
            /** @type {?} */
            const entity = this.getEntity(id);
            return entity.hasHead();
        }
        return false;
    }
    /**
     * @param {?=} ids
     * @param {?=} params
     * @return {?}
     */
    reset(ids, params = {}) {
        this.forEachId(ids, e => e.reset(params));
    }
    /**
     * @param {?} id
     * @param {?=} asObservable
     * @return {?}
     */
    isDirty(id, asObservable = true) {
        if (this.entities.has(id)) {
            /** @type {?} */
            const entity = this.getEntity(id);
            return asObservable ? entity.isDirty$ : entity.isDirty();
        }
        return false;
    }
    /**
     * @deprecated Use someDirty() instead
     * @return {?}
     */
    isSomeDirty() {
        /** @type {?} */
        const entities = this.query.getAll({ asObject: true });
        return this.checkSomeDirty(entities);
    }
    /**
     * @param {?} id
     * @param {?} path
     * @return {?}
     */
    isPathDirty(id, path) {
        if (this.entities.has(id)) {
            /** @type {?} */
            const head = ((/** @type {?} */ (this.getEntity(id)))).getHead();
            /** @type {?} */
            const current = this.query.getEntity(id);
            /** @type {?} */
            const currentPathValue = getNestedPath(current, path);
            /** @type {?} */
            const headPathValue = getNestedPath(head, path);
            return this.params.comparator(currentPathValue, headPathValue);
        }
        return null;
    }
    /**
     * @param {?=} ids
     * @return {?}
     */
    destroy(ids) {
        this.forEachId(ids, e => e.destroy());
    }
    /**
     * @param {?} id
     * @return {?}
     */
    instantiatePlugin(id) {
        return (/** @type {?} */ (new DirtyCheckPlugin(this.query, this.params, id)));
    }
    /**
     * @param {?} entities
     * @return {?}
     */
    checkSomeDirty(entities) {
        /** @type {?} */
        const entitiesIds = this.resolvedIds();
        for (const id of entitiesIds) {
            /** @type {?} */
            const dirty = this.params.comparator(((/** @type {?} */ (this.getEntity(id)))).getHead(), entities[id]);
            if (dirty) {
                return true;
            }
        }
        return false;
    }
}
if (false) {
    /**
     * @deprecated Use someDirty$ instead
     * @type {?}
     */
    EntityDirtyCheckPlugin.prototype.isSomeDirty$;
    /** @type {?} */
    EntityDirtyCheckPlugin.prototype.someDirty$;
    /** @type {?} */
    EntityDirtyCheckPlugin.prototype.someDirty;
    /** @type {?} */
    EntityDirtyCheckPlugin.prototype.query;
    /** @type {?} */
    EntityDirtyCheckPlugin.prototype.params;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW50aXR5LWRpcnR5LWNoZWNrLXBsdWdpbi5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BkYXRvcmFtYS9ha2l0YS8iLCJzb3VyY2VzIjpbInNyYy9wbHVnaW5zL2RpcnR5LWNoZWNrL2VudGl0eS1kaXJ0eS1jaGVjay1wbHVnaW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUNBLE9BQU8sRUFFTCx1QkFBdUIsRUFDdkIsZ0JBQWdCLEVBRWhCLGFBQWEsRUFDZCxNQUFNLHNCQUFzQixDQUFDO0FBRTlCLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBQ3JFLE9BQU8sRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7Ozs7QUFRM0MsTUFBTSxPQUFPLHNCQUF5RixTQUFRLHNCQUE0Qjs7Ozs7SUFTeEksWUFBc0IsS0FBMEIsRUFBbUIsU0FBd0MsRUFBRTtRQUMzRyxLQUFLLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQztRQURYLFVBQUssR0FBTCxLQUFLLENBQXFCO1FBQW1CLFdBQU0sR0FBTixNQUFNLENBQW9DOzs7O1FBTDdHLGlCQUFZLEdBQXdCLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxRQUFhLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBRTNJLGVBQVUsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDO1FBQy9CLGNBQVMsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDO1FBSTNCLElBQUksQ0FBQyxNQUFNLHFCQUFRLHVCQUF1QixFQUFLLE1BQU0sQ0FBRSxDQUFDO1FBQ3hELElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUNoQixJQUFJLENBQUMsU0FBUyxFQUFFO2FB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QUssQ0FBQztJQUNoRSxDQUFDOzs7OztJQUVPLGNBQWMsQ0FBQyxRQUFvQjs7Y0FDbkMsV0FBVyxHQUFHLElBQUksQ0FBQyxXQUFXLEVBQUU7UUFDdEMsS0FBSyxNQUFNLEVBQUUsSUFBSSxXQUFXLEVBQUU7O2tCQUN0QixLQUFLLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQyxtQkFBQSxJQUFJLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxFQUFPLENBQUMsQ0FBQyxPQUFPLEVBQUUsRUFBRSxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDekYsSUFBSSxLQUFLLEVBQUU7Z0JBQ1QsT0FBTyxJQUFJLENBQUM7YUFDYjtTQUNGO1FBQ0QsT0FBTyxLQUFLLENBQUM7SUFDZixDQUFDO0NBQ0Y7Ozs7OztJQXJGQyw4Q0FBMkk7O0lBRTNJLDRDQUErQjs7SUFDL0IsMkNBQTZCOztJQUVqQix1Q0FBb0M7O0lBQUUsd0NBQTJEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSGFzaE1hcCwgSUQsIElEUyB9IGZyb20gJy4uLy4uL2FwaS90eXBlcyc7XG5pbXBvcnQge1xuICBEaXJ0eUNoZWNrQ29tcGFyYXRvcixcbiAgZGlydHlDaGVja0RlZmF1bHRQYXJhbXMsXG4gIERpcnR5Q2hlY2tQbHVnaW4sXG4gIERpcnR5Q2hlY2tSZXNldFBhcmFtcyxcbiAgZ2V0TmVzdGVkUGF0aFxufSBmcm9tICcuL2RpcnR5LWNoZWNrLXBsdWdpbic7XG5pbXBvcnQgeyBRdWVyeUVudGl0eSB9IGZyb20gJy4uLy4uL2FwaS9xdWVyeS1lbnRpdHknO1xuaW1wb3J0IHsgRW50aXR5Q29sbGVjdGlvblBsdWdpbiB9IGZyb20gJy4uL2VudGl0eS1jb2xsZWN0aW9uLXBsdWdpbic7XG5pbXBvcnQgeyBtYXAsIHNraXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5cbmV4cG9ydCB0eXBlIERpcnR5Q2hlY2tDb2xsZWN0aW9uUGFyYW1zPEU+ID0ge1xuICBjb21wYXJhdG9yPzogRGlydHlDaGVja0NvbXBhcmF0b3I8RT47XG4gIGVudGl0eUlkcz86IElEIHwgSURbXTtcbn07XG5cbmV4cG9ydCBjbGFzcyBFbnRpdHlEaXJ0eUNoZWNrUGx1Z2luPEUsIFAgZXh0ZW5kcyBEaXJ0eUNoZWNrUGx1Z2luPEUsIGFueT4gPSBEaXJ0eUNoZWNrUGx1Z2luPEUsIGFueT4+IGV4dGVuZHMgRW50aXR5Q29sbGVjdGlvblBsdWdpbjxFLCBQPiB7XG4gIC8qKlxuICAgKiBAZGVwcmVjYXRlZCBVc2Ugc29tZURpcnR5JCBpbnN0ZWFkXG4gICAqL1xuICBpc1NvbWVEaXJ0eSQ6IE9ic2VydmFibGU8Ym9vbGVhbj4gPSB0aGlzLnF1ZXJ5LnNlbGVjdChzdGF0ZSA9PiBzdGF0ZS5lbnRpdGllcykucGlwZShtYXAoKGVudGl0aWVzOiBhbnkpID0+IHRoaXMuY2hlY2tTb21lRGlydHkoZW50aXRpZXMpKSk7XG5cbiAgc29tZURpcnR5JCA9IHRoaXMuaXNTb21lRGlydHkkO1xuICBzb21lRGlydHkgPSB0aGlzLmlzU29tZURpcnR5O1xuXG4gIGNvbnN0cnVjdG9yKHByb3RlY3RlZCBxdWVyeTogUXVlcnlFbnRpdHk8YW55LCBFPiwgcHJpdmF0ZSByZWFkb25seSBwYXJhbXM6IERpcnR5Q2hlY2tDb2xsZWN0aW9uUGFyYW1zPEU+ID0ge30pIHtcbiAgICBzdXBlcihxdWVyeSwgcGFyYW1zLmVudGl0eUlkcyk7XG4gICAgdGhpcy5wYXJhbXMgPSB7IC4uLmRpcnR5Q2hlY2tEZWZhdWx0UGFyYW1zLCAuLi5wYXJhbXMgfTtcbiAgICB0aGlzLmFjdGl2YXRlKCk7XG4gICAgdGhpcy5zZWxlY3RJZHMoKVxuICAgICAgLnBpcGUoc2tpcCgxKSlcbiAgICAgIC5zdWJzY3JpYmUoaWRzID0+IHtcbiAgICAgICAgdGhpcy5yZWJhc2UoaWRzLCB7IGFmdGVyQWRkOiBwbHVnaW4gPT4gcGx1Z2luLnNldEhlYWQoKSB9KTtcbiAgICAgIH0pO1xuICB9XG5cbiAgc2V0SGVhZChpZHM/OiBJRFMpIHtcbiAgICB0aGlzLmZvckVhY2hJZChpZHMsIGUgPT4gZS5zZXRIZWFkKCkpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgaGFzSGVhZChpZDogSUQpOiBib29sZWFuIHtcbiAgICBpZiAodGhpcy5lbnRpdGllcy5oYXMoaWQpKSB7XG4gICAgICBjb25zdCBlbnRpdHkgPSB0aGlzLmdldEVudGl0eShpZCk7XG4gICAgICByZXR1cm4gZW50aXR5Lmhhc0hlYWQoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXNldChpZHM/OiBJRFMsIHBhcmFtczogRGlydHlDaGVja1Jlc2V0UGFyYW1zID0ge30pIHtcbiAgICB0aGlzLmZvckVhY2hJZChpZHMsIGUgPT4gZS5yZXNldChwYXJhbXMpKTtcbiAgfVxuXG4gIGlzRGlydHkoaWQ6IElEKTogT2JzZXJ2YWJsZTxib29sZWFuPjtcbiAgaXNEaXJ0eShpZDogSUQsIGFzT2JzZXJ2YWJsZTogdHJ1ZSk6IE9ic2VydmFibGU8Ym9vbGVhbj47XG4gIGlzRGlydHkoaWQ6IElELCBhc09ic2VydmFibGU6IGZhbHNlKTogYm9vbGVhbjtcbiAgaXNEaXJ0eShpZDogSUQsIGFzT2JzZXJ2YWJsZSA9IHRydWUpOiBPYnNlcnZhYmxlPGJvb2xlYW4+IHwgYm9vbGVhbiB7XG4gICAgaWYgKHRoaXMuZW50aXRpZXMuaGFzKGlkKSkge1xuICAgICAgY29uc3QgZW50aXR5ID0gdGhpcy5nZXRFbnRpdHkoaWQpO1xuICAgICAgcmV0dXJuIGFzT2JzZXJ2YWJsZSA/IGVudGl0eS5pc0RpcnR5JCA6IGVudGl0eS5pc0RpcnR5KCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLyoqXG4gICAqIEBkZXByZWNhdGVkIFVzZSBzb21lRGlydHkoKSBpbnN0ZWFkXG4gICAqL1xuICBpc1NvbWVEaXJ0eSgpOiBib29sZWFuIHtcbiAgICBjb25zdCBlbnRpdGllcyA9IHRoaXMucXVlcnkuZ2V0QWxsKHsgYXNPYmplY3Q6IHRydWUgfSk7XG4gICAgcmV0dXJuIHRoaXMuY2hlY2tTb21lRGlydHkoZW50aXRpZXMpO1xuICB9XG5cbiAgaXNQYXRoRGlydHkoaWQ6IElELCBwYXRoOiBzdHJpbmcpIHtcbiAgICBpZiAodGhpcy5lbnRpdGllcy5oYXMoaWQpKSB7XG4gICAgICBjb25zdCBoZWFkID0gKHRoaXMuZ2V0RW50aXR5KGlkKSBhcyBhbnkpLmdldEhlYWQoKTtcbiAgICAgIGNvbnN0IGN1cnJlbnQgPSB0aGlzLnF1ZXJ5LmdldEVudGl0eShpZCk7XG4gICAgICBjb25zdCBjdXJyZW50UGF0aFZhbHVlID0gZ2V0TmVzdGVkUGF0aChjdXJyZW50LCBwYXRoKTtcbiAgICAgIGNvbnN0IGhlYWRQYXRoVmFsdWUgPSBnZXROZXN0ZWRQYXRoKGhlYWQsIHBhdGgpO1xuXG4gICAgICByZXR1cm4gdGhpcy5wYXJhbXMuY29tcGFyYXRvcihjdXJyZW50UGF0aFZhbHVlLCBoZWFkUGF0aFZhbHVlKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGRlc3Ryb3koaWRzPzogSURTKSB7XG4gICAgdGhpcy5mb3JFYWNoSWQoaWRzLCBlID0+IGUuZGVzdHJveSgpKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBpbnN0YW50aWF0ZVBsdWdpbihpZDogSUQpOiBQIHtcbiAgICByZXR1cm4gbmV3IERpcnR5Q2hlY2tQbHVnaW4odGhpcy5xdWVyeSwgdGhpcy5wYXJhbXMsIGlkKSBhcyBQO1xuICB9XG5cbiAgcHJpdmF0ZSBjaGVja1NvbWVEaXJ0eShlbnRpdGllczogSGFzaE1hcDxFPik6IGJvb2xlYW4ge1xuICAgIGNvbnN0IGVudGl0aWVzSWRzID0gdGhpcy5yZXNvbHZlZElkcygpO1xuICAgIGZvciAoY29uc3QgaWQgb2YgZW50aXRpZXNJZHMpIHtcbiAgICAgIGNvbnN0IGRpcnR5ID0gdGhpcy5wYXJhbXMuY29tcGFyYXRvcigodGhpcy5nZXRFbnRpdHkoaWQpIGFzIGFueSkuZ2V0SGVhZCgpLCBlbnRpdGllc1tpZF0pO1xuICAgICAgaWYgKGRpcnR5KSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cbiJdfQ==