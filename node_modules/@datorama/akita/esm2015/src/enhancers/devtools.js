/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
import { __stores__, rootDispatcher } from '../api/store';
import { __globalState } from '../internal/global-state';
import { isDefined } from '../internal/utils';
/** @type {?} */
let rootDispatcherSub;
/** @type {?} */
let devtoolsSub;
/**
 * @param {?=} ngZoneOrOptions
 * @param {?=} options
 * @return {?}
 */
export function akitaDevtools(ngZoneOrOptions, options = {}) {
    if (!((/** @type {?} */ (window))).__REDUX_DEVTOOLS_EXTENSION__) {
        return;
    }
    rootDispatcherSub && rootDispatcherSub.unsubscribe();
    devtoolsSub && devtoolsSub();
    /** @type {?} */
    const isAngular = ngZoneOrOptions && ngZoneOrOptions['run'];
    if (!isAngular) {
        ngZoneOrOptions = ngZoneOrOptions || {};
        ((/** @type {?} */ (ngZoneOrOptions))).run = cb => cb();
        options = (/** @type {?} */ (ngZoneOrOptions));
    }
    /** @type {?} */
    const defaultOptions = { name: 'Akita' };
    /** @type {?} */
    const merged = Object.assign({}, defaultOptions, options);
    /** @type {?} */
    const devTools = ((/** @type {?} */ (window))).__REDUX_DEVTOOLS_EXTENSION__.connect(merged);
    /** @type {?} */
    let appState = {};
    rootDispatcherSub = rootDispatcher.subscribe(action => {
        if (action.type === 1 /* DELETE_STORE */) {
            /** @type {?} */
            const storeName = action.payload.storeName;
            delete appState[storeName];
            devTools.send({ type: `[${storeName}] - Delete Store` }, appState);
        }
        if (action.type === 2 /* NEW_STATE */) {
            if (__globalState.skipAction) {
                __globalState.setSkipAction(false);
                return;
            }
            appState = Object.assign({}, appState, { [action.payload.name]: __stores__[action.payload.name]._value() });
            const { type, entityId } = __globalState.currentAction;
            /** @type {?} */
            const storeName = capitalize(action.payload.name);
            /** @type {?} */
            let msg = isDefined(entityId) ? `[${storeName}] - ${type} (ids: ${entityId})` : `[${storeName}] - ${type}`;
            if (options.logTrace) {
                console.group(msg);
                console.trace();
                console.groupEnd();
            }
            devTools.send({ type: msg, transaction: __globalState.currentT.map(t => t.type) }, appState);
        }
    });
    devtoolsSub = devTools.subscribe(message => {
        if (message.type === 'ACTION') {
            const [storeName] = message.payload.split('.');
            if (__stores__[storeName]) {
                ((/** @type {?} */ (ngZoneOrOptions))).run(() => {
                    /** @type {?} */
                    const funcCall = message.payload.replace(storeName, `this['${storeName}']`);
                    try {
                        new Function(`${funcCall}`).call(__stores__);
                    }
                    catch (e) {
                        console.warn('Unknown Method ☹️');
                    }
                });
            }
        }
        if (message.type === 'DISPATCH') {
            /** @type {?} */
            const payloadType = message.payload.type;
            if (payloadType === 'COMMIT') {
                devTools.init(appState);
                return;
            }
            if (message.state) {
                /** @type {?} */
                const rootState = JSON.parse(message.state);
                for (let i = 0, keys = Object.keys(rootState); i < keys.length; i++) {
                    /** @type {?} */
                    const storeName = keys[i];
                    if (__stores__[storeName]) {
                        ((/** @type {?} */ (ngZoneOrOptions))).run(() => {
                            __stores__[storeName].setState(() => rootState[storeName], false);
                        });
                    }
                }
            }
        }
    });
}
/**
 * @param {?} string
 * @return {?}
 */
function capitalize(string) {
    return string && string.charAt(0).toUpperCase() + string.slice(1);
}
//# sourceMappingURL=data:application/json;base64,