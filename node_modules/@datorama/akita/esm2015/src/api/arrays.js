/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
import { isObject } from '../internal/utils';
// https://github.com/georapbox/immutable-arrays
/**
 * Adds one or more elements to the end of an array by returning
 * a new array instead of mutating the original one.
 *
 * \@example
 * const originalArray = ['a', 'b', 'c', 'd', 'e'];
 * const resultArray = push(originalArray, 'f', 'g');
 * // -> originalArray ['a', 'b', 'c', 'd', 'e']
 * // -> resultArray ['a', 'b', 'c', 'd', 'e', 'f', 'g']
 * @template T
 * @param {?} array
 * @param {...?} elementN
 * @return {?}
 */
export function push(array, ...elementN) {
    return [...array, ...elementN];
}
/**
 * Deletes an element from an array by its index in the array.
 *
 * \@example
 * const originalArray = ['a', 'b', 'c', 'd', 'e'];
 * const resultArray = remove(originalArray, 2);
 * // -> originalArray ['a', 'b', 'c', 'd', 'e']
 * // -> resultArray ['a', 'b', 'd', 'e']
 * @template T
 * @param {?} array
 * @param {?} index
 * @return {?}
 */
export function remove(array, index) {
    return index >= 0 ? [...array.slice(0, index), ...array.slice(index + 1)] : [...array];
}
/**
 * Removes the last element from an array by returning
 * a new array instead of mutating the original one.
 *
 * \@example
 * const originalArray = ['a', 'b', 'c', 'd', 'e'];
 * const resultArray = pop(originalArray);
 * // -> originalArray ['a', 'b', 'c', 'd', 'e']
 * // -> resultArray ['a', 'b', 'c', 'd']
 * @template T
 * @param {?} array
 * @return {?}
 */
export function pop(array) {
    return array.slice(0, -1);
}
/**
 * Adds one or more elements to the beginning of an array.
 *
 * \@example
 * const originalArray = ['a', 'b', 'c', 'd', 'e'];
 * const resultArray = unshift(originalArray, 'f', 'g');
 * // -> originalArray ['a', 'b', 'c', 'd', 'e']
 * // -> resultArray ['f', 'g', 'a', 'b', 'c', 'd', 'e']
 * @template T
 * @param {?} array
 * @param {...?} elementN
 * @return {?}
 */
export function unshift(array, ...elementN) {
    return [...elementN, ...array];
}
/**
 * Sorts the elements of an array (not in place) and returns a sorted array.
 *
 * \@example
 * const numberArray = [20, 3, 4, 10, -3, 1, 0, 5];
 * const stringArray = ['Blue', 'Humpback', 'Beluga'];
 *
 * const resultArray = sort(numberArray, (a, b) => a - b);
 * // -> numberArray [20, 3, 4, 10, -3, 1, 0, 5]
 * // -> resultArray [-3, 0, 1, 3, 4, 5, 10, 20]
 *
 * const resultArray = sort(numberArray, (a, b) => b - a);
 * // -> numberArray [20, 3, 4, 10, -3, 1, 0, 5]
 * // -> resultArray [20, 10, 5, 4, 3, 1, 0, -3]
 *
 * const resultArray = sort(stringArray);
 * // -> stringArray ['Blue', 'Humpback', 'Beluga']
 * // -> resultArray ['Beluga', 'Blue', 'Humpback']
 *
 * const resultArray = sort(stringArray, (a, b) => a.toLowerCase() < b.toLowerCase());
 * // -> stringArray ['Blue', 'Humpback', 'Beluga']
 * // -> resultArray ['Humpback', 'Blue', 'Beluga']
 * @template T
 * @param {?} array
 * @param {?=} compareFunction
 * @return {?}
 */
export function sort(array, compareFunction) {
    return [...array].sort(compareFunction);
}
/**
 * Reverses an array (not in place).
 * The first array element becomes the last, and the last array element becomes the first.
 *
 * \@example
 * const originalArray = ['a', 'b', 'c', 'd', 'e'];
 * const resultArray = reverse(originalArray);
 * // -> originalArray ['a', 'b', 'c', 'd', 'e']
 * // -> resultArray ['e', 'd', 'c', 'b', 'a']
 * @template T
 * @param {?} array
 * @return {?}
 */
export function reverse(array) {
    return [...array].reverse();
}
/**
 * Swap items in the array
 *
 * \@example
 * const originalArray = ['a', 'b', 'c', 'd', 'e'];
 * const resultArray = swap(originalArray, 1, 4);
 * // -> originalArray ['a', 'b', 'c', 'd', 'e']
 * // -> resultArray ['a', 'e', 'c', 'd', 'b']
 * @template T
 * @param {?} array
 * @param {?} firstIndex
 * @param {?} secondIndex
 * @return {?}
 */
export function swap(array, firstIndex, secondIndex) {
    /** @type {?} */
    const results = array.slice();
    /** @type {?} */
    const firstItem = array[firstIndex];
    results[firstIndex] = array[secondIndex];
    results[secondIndex] = firstItem;
    return results;
}
/**
 * Update item in the array
 *
 * \@example
 * const originalArray = ['a', 'b', 'c', 'd', 'e'];
 * const resultArray = update(originalArray, 1, 'newItem');
 * // -> resultArray ['a', 'newItem', 'c', 'd', 'b']
 *
 * const originalArray = [{title: 1}, {title: 2}];
 * const resultArray = update(originalArray, originalArray[0], {title: 3});
 * // -> resultArray  [{title: 3}, {title: 2}];
 * @template T
 * @param {?} array
 * @param {?} indexOrItem
 * @param {?} updated
 * @return {?}
 */
export function update(array, indexOrItem, updated) {
    return array.map((current, idx) => {
        if (typeof indexOrItem === 'number' && idx === indexOrItem) {
            return updated;
        }
        if (isObject(indexOrItem) && ((/** @type {?} */ (indexOrItem))) === current) {
            return Object.assign({}, ((/** @type {?} */ (indexOrItem))), ((/** @type {?} */ (updated))));
        }
        return current;
    });
}
/**
 * Removes existing elements and/or adds new elements to an array.
 *
 * \@example
 * const originalArray = ['a', 'b', 'c', 'd', 'e'];
 * const resultArray = splice(originalArray, 0);
 * // -> originalArray ['a', 'b', 'c', 'd', 'e']
 * // -> resultArray []
 *
 * const originalArray = ['a', 'b', 'c', 'd', 'e'];
 * const resultArray = splice(originalArray, 0, 1);
 * // -> originalArray ['a', 'b', 'c', 'd', 'e']
 * // -> resultArray ['b', 'c', 'd', 'e']
 *
 * const originalArray = ['a', 'b', 'c', 'd', 'e'];
 * const resultArray = splice(originalArray, 0, 3);
 * // -> originalArray ['a', 'b', 'c', 'd', 'e']
 * // -> resultArray ['d', 'e']
 *
 * const originalArray = ['a', 'b', 'c', 'd', 'e'];
 * const resultArray = splice(originalArray, 0, originalArray.length);
 * // -> originalArray ['a', 'b', 'c', 'd', 'e']
 * // -> resultArray []
 *
 * const originalArray = ['a', 'b', 'c', 'd', 'e'];
 * const resultArray = splice(originalArray, 0, -3);
 * // -> originalArray ['a', 'b', 'c', 'd', 'e']
 * // -> resultArray ['a', 'b', 'c', 'd', 'e']
 *
 * const originalArray = ['a', 'b', 'c', 'd', 'e'];
 * const resultArray = splice(originalArray, 0, 0, 'lorem', 'ipsum');
 * // -> originalArray ['a', 'b', 'c', 'd', 'e']
 * // -> resultArray ['lorem', 'ipsum', 'a', 'b', 'c', 'd', 'e']
 *
 * const originalArray = ['a', 'b', 'c', 'd', 'e'];
 * const resultArray = splice(originalArray, originalArray.length, 0, 'lorem', 'ipsum');
 * // -> originalArray ['a', 'b', 'c', 'd', 'e']
 * // -> resultArray ['a', 'b', 'c', 'd', 'e', 'lorem', 'ipsum']
 *
 * const originalArray = ['a', 'b', 'c', 'd', 'e'];
 * const resultArray = splice(originalArray, 0, 2, 'lorem', 'ipsum');
 * // -> originalArray ['a', 'b', 'c', 'd', 'e']
 * // -> resultArray ['lorem', 'ipsum', 'c', 'd', 'e']
 *
 * const originalArray = ['a', 'b', 'c', 'd', 'e'];
 * const resultArray = splice(originalArray, originalArray.length - 2, 2, 'lorem', 'ipsum');
 * // -> originalArray ['a', 'b', 'c', 'd', 'e']
 * // -> resultArray ['a', 'b', 'c', 'lorem', 'ipsum']
 * @template T
 * @param {?} array
 * @param {?=} start
 * @param {?=} deleteCount
 * @param {...?} elementN
 * @return {?}
 */
export function splice(array, start = array.length, deleteCount = array.length - start, ...elementN) {
    return [...array.slice(0, start), ...elementN, ...array.slice(start + (deleteCount < 0 ? 0 : deleteCount))];
}
/**
 * @template T
 * @param {?} arr
 * @param {?} item
 * @return {?}
 */
export function toggle(arr, item) {
    return arr.indexOf(item) > -1 ? arr.filter(current => item !== current) : push(arr, item);
}
//# sourceMappingURL=data:application/json;base64,