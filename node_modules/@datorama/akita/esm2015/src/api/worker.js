/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
import { Observable } from 'rxjs';
/**
 * @param {?} object
 * @return {?}
 */
function serialize(object) {
    return JSON.stringify(object, function (key, value) {
        if (typeof value === 'function') {
            return value.toString();
        }
        return value;
    });
}
/**
 * @return {?}
 */
function createWorker() {
    /** @type {?} */
    const blob = new Blob([
        `self.onmessage = function(e) {

      function deserialize(str) {
        return JSON.parse(str || '', function(key, value) {
          if (value &&
            typeof value === "string" &&
            value.substr(0, 8) == "function") {
            var startBody = value.indexOf('{') + 1;
            var endBody = value.lastIndexOf('}');
            var startArgs = value.indexOf('(') + 1;
            var endArgs = value.indexOf(')');
            return new Function(value.substring(startArgs, endArgs), value.substring(startBody, endBody));
          }
          return value;
        });
      }

      var deserialized = deserialize(e.data);
      var mapped = deserialized.data.map(function(d) {
        return deserialized.factory(d);
      });

      self.postMessage(mapped);
    }`
    ], {
        type: 'text/javascript'
    });
    /** @type {?} */
    const url = URL.createObjectURL(blob);
    return new Worker(url);
}
/**
 * \@example
 *   const mockTodos = Array.from({length: 10000}, (_, x) => ({id: x}));
 *
 *   of(mockTodos).pipe(mapInWorker<Todo>(createTodo))
 *   .subscribe(res => console.log(res));
 * @template T
 * @param {?} factoryFn
 * @return {?}
 */
export function mapInWorker(factoryFn) {
    return function (source) {
        return new Observable(observer => {
            /** @type {?} */
            const worker = createWorker();
            worker.onmessage = function (e) {
                observer.next(e.data);
                observer.complete();
                worker.terminate();
            };
            worker.onerror = function (err) {
                observer.error(err);
                observer.complete();
                worker.terminate();
            };
            return source.subscribe(value => {
                /** @type {?} */
                const input = {
                    factory: factoryFn,
                    data: value
                };
                /** @type {?} */
                const serialized = serialize(input);
                worker.postMessage(serialized);
            });
        });
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid29ya2VyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGRhdG9yYW1hL2FraXRhLyIsInNvdXJjZXMiOlsic3JjL2FwaS93b3JrZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxNQUFNLENBQUM7Ozs7O0FBRWxDLFNBQVMsU0FBUyxDQUFDLE1BQU07SUFDdkIsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sRUFBRSxVQUFTLEdBQUcsRUFBRSxLQUFLO1FBQy9DLElBQUksT0FBTyxLQUFLLEtBQUssVUFBVSxFQUFFO1lBQy9CLE9BQU8sS0FBSyxDQUFDLFFBQVEsRUFBRSxDQUFDO1NBQ3pCO1FBQ0QsT0FBTyxLQUFLLENBQUM7SUFDZixDQUFDLENBQUMsQ0FBQztBQUNMLENBQUM7Ozs7QUFFRCxTQUFTLFlBQVk7O1VBQ2IsSUFBSSxHQUFHLElBQUksSUFBSSxDQUNuQjtRQUNFOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztNQXVCQTtLQUNELEVBQ0Q7UUFDRSxJQUFJLEVBQUUsaUJBQWlCO0tBQ3hCLENBQ0Y7O1VBRUssR0FBRyxHQUFHLEdBQUcsQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDO0lBQ3JDLE9BQU8sSUFBSSxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDekIsQ0FBQzs7Ozs7Ozs7Ozs7QUFTRCxNQUFNLFVBQVUsV0FBVyxDQUFJLFNBQW1CO0lBQ2hELE9BQU8sVUFBUyxNQUFNO1FBQ3BCLE9BQU8sSUFBSSxVQUFVLENBQUMsUUFBUSxDQUFDLEVBQUU7O2tCQUN6QixNQUFNLEdBQUcsWUFBWSxFQUFFO1lBRTdCLE1BQU0sQ0FBQyxTQUFTLEdBQUcsVUFBUyxDQUFDO2dCQUMzQixRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztnQkFDdEIsUUFBUSxDQUFDLFFBQVEsRUFBRSxDQUFDO2dCQUNwQixNQUFNLENBQUMsU0FBUyxFQUFFLENBQUM7WUFDckIsQ0FBQyxDQUFDO1lBRUYsTUFBTSxDQUFDLE9BQU8sR0FBRyxVQUFTLEdBQUc7Z0JBQzNCLFFBQVEsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7Z0JBQ3BCLFFBQVEsQ0FBQyxRQUFRLEVBQUUsQ0FBQztnQkFDcEIsTUFBTSxDQUFDLFNBQVMsRUFBRSxDQUFDO1lBQ3JCLENBQUMsQ0FBQztZQUVGLE9BQU8sTUFBTSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsRUFBRTs7c0JBQ3hCLEtBQUssR0FBRztvQkFDWixPQUFPLEVBQUUsU0FBUztvQkFDbEIsSUFBSSxFQUFFLEtBQUs7aUJBQ1o7O3NCQUNLLFVBQVUsR0FBRyxTQUFTLENBQUMsS0FBSyxDQUFDO2dCQUVuQyxNQUFNLENBQUMsV0FBVyxDQUFDLFVBQVUsQ0FBQyxDQUFDO1lBQ2pDLENBQUMsQ0FBQyxDQUFDO1FBQ0wsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUM7QUFDSixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuXG5mdW5jdGlvbiBzZXJpYWxpemUob2JqZWN0KSB7XG4gIHJldHVybiBKU09OLnN0cmluZ2lmeShvYmplY3QsIGZ1bmN0aW9uKGtleSwgdmFsdWUpIHtcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXR1cm4gdmFsdWUudG9TdHJpbmcoKTtcbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlV29ya2VyKCkge1xuICBjb25zdCBibG9iID0gbmV3IEJsb2IoXG4gICAgW1xuICAgICAgYHNlbGYub25tZXNzYWdlID0gZnVuY3Rpb24oZSkge1xuXG4gICAgICBmdW5jdGlvbiBkZXNlcmlhbGl6ZShzdHIpIHtcbiAgICAgICAgcmV0dXJuIEpTT04ucGFyc2Uoc3RyIHx8ICcnLCBmdW5jdGlvbihrZXksIHZhbHVlKSB7XG4gICAgICAgICAgaWYgKHZhbHVlICYmXG4gICAgICAgICAgICB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgJiZcbiAgICAgICAgICAgIHZhbHVlLnN1YnN0cigwLCA4KSA9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgIHZhciBzdGFydEJvZHkgPSB2YWx1ZS5pbmRleE9mKCd7JykgKyAxO1xuICAgICAgICAgICAgdmFyIGVuZEJvZHkgPSB2YWx1ZS5sYXN0SW5kZXhPZignfScpO1xuICAgICAgICAgICAgdmFyIHN0YXJ0QXJncyA9IHZhbHVlLmluZGV4T2YoJygnKSArIDE7XG4gICAgICAgICAgICB2YXIgZW5kQXJncyA9IHZhbHVlLmluZGV4T2YoJyknKTtcbiAgICAgICAgICAgIHJldHVybiBuZXcgRnVuY3Rpb24odmFsdWUuc3Vic3RyaW5nKHN0YXJ0QXJncywgZW5kQXJncyksIHZhbHVlLnN1YnN0cmluZyhzdGFydEJvZHksIGVuZEJvZHkpKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgdmFyIGRlc2VyaWFsaXplZCA9IGRlc2VyaWFsaXplKGUuZGF0YSk7XG4gICAgICB2YXIgbWFwcGVkID0gZGVzZXJpYWxpemVkLmRhdGEubWFwKGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgcmV0dXJuIGRlc2VyaWFsaXplZC5mYWN0b3J5KGQpO1xuICAgICAgfSk7XG5cbiAgICAgIHNlbGYucG9zdE1lc3NhZ2UobWFwcGVkKTtcbiAgICB9YFxuICAgIF0sXG4gICAge1xuICAgICAgdHlwZTogJ3RleHQvamF2YXNjcmlwdCdcbiAgICB9XG4gICk7XG5cbiAgY29uc3QgdXJsID0gVVJMLmNyZWF0ZU9iamVjdFVSTChibG9iKTtcbiAgcmV0dXJuIG5ldyBXb3JrZXIodXJsKTtcbn1cblxuLyoqXG4gKiAgQGV4YW1wbGVcbiAqICAgY29uc3QgbW9ja1RvZG9zID0gQXJyYXkuZnJvbSh7bGVuZ3RoOiAxMDAwMH0sIChfLCB4KSA9PiAoe2lkOiB4fSkpO1xuICpcbiAqICAgb2YobW9ja1RvZG9zKS5waXBlKG1hcEluV29ya2VyPFRvZG8+KGNyZWF0ZVRvZG8pKVxuICogICAuc3Vic2NyaWJlKHJlcyA9PiBjb25zb2xlLmxvZyhyZXMpKTtcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG1hcEluV29ya2VyPFQ+KGZhY3RvcnlGbjogRnVuY3Rpb24pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHNvdXJjZSk6IE9ic2VydmFibGU8VFtdPiB7XG4gICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlKG9ic2VydmVyID0+IHtcbiAgICAgIGNvbnN0IHdvcmtlciA9IGNyZWF0ZVdvcmtlcigpO1xuXG4gICAgICB3b3JrZXIub25tZXNzYWdlID0gZnVuY3Rpb24oZSkge1xuICAgICAgICBvYnNlcnZlci5uZXh0KGUuZGF0YSk7XG4gICAgICAgIG9ic2VydmVyLmNvbXBsZXRlKCk7XG4gICAgICAgIHdvcmtlci50ZXJtaW5hdGUoKTtcbiAgICAgIH07XG5cbiAgICAgIHdvcmtlci5vbmVycm9yID0gZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgIG9ic2VydmVyLmVycm9yKGVycik7XG4gICAgICAgIG9ic2VydmVyLmNvbXBsZXRlKCk7XG4gICAgICAgIHdvcmtlci50ZXJtaW5hdGUoKTtcbiAgICAgIH07XG5cbiAgICAgIHJldHVybiBzb3VyY2Uuc3Vic2NyaWJlKHZhbHVlID0+IHtcbiAgICAgICAgY29uc3QgaW5wdXQgPSB7XG4gICAgICAgICAgZmFjdG9yeTogZmFjdG9yeUZuLFxuICAgICAgICAgIGRhdGE6IHZhbHVlXG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IHNlcmlhbGl6ZWQgPSBzZXJpYWxpemUoaW5wdXQpO1xuXG4gICAgICAgIHdvcmtlci5wb3N0TWVzc2FnZShzZXJpYWxpemVkKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9O1xufVxuIl19