/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
import { _crud } from '../internal/crud';
import { AkitaImmutabilityError, assertActive } from '../internal/error';
import { __globalState } from '../internal/global-state';
import { coerceArray, entityExists, isFunction, isNil, isObject, toBoolean } from '../internal/utils';
import { isDev, Store } from './store';
/**
 * The Root Store that every sub store needs to inherit and
 * invoke `super` with the initial state.
 * @template S, E, ActiveEntity
 */
export class EntityStore extends Store {
    /**
     *
     * Initiate the store with the state
     * @param {?=} initialState
     * @param {?=} options
     */
    constructor(initialState = {}, options = {}) {
        super(Object.assign({}, getInitialEntitiesState(), initialState), options);
    }
    /**
     * @return {?}
     */
    get entities() {
        return this._value().entities;
    }
    /**
     *
     * Replace current collection with provided collection
     *
     * \@example
     * this.store.set([Entity, Entity]);
     * this.store.set({1: Entity, 2: Entity});
     * this.store.set([{id: 1}, {id: 2}], { entityClass: Product });
     *
     * @param {?} entities
     * @param {?=} options
     * @return {?}
     */
    set(entities, options = {}) {
        isDev() && __globalState.setAction({ type: 'Set Entities' });
        this.setState(state => _crud._set(state, isNil(entities) ? [] : entities, options.entityClass, this.idKey));
        this.setDirty();
    }
    /**
     * Create or replace an entity in the store.
     *
     * \@example
     * this.store.createOrReplace(3, Entity);
     *
     * @param {?} id
     * @param {?} entity
     * @return {?}
     */
    createOrReplace(id, entity) {
        if (!entityExists(id, this._value().entities)) {
            this.addWhenNotExists(id, entity);
        }
        else {
            isDev() && __globalState.setAction({ type: 'Create or Replace Entity', entityId: [id] });
            this.setState(state => _crud._replaceEntity(state, id, entity));
        }
    }
    /**
     *
     * Insert or Update
     * @param {?} id
     * @param {?} entityOrFn
     * @return {?}
     */
    upsert(id, entityOrFn) {
        if (!entityExists(id, this._value().entities)) {
            /** @type {?} */
            const resolve = isFunction(entityOrFn) ? ((/** @type {?} */ (entityOrFn)))({}) : entityOrFn;
            this.addWhenNotExists(id, resolve);
        }
        else {
            this.update(id, (/** @type {?} */ (entityOrFn)));
        }
    }
    /**
     * Add an entity or entities to the store.
     *
     * \@example
     * this.store.add([Entity, Entity]);
     * this.store.add(Entity);
     * this.store.add(Entity, { prepend: true });
     * @param {?} entities
     * @param {?=} options
     * @return {?}
     */
    add(entities, options) {
        /** @type {?} */
        const toArray = coerceArray(entities);
        if (toArray.length === 0)
            return;
        /**
         * If we pass entities that already exist, we should ignore them
         * @type {?}
         */
        const allExists = toArray.every(entity => this._value().ids.indexOf(entity[this.idKey]) > -1);
        if (allExists)
            return;
        isDev() && __globalState.setAction({ type: 'Add Entity' });
        this.setState(state => _crud._add(state, toArray, this.idKey, options));
    }
    /**
     * @param {?} idsOrFn
     * @param {?=} newStateOrFn
     * @return {?}
     */
    update(idsOrFn, newStateOrFn) {
        /** @type {?} */
        let ids = [];
        /** @type {?} */
        const storeIds = this._value().ids;
        if (isFunction(idsOrFn)) {
            for (let i = 0, len = storeIds.length; i < len; i++) {
                /** @type {?} */
                const id = storeIds[i];
                /** @type {?} */
                const entity = this._value().entities[id];
                if (entity && ((/** @type {?} */ (idsOrFn)))(entity)) {
                    ids.push(id);
                }
            }
        }
        else {
            ids = toBoolean(idsOrFn) ? coerceArray(idsOrFn) : storeIds;
        }
        if (ids.length === 0)
            return;
        isDev() && __globalState.setAction({ type: 'Update Entity', entityId: ids });
        this.setState(state => {
            return _crud._update(state, ids, newStateOrFn, this.idKey);
        });
    }
    /**
     * An alias to update all.
     * @param {?} state
     * @return {?}
     */
    updateAll(state) {
        if (this._value().ids.length === 0)
            return;
        this.update(null, state);
    }
    /**
     * Update the root state (data which is external to the entities).
     *
     * \@example
     * this.store.updateRoot({
     *   metadata: 'new metadata
     * });
     *
     *  this.store.updateRoot(state => {
     *    return {
     *      metadata: {
     *        ...state.metadata,
     *        key: 'new value'
     *      }
     *    }
     *  });
     * @param {?} newStateFn
     * @param {?=} action
     * @return {?}
     */
    updateRoot(newStateFn, action) {
        /** @type {?} */
        const newState = isFunction(newStateFn) ? newStateFn(this._value()) : newStateFn;
        if (newState === this._value()) {
            throw new AkitaImmutabilityError(this.storeName);
        }
        isDev() && __globalState.setAction(action || { type: 'Update Root' });
        this.setState(state => {
            return Object.assign({}, ((/** @type {?} */ (state))), ((/** @type {?} */ (newState))));
        });
    }
    /**
     * @param {?=} idsOrFn
     * @return {?}
     */
    remove(idsOrFn) {
        /** @type {?} */
        const storeIds = this._value().ids;
        if (storeIds.length === 0)
            return;
        /** @type {?} */
        const idPassed = toBoolean(idsOrFn);
        if (!idPassed)
            this.setPristine();
        /** @type {?} */
        let ids = [];
        if (isFunction(idsOrFn)) {
            for (let i = 0, len = storeIds.length; i < len; i++) {
                /** @type {?} */
                const id = storeIds[i];
                /** @type {?} */
                const entity = this._value().entities[id];
                if (entity && idsOrFn(entity)) {
                    ids.push(id);
                }
            }
        }
        else {
            ids = idPassed ? coerceArray(idsOrFn) : null;
        }
        if (ids && ids.length === 0)
            return;
        isDev() && __globalState.setAction({ type: 'Remove Entity', entityId: ids });
        this.setState(state => {
            return _crud._remove(state, ids);
        });
    }
    /**
     *
     * Update the active entity.
     *
     * \@example
     * this.store.updateActive(active => {
     *   return {
     *     config: {
     *      ..active.config,
     *      date
     *     }
     *   }
     * })
     * @param {?} newStateFn
     * @return {?}
     */
    updateActive(newStateFn) {
        assertActive(this._value());
        isDev() && __globalState.setAction({ type: 'Update Active Entity', entityId: this._value().active });
        this.setState(state => {
            /** @type {?} */
            const activeId = (/** @type {?} */ (state.active));
            /** @type {?} */
            const newState = isFunction(newStateFn) ? newStateFn(state.entities[activeId]) : newStateFn;
            if (newState === state) {
                throw new AkitaImmutabilityError(this.storeName);
            }
            return _crud._update(state, [activeId], newState, this.idKey);
        });
    }
    /**
     * Set the given entity as active.
     * @param {?} idOrOptions
     * @return {?}
     */
    setActive(idOrOptions) {
        /** @type {?} */
        let activeId;
        if (isObject(idOrOptions)) {
            if (isNil(this._value().active))
                return;
            ((/** @type {?} */ (idOrOptions))) = Object.assign({ wrap: true }, idOrOptions);
            /** @type {?} */
            const ids = this._value().ids;
            /** @type {?} */
            const currentIdIndex = ids.indexOf(this._value().active);
            if (((/** @type {?} */ (idOrOptions))).prev) {
                /** @type {?} */
                const isFirst = currentIdIndex === 0;
                if (isFirst && !((/** @type {?} */ (idOrOptions))).wrap)
                    return;
                activeId = isFirst ? ids[ids.length - 1] : ((/** @type {?} */ (ids[currentIdIndex - 1])));
            }
            else if (((/** @type {?} */ (idOrOptions))).next) {
                /** @type {?} */
                const isLast = ids.length === currentIdIndex + 1;
                if (isLast && !((/** @type {?} */ (idOrOptions))).wrap)
                    return;
                activeId = isLast ? ids[0] : ((/** @type {?} */ (ids[currentIdIndex + 1])));
            }
        }
        else {
            if (idOrOptions === this._value().active)
                return;
            activeId = (/** @type {?} */ (idOrOptions));
        }
        isDev() && __globalState.setAction({ type: 'Set Active Entity', entityId: activeId });
        this.setState(state => {
            return Object.assign({}, ((/** @type {?} */ (state))), { active: activeId });
        });
    }
    /**
     * @param {?} id
     * @param {?} entity
     * @return {?}
     */
    addWhenNotExists(id, entity) {
        if (!entity[this.idKey]) {
            entity[this.idKey] = id;
        }
        this.add(entity);
    }
}
/** @type {?} */
export const getInitialEntitiesState = () => ((/** @type {?} */ ({
    entities: {},
    ids: [],
    loading: true,
    error: null
})));
/** @type {?} */
export const getInitialActiveState = () => ((/** @type {?} */ ({
    active: null
})));
//# sourceMappingURL=data:application/json;base64,