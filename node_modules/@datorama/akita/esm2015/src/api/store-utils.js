/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
import { isNumber } from '../internal/utils';
import { __stores__ } from './store';
import { applyTransaction } from './transaction';
/**
 * \@example
 *
 * this.peopleStore.update(id, person => ({
 *   guests: increment(person.guests)
 * }));
 * @param {?} value
 * @param {?=} params
 * @return {?}
 */
export function increment(value, params = { maxValue: undefined }) {
    if (isNumber(value) === false)
        return;
    if (params.maxValue && value === params.maxValue)
        return value;
    return value + 1;
}
/**
 * \@example
 *
 * this.peopleStore.update(id, person => ({
 *   guests: decrement(person.guests)
 * }));
 * @param {?} value
 * @param {?=} params
 * @return {?}
 */
export function decrement(value, params = { allowNegative: false }) {
    if (isNumber(value) === false)
        return;
    if (params.allowNegative === false && value === 0) {
        return value;
    }
    return value - 1;
}
/**
 * Generate random guid
 * @return {?}
 */
export function guid() {
    return 'xxxxxx4xyx'.replace(/[xy]/g, c => {
        /** @type {?} */
        const r = (Math.random() * 16) | 0;
        /** @type {?} */
        const v = c == 'x' ? r : (r & 0x3) | 0x8;
        return v.toString(16);
    });
}
/**
 * @record
 */
export function ResetStoresParams() { }
if (false) {
    /**
     *  By default the whole state is resetted, use this param to exclude stores that you don't want to reset.
     * @type {?}
     */
    ResetStoresParams.prototype.exclude;
}
/**
 *
 * @param {?=} options
 * @return {?}
 */
export function resetStores(options) {
    /** @type {?} */
    const defaults = {
        exclude: []
    };
    options = Object.assign({}, defaults, options);
    /** @type {?} */
    const stores = Object.keys(__stores__);
    applyTransaction(() => {
        for (const store of stores) {
            /** @type {?} */
            const s = __stores__[store];
            if (!options.exclude) {
                s.reset();
            }
            else {
                if (options.exclude.indexOf(s.storeName) === -1) {
                    s.reset();
                }
            }
        }
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RvcmUtdXRpbHMuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZGF0b3JhbWEvYWtpdGEvIiwic291cmNlcyI6WyJzcmMvYXBpL3N0b3JlLXV0aWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDN0MsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUNyQyxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxlQUFlLENBQUM7Ozs7Ozs7Ozs7O0FBU2pELE1BQU0sVUFBVSxTQUFTLENBQUMsS0FBYSxFQUFFLFNBQTJDLEVBQUUsUUFBUSxFQUFFLFNBQVMsRUFBRTtJQUN6RyxJQUFJLFFBQVEsQ0FBQyxLQUFLLENBQUMsS0FBSyxLQUFLO1FBQUUsT0FBTztJQUN0QyxJQUFJLE1BQU0sQ0FBQyxRQUFRLElBQUksS0FBSyxLQUFLLE1BQU0sQ0FBQyxRQUFRO1FBQUUsT0FBTyxLQUFLLENBQUM7SUFDL0QsT0FBTyxLQUFLLEdBQUcsQ0FBQyxDQUFDO0FBQ25CLENBQUM7Ozs7Ozs7Ozs7O0FBU0QsTUFBTSxVQUFVLFNBQVMsQ0FBQyxLQUFLLEVBQUUsU0FBcUMsRUFBRSxhQUFhLEVBQUUsS0FBSyxFQUFFO0lBQzVGLElBQUksUUFBUSxDQUFDLEtBQUssQ0FBQyxLQUFLLEtBQUs7UUFBRSxPQUFPO0lBQ3RDLElBQUksTUFBTSxDQUFDLGFBQWEsS0FBSyxLQUFLLElBQUksS0FBSyxLQUFLLENBQUMsRUFBRTtRQUNqRCxPQUFPLEtBQUssQ0FBQztLQUNkO0lBQ0QsT0FBTyxLQUFLLEdBQUcsQ0FBQyxDQUFDO0FBQ25CLENBQUM7Ozs7O0FBS0QsTUFBTSxVQUFVLElBQUk7SUFDbEIsT0FBTyxZQUFZLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsRUFBRTs7Y0FDakMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLEVBQUUsQ0FBQyxHQUFHLENBQUM7O2NBQ2hDLENBQUMsR0FBRyxDQUFDLElBQUksR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUc7UUFDcEMsT0FBTyxDQUFDLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ3hCLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQzs7OztBQUVELHVDQUtDOzs7Ozs7SUFEQyxvQ0FBa0I7Ozs7Ozs7QUFPcEIsTUFBTSxVQUFVLFdBQVcsQ0FBQyxPQUFvQzs7VUFDeEQsUUFBUSxHQUFzQjtRQUNsQyxPQUFPLEVBQUUsRUFBRTtLQUNaO0lBRUQsT0FBTyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLFFBQVEsRUFBRSxPQUFPLENBQUMsQ0FBQzs7VUFDekMsTUFBTSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDO0lBRXRDLGdCQUFnQixDQUFDLEdBQUcsRUFBRTtRQUNwQixLQUFLLE1BQU0sS0FBSyxJQUFJLE1BQU0sRUFBRTs7a0JBQ3BCLENBQUMsR0FBRyxVQUFVLENBQUMsS0FBSyxDQUFDO1lBQzNCLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFO2dCQUNwQixDQUFDLENBQUMsS0FBSyxFQUFFLENBQUM7YUFDWDtpQkFBTTtnQkFDTCxJQUFJLE9BQU8sQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRTtvQkFDL0MsQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUFDO2lCQUNYO2FBQ0Y7U0FDRjtJQUNILENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGlzTnVtYmVyIH0gZnJvbSAnLi4vaW50ZXJuYWwvdXRpbHMnO1xuaW1wb3J0IHsgX19zdG9yZXNfXyB9IGZyb20gJy4vc3RvcmUnO1xuaW1wb3J0IHsgYXBwbHlUcmFuc2FjdGlvbiB9IGZyb20gJy4vdHJhbnNhY3Rpb24nO1xuXG4vKipcbiAqIEBleGFtcGxlXG4gKlxuICogdGhpcy5wZW9wbGVTdG9yZS51cGRhdGUoaWQsIHBlcnNvbiA9PiAoe1xuICogICBndWVzdHM6IGluY3JlbWVudChwZXJzb24uZ3Vlc3RzKVxuICogfSkpO1xuICovXG5leHBvcnQgZnVuY3Rpb24gaW5jcmVtZW50KHZhbHVlOiBudW1iZXIsIHBhcmFtczogeyBtYXhWYWx1ZTogbnVtYmVyIHwgdW5kZWZpbmVkIH0gPSB7IG1heFZhbHVlOiB1bmRlZmluZWQgfSkge1xuICBpZiAoaXNOdW1iZXIodmFsdWUpID09PSBmYWxzZSkgcmV0dXJuO1xuICBpZiAocGFyYW1zLm1heFZhbHVlICYmIHZhbHVlID09PSBwYXJhbXMubWF4VmFsdWUpIHJldHVybiB2YWx1ZTtcbiAgcmV0dXJuIHZhbHVlICsgMTtcbn1cblxuLyoqXG4gKiBAZXhhbXBsZVxuICpcbiAqIHRoaXMucGVvcGxlU3RvcmUudXBkYXRlKGlkLCBwZXJzb24gPT4gKHtcbiAqICAgZ3Vlc3RzOiBkZWNyZW1lbnQocGVyc29uLmd1ZXN0cylcbiAqIH0pKTtcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRlY3JlbWVudCh2YWx1ZSwgcGFyYW1zOiB7IGFsbG93TmVnYXRpdmU6IGJvb2xlYW4gfSA9IHsgYWxsb3dOZWdhdGl2ZTogZmFsc2UgfSkge1xuICBpZiAoaXNOdW1iZXIodmFsdWUpID09PSBmYWxzZSkgcmV0dXJuO1xuICBpZiAocGFyYW1zLmFsbG93TmVnYXRpdmUgPT09IGZhbHNlICYmIHZhbHVlID09PSAwKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG4gIHJldHVybiB2YWx1ZSAtIDE7XG59XG5cbi8qKlxuICogR2VuZXJhdGUgcmFuZG9tIGd1aWRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGd1aWQoKSB7XG4gIHJldHVybiAneHh4eHh4NHh5eCcucmVwbGFjZSgvW3h5XS9nLCBjID0+IHtcbiAgICBjb25zdCByID0gKE1hdGgucmFuZG9tKCkgKiAxNikgfCAwLFxuICAgICAgdiA9IGMgPT0gJ3gnID8gciA6IChyICYgMHgzKSB8IDB4ODtcbiAgICByZXR1cm4gdi50b1N0cmluZygxNik7XG4gIH0pO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFJlc2V0U3RvcmVzUGFyYW1zIHtcbiAgLyoqXG4gICAqICBCeSBkZWZhdWx0IHRoZSB3aG9sZSBzdGF0ZSBpcyByZXNldHRlZCwgdXNlIHRoaXMgcGFyYW0gdG8gZXhjbHVkZSBzdG9yZXMgdGhhdCB5b3UgZG9uJ3Qgd2FudCB0byByZXNldC5cbiAgICovXG4gIGV4Y2x1ZGU6IHN0cmluZ1tdO1xufVxuXG4vKipcbiAqXG4gKiBAcGFyYW0gb3B0aW9uc1xuICovXG5leHBvcnQgZnVuY3Rpb24gcmVzZXRTdG9yZXMob3B0aW9ucz86IFBhcnRpYWw8UmVzZXRTdG9yZXNQYXJhbXM+KSB7XG4gIGNvbnN0IGRlZmF1bHRzOiBSZXNldFN0b3Jlc1BhcmFtcyA9IHtcbiAgICBleGNsdWRlOiBbXVxuICB9O1xuXG4gIG9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHt9LCBkZWZhdWx0cywgb3B0aW9ucyk7XG4gIGNvbnN0IHN0b3JlcyA9IE9iamVjdC5rZXlzKF9fc3RvcmVzX18pO1xuXG4gIGFwcGx5VHJhbnNhY3Rpb24oKCkgPT4ge1xuICAgIGZvciAoY29uc3Qgc3RvcmUgb2Ygc3RvcmVzKSB7XG4gICAgICBjb25zdCBzID0gX19zdG9yZXNfX1tzdG9yZV07XG4gICAgICBpZiAoIW9wdGlvbnMuZXhjbHVkZSkge1xuICAgICAgICBzLnJlc2V0KCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAob3B0aW9ucy5leGNsdWRlLmluZGV4T2Yocy5zdG9yZU5hbWUpID09PSAtMSkge1xuICAgICAgICAgIHMucmVzZXQoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSk7XG59XG4iXX0=